{
    "docs": [
        {
            "location": "/", 
            "text": "jsPsych is a JavaScript library for creating and running behavioral experiments in a web browser. The library provides a flexible framework for building a wide range of laboratory-like experiments that can be run online.\n\n\nTo use jsPsych, you provide a description of the structure (in the form of \na timeline\n). jsPsych handles things like determining which trial to run next, storing data, and randomization. jsPsych uses \nplugins\n to define what to do at each point on the timeline. Plugins are ready-made templates for simple experimental tasks like displaying instructions or displaying a stimulus and collecting a keyboard response. Plugins are very flexible to support a wide variety of experiments, and it is easy to create your own plugin if you have experience with JavaScript programming.\n\n\nThe page on timelines\n is a good place to start learning about jsPsych. From there, you might want to complete the \nHello World! tutorial\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/tutorials/hello-world/", 
            "text": "jsPsych \"Hello world\" experiment\n\n\nIn the long tradition of \n\"Hello world!\"\n examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.\n\n\nStep 1: Download the jsPsych library\n\n\nStart by downloading the jsPsych library. The most recent version can always be found on the \nGitHub releases page\n.\n\n\n\n\nStep 2: Create a folder to store your experiment files\n\n\nCreate a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called \njspsych-5.0\n if using v5.0 of jsPsych) into the experiment folder. Here's what it looks like on a mac:\n\n\n\n\nStep 3: Create a new HTML file\n\n\nTo edit jsPsych code, you'll need a programming-friendly text editor. Some free options are:\n\n\n\n\nNotepad++\n (Windows)\n\n\nTextMate\n (Mac OSX)\n\n\nAtom\n (Windows \n Mac OSX)\n\n\n\n\nOnce you've got a text editor that you like, create a new file in the experiment folder called \nexperiment.html\n\n\n\n\nStep 4: Add the bare-minimum HTML code\n\n\nThere's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document\n\n\n!doctype html\n\n\nhtml\n\n    \nhead\n\n        \ntitle\nMy experiment\n/title\n\n    \n/head\n\n    \nbody\n\n    \n/body\n\n\n/html\n\n\n\n\n\nAdd the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.\n\n\nStep 5: Import the jsPsych library\n\n\nTo use jsPsych, add a \nscript\n tag to import the library. You'll need to import the jQuery library as well, which jsPsych depends on. Make sure to import jQuery before jsPsych. jQuery can be imported directly from \na hosted version on Google's servers\n.\n\n\n!doctype html\n\n\nhtml\n\n    \nhead\n\n        \ntitle\nMy experiment\n/title\n\n        \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n        \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n    \n/head\n\n    \nbody\n\n    \n/body\n\n\n/html\n\n\n\n\n\nYou may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a \nlink\n tag to the \nhead\n section of the document.\n\n\n!doctype html\n\n\nhtml\n\n    \nhead\n\n        \ntitle\nMy experiment\n/title\n\n        \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n        \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n        \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n    \n/head\n\n    \nbody\n\n    \n/body\n\n\n/html\n\n\n\n\n\nStep 6: Use the jspsych-text plugin to print a message\n\n\nFor the demo, we want to show some text on the screen. This is exactly what the \njspsych-text plugin\n is designed to do. To use the plugin, we need to load it with a \nscript\n tag.\n\n\n!doctype html\n\n\nhtml\n\n    \nhead\n\n        \ntitle\nMy experiment\n/title\n\n        \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n        \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n        \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n        \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n    \n/head\n\n    \nbody\n\n    \n/body\n\n\n/html\n\n\n\n\n\nOnce the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the text plugin, we create a JavaScript object with the property \ntype\n equal to \n'text'\n. Then we can specify the other parameters of the plugin in the same object.\n\n\nTo add JavaScript code directly to the webpage we need to add a set of \nscript\n tags after the \nbody\n tags.\n\n\n!doctype html\n\n\nhtml\n\n    \nhead\n\n        \ntitle\nMy experiment\n/title\n\n        \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n        \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n        \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n        \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n    \n/head\n\n    \nbody\n\n    \n/body\n\n    \nscript\n\n\n    var hello_trial = {\n        type: 'text',\n        text: 'Hello world!'\n    }\n\n    \n/script\n\n\n/html\n\n\n\n\n\nNow that we have the trial defined, we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the \njsPsych.init\n function and specifying the \ntimeline\n parameter.\n\n\n!doctype html\n\n\nhtml\n\n    \nhead\n\n        \ntitle\nMy experiment\n/title\n\n        \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n        \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n        \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n        \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n    \n/head\n\n    \nbody\n\n    \n/body\n\n    \nscript\n\n\n    var hello_trial = {\n        type: 'text',\n        text: 'Hello world!'\n    }\n\n    jsPsych.init({\n        timeline: [ hello_trial ]\n    })\n\n    \n/script\n\n\n/html\n\n\n\n\n\nOnce you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).", 
            "title": "The Basics: Hello World"
        }, 
        {
            "location": "/tutorials/hello-world/#jspsych-hello-world-experiment", 
            "text": "In the long tradition of  \"Hello world!\"  examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.", 
            "title": "jsPsych \"Hello world\" experiment"
        }, 
        {
            "location": "/tutorials/hello-world/#step-1-download-the-jspsych-library", 
            "text": "Start by downloading the jsPsych library. The most recent version can always be found on the  GitHub releases page .", 
            "title": "Step 1: Download the jsPsych library"
        }, 
        {
            "location": "/tutorials/hello-world/#step-2-create-a-folder-to-store-your-experiment-files", 
            "text": "Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called  jspsych-5.0  if using v5.0 of jsPsych) into the experiment folder. Here's what it looks like on a mac:", 
            "title": "Step 2: Create a folder to store your experiment files"
        }, 
        {
            "location": "/tutorials/hello-world/#step-3-create-a-new-html-file", 
            "text": "To edit jsPsych code, you'll need a programming-friendly text editor. Some free options are:   Notepad++  (Windows)  TextMate  (Mac OSX)  Atom  (Windows   Mac OSX)   Once you've got a text editor that you like, create a new file in the experiment folder called  experiment.html", 
            "title": "Step 3: Create a new HTML file"
        }, 
        {
            "location": "/tutorials/hello-world/#step-4-add-the-bare-minimum-html-code", 
            "text": "There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document  !doctype html  html \n     head \n         title My experiment /title \n     /head \n     body \n     /body  /html   Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.", 
            "title": "Step 4: Add the bare-minimum HTML code"
        }, 
        {
            "location": "/tutorials/hello-world/#step-5-import-the-jspsych-library", 
            "text": "To use jsPsych, add a  script  tag to import the library. You'll need to import the jQuery library as well, which jsPsych depends on. Make sure to import jQuery before jsPsych. jQuery can be imported directly from  a hosted version on Google's servers .  !doctype html  html \n     head \n         title My experiment /title \n         script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n         script src= jspsych-5.0/jspsych.js /script \n     /head \n     body \n     /body  /html   You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a  link  tag to the  head  section of the document.  !doctype html  html \n     head \n         title My experiment /title \n         script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n         script src= jspsych-5.0/jspsych.js /script \n         link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n     /head \n     body \n     /body  /html", 
            "title": "Step 5: Import the jsPsych library"
        }, 
        {
            "location": "/tutorials/hello-world/#step-6-use-the-jspsych-text-plugin-to-print-a-message", 
            "text": "For the demo, we want to show some text on the screen. This is exactly what the  jspsych-text plugin  is designed to do. To use the plugin, we need to load it with a  script  tag.  !doctype html  html \n     head \n         title My experiment /title \n         script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n         script src= jspsych-5.0/jspsych.js /script \n         script src= jspsych-5.0/plugins/jspsych-text.js /script \n         link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n     /head \n     body \n     /body  /html   Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the text plugin, we create a JavaScript object with the property  type  equal to  'text' . Then we can specify the other parameters of the plugin in the same object.  To add JavaScript code directly to the webpage we need to add a set of  script  tags after the  body  tags.  !doctype html  html \n     head \n         title My experiment /title \n         script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n         script src= jspsych-5.0/jspsych.js /script \n         script src= jspsych-5.0/plugins/jspsych-text.js /script \n         link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n     /head \n     body \n     /body \n     script \n\n    var hello_trial = {\n        type: 'text',\n        text: 'Hello world!'\n    }\n\n     /script  /html   Now that we have the trial defined, we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the  jsPsych.init  function and specifying the  timeline  parameter.  !doctype html  html \n     head \n         title My experiment /title \n         script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n         script src= jspsych-5.0/jspsych.js /script \n         script src= jspsych-5.0/plugins/jspsych-text.js /script \n         link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n     /head \n     body \n     /body \n     script \n\n    var hello_trial = {\n        type: 'text',\n        text: 'Hello world!'\n    }\n\n    jsPsych.init({\n        timeline: [ hello_trial ]\n    })\n\n     /script  /html   Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).", 
            "title": "Step 6: Use the jspsych-text plugin to print a message"
        }, 
        {
            "location": "/tutorials/rt-task/", 
            "text": "Summary of Tutorial Content\n\n\nThis tutorial will step through the creation of a simple response time task. The subject is asked to respond to blue circles by pressing the F key, but to not respond to orange circles. The concepts covered in the tutorial include:\n\n\n\n\nCreating trials to show instructions.\n\n\nCreating trials to show stimuli and measure response time.\n\n\nUsing the randomization methods of the jsPsych library.\n\n\nTagging trials with additional data to describe within-subject conditions.\n\n\nUsing functions as trial parameters to generate dynamic content.\n\n\nUsing callback functions to process the data for a trial immediately after the trial ends.\n\n\n\n\nPart 1: Creating a blank experiment\n\n\nStart by downloading jsPsych and setting up a folder to contain your experiment files. If you are unsure how to do this, follow steps 1-5 in the \nHello World tutorial\n. At the end of step 5 in the Hello World tutorial, you should have an experiment page that looks like this:\n\n\n!doctype html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMy experiment\n/title\n\n    \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n    \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n    \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n  \n/head\n\n  \nbody\n\n  \n/body\n\n\n/html\n\n\n\n\n\nThis will be our starting point for building the rest of the experiment.\n\n\nPart 2: Display welcome message\n\n\nLet's greet the subject with a simple welcome message using the \njspsych-text\n plugin.\n\n\nFirst, we create a block that uses the jspsych-text plugin and contains a simple string to show the subject.\n\n\nvar welcome_block = {\n  type: \ntext\n,\n  text: \nWelcome to the experiment. Press any key to begin.\n\n};\n\n\n\n\nNext, we create an array to hold the blocks of our experiment. Right now, we only have one block, but we will add several more throughout the tutorial.\n\n\nvar timeline = [];\ntimeline.push(welcome_block);\n\n\n\n\nFinally, we tell jsPsych to run the experiment by calling the \njsPsych.init() function\n and passing in the array that defines the experiment timeline.\n\n\njsPsych.init({\n  timeline: timeline\n});\n\n\n\n\nThe complete code so far\n\n\n!doctype html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMy experiment\n/title\n\n    \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n    \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n    \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n  \n/head\n\n  \nbody\n\n  \n/body\n\n  \nscript\n\n\n    /* define welcome message block */\n    var welcome_block = {\n      type: \ntext\n,\n      text: \nWelcome to the experiment. Press any key to begin.\n\n    };\n\n    /* create experiment timeline array */\n    var timeline = [];\n    timeline.push(welcome_block);\n\n    /* start the experiment */\n    jsPsych.init({\n      timeline: timeline\n    });\n  \n/script\n\n\n/html\n\n\n\n\n\nPart 3: Show instructions\n\n\nWe can use the same basic structure from part 2 to create a new trial that shows instructions to the subject. The only difference in the trial we will create here is that we will use HTML formatting to control how the instructions display.\n\n\nThe block definition looks like this:\n\n\nvar instructions_block = {\n  type: \ntext\n,\n  text: \np\nIn this experiment, a circle will appear in the center \n +\n      \nof the screen.\n/p\np\nIf the circle is \nstrong\nblue\n/strong\n, \n +\n      \npress the letter F on the keyboard as fast as you can.\n/p\n +\n      \np\nIf the circle is \nstrong\norange\n/strong\n, do not press \n +\n      \nany key.\n/p\n +\n      \ndiv class='left center-content'\nimg src='img/blue.png'\n/img\n +\n      \np class='small'\nstrong\nPress the F key\n/strong\n/p\n/div\n +\n      \ndiv class='right center-content'\nimg src='img/orange.png'\n/img\n +\n      \np class='small'\nstrong\nDo not press a key\n/strong\n/p\n/div\n +\n      \np\nPress any key to begin.\n/p\n\n};\n\n\n\n\nDon't forget to add it to the experiment definition array:\n\n\ntimeline.push(instructions_block);\n\n\n\n\nThe complete code so far\n\n\n!doctype html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMy experiment\n/title\n\n    \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n    \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n    \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n  \n/head\n\n  \nbody\n\n  \n/body\n\n  \nscript\n\n\n    /* define welcome message block */\n    var welcome_block = {\n      type: \ntext\n,\n      text: \nWelcome to the experiment. Press any key to begin.\n\n    };\n\n    /* define instructions block */\n    var instructions_block = {\n      type: \ntext\n,\n      text: \np\nIn this experiment, a circle will appear in the center \n +\n          \nof the screen.\n/p\np\nIf the circle is \nstrong\nblue\n/strong\n, \n +\n          \npress the letter F on the keyboard as fast as you can.\n/p\n +\n          \np\nIf the circle is \nstrong\norange\n/strong\n, do not press \n +\n          \nany key.\n/p\n +\n          \ndiv class='left center-content'\nimg src='img/blue.png'\n/img\n +\n          \np class='small'\nstrong\nPress the F key\n/strong\n/p\n/div\n +\n          \ndiv class='right center-content'\nimg src='img/orange.png'\n/img\n +\n          \np class='small'\nstrong\nDo not press a key\n/strong\n/p\n/div\n +\n          \np\nPress any key to begin.\n/p\n\n    };\n\n    /* create experiment definition array */\n    var timeline = [];\n    timeline.push(welcome_block);\n    timeline.push(instructions_block);\n\n    /* start the experiment */\n    jsPsych.init({\n      timeline: timeline\n    });\n  \n/script\n\n\n/html\n\n\n\n\n\nPart 4: Displaying stimuli and getting responses\n\n\nCreating trials to show the stimuli is conceptually the same as creating a trial to show instructions. The only difference is that we will use the \njspsych-single-stim\n plugin to show the stimuli. This plugin has different options than the jspsych-text plugin, so the code that defines the trial will look slightly different.\n\n\nFirst, to use a plugin we need to load it in the \nhead\n section of the experiment page:\n\n\nhead\n\n  ...\n  \nscript src=\njspsych-5.0/plugins/jspsych-single-stim.js\n/script\n\n  ...\n\n/head\n\n\n\n\n\nYou'll need to download the image files used as stimuli in the experiment. Here are the images we will use. Right-click on each image and select \nSave Image As...\n. Put the images in a folder called \nimg\n in the experiment folder you created in Part 1.\n\n\n\n\n\n\nNext, we will define the first trial. For now, we will just show each image once. The path to the image file should be set as the \nstimulus\n parameter. We will also set the option for which keys the subject is allowed to use to respond (\nchoices\n) so that only the 'F' key is a valid response.\n\n\nvar blue_trial = {\n  type: 'single-stim',\n  stimulus: 'img/blue.png',\n  choices: ['F']\n};\n\nvar orange_trial = {\n  type: 'single-stim',\n  stimulus: 'img/orange.png',\n  choices: ['F']\n}\n\n\n\n\nAs usual, we need to add the trials to the timeline.\n\n\ntimeline.push(blue_trial, orange_trial);\n\n\n\n\nThe complete code so far\n\n\n!doctype html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMy experiment\n/title\n\n    \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n    \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-single-stim.js\n/script\n\n    \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n  \n/head\n\n  \nbody\n\n  \n/body\n\n  \nscript\n\n\n    /* define welcome message block */\n    var welcome_block = {\n      type: 'text',\n      text: 'Welcome to the experiment. Press any key to begin.'\n    };\n\n    /* define instructions block */\n    var instructions_block = {\n      type: \ntext\n,\n      text: \np\nIn this experiment, a circle will appear in the center \n +\n          \nof the screen.\n/p\np\nIf the circle is \nstrong\nblue\n/strong\n, \n +\n          \npress the letter F on the keyboard as fast as you can.\n/p\n +\n          \np\nIf the circle is \nstrong\norange\n/strong\n, do not press \n +\n          \nany key.\n/p\n +\n          \ndiv class='left center-content'\nimg src='img/blue.png'\n/img\n +\n          \np class='small'\nstrong\nPress the F key\n/strong\n/p\n/div\n +\n          \ndiv class='right center-content'\nimg src='img/orange.png'\n/img\n +\n          \np class='small'\nstrong\nDo not press a key\n/strong\n/p\n/div\n +\n          \np\nPress any key to begin.\n/p\n,\n      timing_post_trial: 2000\n    };\n\n    /* define test trials */\n    var blue_trial = {\n      type: 'single-stim',\n      stimulus: 'img/blue.png',\n      choices: ['F']\n    };\n\n    var orange_trial = {\n      type: 'single-stim',\n      stimulus: 'img/orange.png',\n      choices: ['F']\n    }\n\n    /* create experiment definition array */\n    var timeline = [];\n    timeline.push(welcome_block);\n    timeline.push(instructions_block);\n    timeline.push(blue_trial, orange_trial);\n\n    /* start the experiment */\n    jsPsych.init({\n      timeline: timeline\n    });\n  \n/script\n\n\n/html\n\n\n\n\n\nPart 5: Nesting timelines\n\n\nIn the full experiment, we will want more than two trials. One way we could do this is to create many more objects that define trials and push them all onto the timeline, but there is a more efficient way: using nested timelines.\n\n\nAny trial object can have it's own \ntimeline\n parameter. Just like the \ntimeline\n parameter in \njsPsych.init\n, the value of this parameter should be an array with trial objects (or more objects with timelines -- the nesting can be as deep as you'd like).\n\n\nAn advantage of nesting timelines is that all the parameters of an object are passed on to the other trials on the timeline. If you have many trials where the same plugin and parameters are used, save for one or a handful of parameters that differ for each trial, you can define all of the shared parameters in the parent object. In this experiment, each test trial uses the same \ntype\n and \nchoices\n parameter, so our test trials can be defined like this:\n\n\nvar test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  timeline: [\n    {stimulus: 'img/blue.png'},\n    {stimulus: 'img/orange.png'}\n  ]\n}\n\n\n\n\nPart 6: Generating a random order of trials\n\n\nRight now our experiment is a measly two trials long. Even worse is that the order of the stimuli is the same every time!\n\n\nFortunately, jsPsych has a number of different ways to randomize the order of trials and generate repeated trials. One easy way to do this is to set the \nrandomize_order\n parameter to \ntrue\n on any object with a timeline. This will randomize the order of all of the trials in that timeline.\n\n\nvar test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  randomize_order: true,\n  timeline: [\n    {stimulus: 'img/blue.png'},\n    {stimulus: 'img/orange.png'}\n  ]\n}\n\n\n\n\nBut, this doesn't make the number of trials any greater. You could copy and paste the objects inside the timeline array a few times to make 20 trials. For short experiments, this is perfectly reasonable. However, many experiments have many more trials, and it would be useful to have other tools for repeating and randomizing trials. This is what the methods in the \njsPsych.randomization\n portion of the library are for.\n\n\nLet's start by taking the array that contains the two stimuli, and creating a new variable to hold the different kinds of trials.\n\n\nvar test_stimuli = [\n  {stimulus: 'img/blue.png'},\n  {stimulus: 'img/orange.png'}\n];\n\n\n\n\nNext, we will use the \njsPsych.randomization.repeat()\n method\n to generate an array that contains multiple copies of each stimulus in a random order. The first parameter to the method is the array containing the items to repeat and randomize. The second parameter is the number of times to repeat each element.\n\n\nvar all_trials = jsPsych.randomization.repeat(test_stimuli, 10);\n\n\n\n\nThis creates a new array, \nall_trials\n, that contains a random order of 10 blue trials and 10 orange trials. We can use this new array as the value for the \ntimeline\n parameter in the \ntest_block\n.\n\n\nvar test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  timeline: all_trials\n};\n\n\n\n\nNow the experiment is 20 trials long, and the trials are shown in a random order.\n\n\nPart 8: Modifying timing parameters\n\n\nAs currently constructed, the test trials start very soon after the instructions disappear. The stimuli also remain on the screen until a response is given. This clearly won't work, since the instructions are to \nnot\n respond when the circle is orange. We can modify these parameters of the plugin. Currently, we haven't specified any values related to timing in our block definitions. This means we are using the default values generated by the plugin. If we specify a value, then we can override the default value.\n\n\nFirst, let's give the subject a little more time to get ready after the instructions end by setting the \ntiming_post_trial\n parameter in the instructions trial. We will give the subject 2,000 milliseconds in between the instructions and the first trial.\n\n\nvar instructions_block = {\n  type: \ntext\n,\n  text: \np\nIn this experiment, a circle will appear in the center \n +\n      \nof the screen.\n/p\np\nIf the circle is \nstrong\nblue\n/strong\n, \n +\n      \npress the letter F on the keyboard as fast as you can.\n/p\n +\n      \np\nIf the circle is \nstrong\norange\n/strong\n, do not press \n +\n      \nany key.\n/p\n +\n      \ndiv class='left center-content'\nimg src='img/blue.png'\n/img\n +\n      \np class='small'\nstrong\nPress the F key\n/strong\n/p\n/div\n +\n      \ndiv class='right center-content'\nimg src='img/orange.png'\n/img\n +\n      \np class='small'\nstrong\nDo not press a key\n/strong\n/p\n/div\n +\n      \np\nPress any key to begin.\n/p\n,\n  timing_post_trial: 2000\n};\n\n\n\n\nNow, let's modify the test block so that the subject only has 1,500 milliseconds to respond before the trial ends.\n\n\nvar test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  timing_response: 1500,\n  timeline: all_trials\n};\n\n\n\n\nIf you are wondering where to figure out what the various parameter options for a plugin are, each plugin has its own \ndocumentation page\n which gives a list of all the parameters for that plugin and what the default values are.\n\n\nPart 9: Displaying the data\n\n\nWe have created a somewhat reasonable experiment at this point, so let's take a look at the data being generated. jsPsych has a handy \nfunction called \njsPsych.data.displayData()\n that is useful for debugging your experiment. It will remove all of the information on the screen and replace it with the raw data collected so far. This isn't terribly useful when you are actually running an experiment, but it's very handy for checking the data during development.\n\n\nWe need the \ndisplayData\n function to execute when the experiment ends. One way to do this is to use the \non_finish\n callback function\n. This function will automatically execute once all the trials in the experiment are finished. We can specify a function to call in the \ninit\n method.\n\n\njsPsych.init({\n  experiment_structure: experiment,\n  on_finish: function() {\n    jsPsych.data.displayData();\n  }\n});\n\n\n\n\nPart 10: Adding tagging data to a trial\n\n\nAll trials in jsPsych can be tagged with additional arbitrary data. This data will get stored alongside the data that the plugin generates, which allows experimenters to record properties of a trial with the data from the trial.\n\n\nIn this example experiment, we are going to tag each trial as being either a \ngo\n or a \nno-go\n trial. In this particular example, this is somewhat redundant, since we can determine the trial type by looking at the stimulus that was displayed. However, the technique is essential in many circumstances for marking the data for subsequent analysis.\n\n\nAdding tagging data involves setting the \ndata\n parameter of a trial. Like other parameters, you can set the \ndata\n parameter of any object and it will be passed on to the objects in the timeline. In this particular experiment, we want to set the data parameter for each type of stimulus. We can do that by adding a data property to the items in the \ntest_stimuli\n array:\n\n\nvar test_stimuli = [\n  {\n    stimulus: \nimg/blue.png\n,\n    data: { response: 'go' }\n  },\n  {\n    stimulus: \nimg/orange.png\n,\n    data: { response: 'no-go' }\n  }\n];\n\n\n\n\nThe value for the data property should be an object. Each key in the object will be a new entry in the data for that trial, with the corresponding value attached.\n\n\nPart 11: Using functions as parameters\n\n\nOne methodological flaw in our experiment right now is that the time between trials is always the same. This will let people anticipate the response as they learn how much time is in between the trials.\n\n\nWe can fix this by generating a random value for the \ntiming_post_trial\n parameter in the test block.\n\n\nMost jsPsych plugins will allow you to set the value of a parameter as a function. The function will be called at the start of the trial, and the parameter will be replaced with the return value of the function. We will create a simple function to generate a random value for the timing_post_trial parameter:\n\n\nvar post_trial_gap = function() {\n  return Math.floor( Math.random() * 1500 ) + 750;\n}\n\n\n\n\nThe above function will return a random value between 750 and 2250, with uniform sampling from the range. You can do whatever you like inside a function that is a parameter, as long as the return value is a valid value for the parameter.\n\n\nNow that we've got a function that generates a random time, we can specify the \ntiming_post_trial\n parameter in the testing block.\n\n\nvar test_block = {\n  type: \nsingle-stim\n,\n  choices: ['F'],\n  timing_response: 1500,\n  timing_post_trial: post_trial_gap,\n  timeline: all_trials\n};\n\n\n\n\nIf you run the experiment, you'll notice that the interval between trials changes randomly throughout the experiment.\n\n\nPart 12: Adding data to a trial that is based on the subject's performance\n\n\nIf you examine the data generated by the experiment, one thing that is missing is any direct indication of whether the subject responded correctly or not. It's possible to derive the correctness of the response by looking at a combination of the \nrt\n and \nstimulus\n values, but for subsequent analysis, it would also be useful to tag each trial with a \ncorrect\n property that is either \ntrue\n or \nfalse\n.\n\n\nWe can only determine whether a trial should be marked as correct or not after the trial is complete. What we really want to do is run some code after each trial to determine the correctness of the response that was made. We can use the \non_finish\n event to do this. If we attach an \non_finish\n event handler to a trial, we can execute a function immediately after the trial ends. The event handler (a function) is passed a single argument containing the data generated by the trial. In the example below, the event handler calculates the correctness of the response, and then uses the jsPsych.data.addDataToLastTrial method to add a correct property to the previous trial.\n\n\nvar test_block = {\n  type: \nsingle-stim\n,\n  choices: ['F'],\n  timing_response: 1500,\n  timing_post_trial: post_trial_gap,\n  on_finish: function(data){\n    var correct = false;\n    if(data.response == 'go' \n data.rt \n -1){\n      correct = true;\n    } else if(data.response == 'no-go' \n data.rt == -1){\n      correct = true;\n    }\n    jsPsych.data.addDataToLastTrial({correct: correct});\n  },\n  timeline: all_trials\n};\n\n\n\n\nPart 13: Displaying data to the subject\n\n\nWe've got a reasonable experiment at this point. One thing that subjects might appreciate is knowing how well they performed at the end of the experiment. We will create a simple debriefing screen at the end of the experiment that shows the subject their accuracy and average response time on correct responses.\n\n\nFirst, we need a function to compute the subject's accuracy and mean RT. We will use the \njsPsych.data.getTrialsOfType()\n method to get the data from all the trials run by the single-stim plugin. Then we will iterate through that data to compute the desired measures.\n\n\nfunction getSubjectData() {\n\n  var trials = jsPsych.data.getTrialsOfType('single-stim');\n\n  var sum_rt = 0;\n  var correct_trial_count = 0;\n  var correct_rt_count = 0;\n  for (var i = 0; i \n trials.length; i++) {\n    if (trials[i].correct == true) {\n      correct_trial_count++;\n      if(trials[i].rt \n -1){\n        sum_rt += trials[i].rt;\n        correct_rt_count++;\n      }\n    }\n  }\n  return {\n    rt: Math.floor(sum_rt / correct_rt_count),\n    accuracy: Math.floor(correct_trial_count / trials.length * 100)\n  }\n}\n\n\n\n\nNext, we add a trial using the text plugin to show the response time. However, there's one catch. We want to use the function we just added above to get the average response time of the subject. But we can't do this until the experiment is over. Therefore, we need to use a \nfunction\n as the value of the \ntext\n parameter in the block. This will result in the function being called right when the trial begins. If we didn't do this, then the \ngetAverageResponseTime()\n function would be executed at the beginning of the experiment, which would be bad since there is no data at that point!\n\n\nvar debrief_block = {\n  type: \ntext\n,\n  text: function() {\n    var subject_data = getSubjectData();\n    return \np\nYou responded correctly on \n+subject_data.accuracy+\n% of \n+\n    \nthe trials.\n/p\np\nYour average response time was \nstrong\n +\n    subject_data.rt + \nms\n/strong\n. Press any key to complete the \n+\n    \nexperiment. Thank you!\n/p\n;\n  }\n};\n\n\n\n\nWe need to add the debrief block to the experiment definition array.\n\n\nexperiment.push(debrief_block);\n\n\n\n\nThe final code\n\n\n!doctype html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nMy experiment\n/title\n\n    \nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\n/script\n\n    \nscript src=\njspsych-5.0/jspsych.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-text.js\n/script\n\n    \nscript src=\njspsych-5.0/plugins/jspsych-single-stim.js\n/script\n\n    \nlink href=\njspsych-5.0/css/jspsych.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n  \n/head\n\n  \nbody\n\n  \n/body\n\n  \nscript\n\n\n  /* define welcome message block */\n  var welcome_block = {\n    type: \ntext\n,\n    text: \nWelcome to the experiment. Press any key to begin.\n\n  };\n\n  /* define instructions block */\n  var instructions_block = {\n    type: \ntext\n,\n    text: \np\nIn this experiment, a circle will appear in the center \n +\n        \nof the screen.\n/p\np\nIf the circle is \nstrong\nblue\n/strong\n, \n +\n        \npress the letter F on the keyboard as fast as you can.\n/p\n +\n        \np\nIf the circle is \nstrong\norange\n/strong\n, do not press \n +\n        \nany key.\n/p\n +\n        \ndiv class='left center-content'\nimg src='img/blue.png'\n/img\n +\n        \np class='small'\nstrong\nPress the F key\n/strong\n/p\n/div\n +\n        \ndiv class='right center-content'\nimg src='img/orange.png'\n/img\n +\n        \np class='small'\nstrong\nDo not press a key\n/strong\n/p\n/div\n +\n        \np\nPress any key to begin.\n/p\n,\n    timing_post_trial: 2000\n  };\n\n  /* define test block */\n\n  var test_stimuli = [\n    {\n      stimulus: \nimg/blue.png\n,\n      data: { response: 'go' }\n    },\n    {\n      stimulus: \nimg/orange.png\n,\n      data: { response: 'no-go' }\n    }\n  ];\n\n  var all_trials = jsPsych.randomization.repeat(test_stimuli, 10);\n\n  var post_trial_gap = function() {\n    return Math.floor( Math.random() * 1500 ) + 750;\n  }\n\n  var test_block = {\n    type: \nsingle-stim\n,\n    choices: ['F'],\n    timing_response: 1500,\n    timing_post_trial: post_trial_gap,\n    on_finish: function(data){\n      var correct = false;\n      if(data.response == 'go' \n data.rt \n -1){\n        correct = true;\n      } else if(data.response == 'no-go' \n data.rt == -1){\n        correct = true;\n      }\n      jsPsych.data.addDataToLastTrial({correct: correct});\n    },\n    timeline: all_trials\n  };\n\n  /* define debrief block */\n\n  function getSubjectData() {\n\n    var trials = jsPsych.data.getTrialsOfType('single-stim');\n\n    var sum_rt = 0;\n    var correct_trial_count = 0;\n    var correct_rt_count = 0;\n    for (var i = 0; i \n trials.length; i++) {\n      if (trials[i].correct == true) {\n        correct_trial_count++;\n        if(trials[i].rt \n -1){\n          sum_rt += trials[i].rt;\n          correct_rt_count++;\n        }\n      }\n    }\n    return {\n      rt: Math.floor(sum_rt / correct_rt_count),\n      accuracy: Math.floor(correct_trial_count / trials.length * 100)\n    }\n  }\n\n  var debrief_block = {\n    type: \ntext\n,\n    text: function() {\n      var subject_data = getSubjectData();\n      return \np\nYou responded correctly on \n+subject_data.accuracy+\n% of \n+\n      \nthe trials.\n/p\np\nYour average response time was \nstrong\n +\n      subject_data.rt + \nms\n/strong\n. Press any key to complete the \n+\n      \nexperiment. Thank you!\n/p\n;\n    }\n  };\n\n  /* create experiment timeline array */\n  var timeline = [];\n  timeline.push(welcome_block);\n  timeline.push(instructions_block);\n  timeline.push(test_block);\n  timeline.push(debrief_block);\n\n  /* start the experiment */\n  jsPsych.init({\n    timeline: timeline,\n    on_finish: function() {\n      jsPsych.data.displayData();\n    }\n  });\n\n/script\n\n\n/html", 
            "title": "Demo Experiment: Simple Reaction Time Task"
        }, 
        {
            "location": "/tutorials/rt-task/#summary-of-tutorial-content", 
            "text": "This tutorial will step through the creation of a simple response time task. The subject is asked to respond to blue circles by pressing the F key, but to not respond to orange circles. The concepts covered in the tutorial include:   Creating trials to show instructions.  Creating trials to show stimuli and measure response time.  Using the randomization methods of the jsPsych library.  Tagging trials with additional data to describe within-subject conditions.  Using functions as trial parameters to generate dynamic content.  Using callback functions to process the data for a trial immediately after the trial ends.", 
            "title": "Summary of Tutorial Content"
        }, 
        {
            "location": "/tutorials/rt-task/#part-1-creating-a-blank-experiment", 
            "text": "Start by downloading jsPsych and setting up a folder to contain your experiment files. If you are unsure how to do this, follow steps 1-5 in the  Hello World tutorial . At the end of step 5 in the Hello World tutorial, you should have an experiment page that looks like this:  !doctype html  html \n   head \n     title My experiment /title \n     script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n     script src= jspsych-5.0/jspsych.js /script \n     script src= jspsych-5.0/plugins/jspsych-text.js /script \n     link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n   /head \n   body \n   /body  /html   This will be our starting point for building the rest of the experiment.", 
            "title": "Part 1: Creating a blank experiment"
        }, 
        {
            "location": "/tutorials/rt-task/#part-2-display-welcome-message", 
            "text": "Let's greet the subject with a simple welcome message using the  jspsych-text  plugin.  First, we create a block that uses the jspsych-text plugin and contains a simple string to show the subject.  var welcome_block = {\n  type:  text ,\n  text:  Welcome to the experiment. Press any key to begin. \n};  Next, we create an array to hold the blocks of our experiment. Right now, we only have one block, but we will add several more throughout the tutorial.  var timeline = [];\ntimeline.push(welcome_block);  Finally, we tell jsPsych to run the experiment by calling the  jsPsych.init() function  and passing in the array that defines the experiment timeline.  jsPsych.init({\n  timeline: timeline\n});  The complete code so far  !doctype html  html \n   head \n     title My experiment /title \n     script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n     script src= jspsych-5.0/jspsych.js /script \n     script src= jspsych-5.0/plugins/jspsych-text.js /script \n     link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n   /head \n   body \n   /body \n   script \n\n    /* define welcome message block */\n    var welcome_block = {\n      type:  text ,\n      text:  Welcome to the experiment. Press any key to begin. \n    };\n\n    /* create experiment timeline array */\n    var timeline = [];\n    timeline.push(welcome_block);\n\n    /* start the experiment */\n    jsPsych.init({\n      timeline: timeline\n    });\n   /script  /html", 
            "title": "Part 2: Display welcome message"
        }, 
        {
            "location": "/tutorials/rt-task/#part-3-show-instructions", 
            "text": "We can use the same basic structure from part 2 to create a new trial that shows instructions to the subject. The only difference in the trial we will create here is that we will use HTML formatting to control how the instructions display.  The block definition looks like this:  var instructions_block = {\n  type:  text ,\n  text:  p In this experiment, a circle will appear in the center   +\n       of the screen. /p p If the circle is  strong blue /strong ,   +\n       press the letter F on the keyboard as fast as you can. /p  +\n       p If the circle is  strong orange /strong , do not press   +\n       any key. /p  +\n       div class='left center-content' img src='img/blue.png' /img  +\n       p class='small' strong Press the F key /strong /p /div  +\n       div class='right center-content' img src='img/orange.png' /img  +\n       p class='small' strong Do not press a key /strong /p /div  +\n       p Press any key to begin. /p \n};  Don't forget to add it to the experiment definition array:  timeline.push(instructions_block);  The complete code so far  !doctype html  html \n   head \n     title My experiment /title \n     script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n     script src= jspsych-5.0/jspsych.js /script \n     script src= jspsych-5.0/plugins/jspsych-text.js /script \n     link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n   /head \n   body \n   /body \n   script \n\n    /* define welcome message block */\n    var welcome_block = {\n      type:  text ,\n      text:  Welcome to the experiment. Press any key to begin. \n    };\n\n    /* define instructions block */\n    var instructions_block = {\n      type:  text ,\n      text:  p In this experiment, a circle will appear in the center   +\n           of the screen. /p p If the circle is  strong blue /strong ,   +\n           press the letter F on the keyboard as fast as you can. /p  +\n           p If the circle is  strong orange /strong , do not press   +\n           any key. /p  +\n           div class='left center-content' img src='img/blue.png' /img  +\n           p class='small' strong Press the F key /strong /p /div  +\n           div class='right center-content' img src='img/orange.png' /img  +\n           p class='small' strong Do not press a key /strong /p /div  +\n           p Press any key to begin. /p \n    };\n\n    /* create experiment definition array */\n    var timeline = [];\n    timeline.push(welcome_block);\n    timeline.push(instructions_block);\n\n    /* start the experiment */\n    jsPsych.init({\n      timeline: timeline\n    });\n   /script  /html", 
            "title": "Part 3: Show instructions"
        }, 
        {
            "location": "/tutorials/rt-task/#part-4-displaying-stimuli-and-getting-responses", 
            "text": "Creating trials to show the stimuli is conceptually the same as creating a trial to show instructions. The only difference is that we will use the  jspsych-single-stim  plugin to show the stimuli. This plugin has different options than the jspsych-text plugin, so the code that defines the trial will look slightly different.  First, to use a plugin we need to load it in the  head  section of the experiment page:  head \n  ...\n   script src= jspsych-5.0/plugins/jspsych-single-stim.js /script \n  ... /head   You'll need to download the image files used as stimuli in the experiment. Here are the images we will use. Right-click on each image and select  Save Image As... . Put the images in a folder called  img  in the experiment folder you created in Part 1.    Next, we will define the first trial. For now, we will just show each image once. The path to the image file should be set as the  stimulus  parameter. We will also set the option for which keys the subject is allowed to use to respond ( choices ) so that only the 'F' key is a valid response.  var blue_trial = {\n  type: 'single-stim',\n  stimulus: 'img/blue.png',\n  choices: ['F']\n};\n\nvar orange_trial = {\n  type: 'single-stim',\n  stimulus: 'img/orange.png',\n  choices: ['F']\n}  As usual, we need to add the trials to the timeline.  timeline.push(blue_trial, orange_trial);  The complete code so far  !doctype html  html \n   head \n     title My experiment /title \n     script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n     script src= jspsych-5.0/jspsych.js /script \n     script src= jspsych-5.0/plugins/jspsych-text.js /script \n     script src= jspsych-5.0/plugins/jspsych-single-stim.js /script \n     link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n   /head \n   body \n   /body \n   script \n\n    /* define welcome message block */\n    var welcome_block = {\n      type: 'text',\n      text: 'Welcome to the experiment. Press any key to begin.'\n    };\n\n    /* define instructions block */\n    var instructions_block = {\n      type:  text ,\n      text:  p In this experiment, a circle will appear in the center   +\n           of the screen. /p p If the circle is  strong blue /strong ,   +\n           press the letter F on the keyboard as fast as you can. /p  +\n           p If the circle is  strong orange /strong , do not press   +\n           any key. /p  +\n           div class='left center-content' img src='img/blue.png' /img  +\n           p class='small' strong Press the F key /strong /p /div  +\n           div class='right center-content' img src='img/orange.png' /img  +\n           p class='small' strong Do not press a key /strong /p /div  +\n           p Press any key to begin. /p ,\n      timing_post_trial: 2000\n    };\n\n    /* define test trials */\n    var blue_trial = {\n      type: 'single-stim',\n      stimulus: 'img/blue.png',\n      choices: ['F']\n    };\n\n    var orange_trial = {\n      type: 'single-stim',\n      stimulus: 'img/orange.png',\n      choices: ['F']\n    }\n\n    /* create experiment definition array */\n    var timeline = [];\n    timeline.push(welcome_block);\n    timeline.push(instructions_block);\n    timeline.push(blue_trial, orange_trial);\n\n    /* start the experiment */\n    jsPsych.init({\n      timeline: timeline\n    });\n   /script  /html", 
            "title": "Part 4: Displaying stimuli and getting responses"
        }, 
        {
            "location": "/tutorials/rt-task/#part-5-nesting-timelines", 
            "text": "In the full experiment, we will want more than two trials. One way we could do this is to create many more objects that define trials and push them all onto the timeline, but there is a more efficient way: using nested timelines.  Any trial object can have it's own  timeline  parameter. Just like the  timeline  parameter in  jsPsych.init , the value of this parameter should be an array with trial objects (or more objects with timelines -- the nesting can be as deep as you'd like).  An advantage of nesting timelines is that all the parameters of an object are passed on to the other trials on the timeline. If you have many trials where the same plugin and parameters are used, save for one or a handful of parameters that differ for each trial, you can define all of the shared parameters in the parent object. In this experiment, each test trial uses the same  type  and  choices  parameter, so our test trials can be defined like this:  var test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  timeline: [\n    {stimulus: 'img/blue.png'},\n    {stimulus: 'img/orange.png'}\n  ]\n}", 
            "title": "Part 5: Nesting timelines"
        }, 
        {
            "location": "/tutorials/rt-task/#part-6-generating-a-random-order-of-trials", 
            "text": "Right now our experiment is a measly two trials long. Even worse is that the order of the stimuli is the same every time!  Fortunately, jsPsych has a number of different ways to randomize the order of trials and generate repeated trials. One easy way to do this is to set the  randomize_order  parameter to  true  on any object with a timeline. This will randomize the order of all of the trials in that timeline.  var test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  randomize_order: true,\n  timeline: [\n    {stimulus: 'img/blue.png'},\n    {stimulus: 'img/orange.png'}\n  ]\n}  But, this doesn't make the number of trials any greater. You could copy and paste the objects inside the timeline array a few times to make 20 trials. For short experiments, this is perfectly reasonable. However, many experiments have many more trials, and it would be useful to have other tools for repeating and randomizing trials. This is what the methods in the  jsPsych.randomization  portion of the library are for.  Let's start by taking the array that contains the two stimuli, and creating a new variable to hold the different kinds of trials.  var test_stimuli = [\n  {stimulus: 'img/blue.png'},\n  {stimulus: 'img/orange.png'}\n];  Next, we will use the  jsPsych.randomization.repeat()  method  to generate an array that contains multiple copies of each stimulus in a random order. The first parameter to the method is the array containing the items to repeat and randomize. The second parameter is the number of times to repeat each element.  var all_trials = jsPsych.randomization.repeat(test_stimuli, 10);  This creates a new array,  all_trials , that contains a random order of 10 blue trials and 10 orange trials. We can use this new array as the value for the  timeline  parameter in the  test_block .  var test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  timeline: all_trials\n};  Now the experiment is 20 trials long, and the trials are shown in a random order.", 
            "title": "Part 6: Generating a random order of trials"
        }, 
        {
            "location": "/tutorials/rt-task/#part-8-modifying-timing-parameters", 
            "text": "As currently constructed, the test trials start very soon after the instructions disappear. The stimuli also remain on the screen until a response is given. This clearly won't work, since the instructions are to  not  respond when the circle is orange. We can modify these parameters of the plugin. Currently, we haven't specified any values related to timing in our block definitions. This means we are using the default values generated by the plugin. If we specify a value, then we can override the default value.  First, let's give the subject a little more time to get ready after the instructions end by setting the  timing_post_trial  parameter in the instructions trial. We will give the subject 2,000 milliseconds in between the instructions and the first trial.  var instructions_block = {\n  type:  text ,\n  text:  p In this experiment, a circle will appear in the center   +\n       of the screen. /p p If the circle is  strong blue /strong ,   +\n       press the letter F on the keyboard as fast as you can. /p  +\n       p If the circle is  strong orange /strong , do not press   +\n       any key. /p  +\n       div class='left center-content' img src='img/blue.png' /img  +\n       p class='small' strong Press the F key /strong /p /div  +\n       div class='right center-content' img src='img/orange.png' /img  +\n       p class='small' strong Do not press a key /strong /p /div  +\n       p Press any key to begin. /p ,\n  timing_post_trial: 2000\n};  Now, let's modify the test block so that the subject only has 1,500 milliseconds to respond before the trial ends.  var test_block = {\n  type: 'single-stim',\n  choices: ['F'],\n  timing_response: 1500,\n  timeline: all_trials\n};  If you are wondering where to figure out what the various parameter options for a plugin are, each plugin has its own  documentation page  which gives a list of all the parameters for that plugin and what the default values are.", 
            "title": "Part 8: Modifying timing parameters"
        }, 
        {
            "location": "/tutorials/rt-task/#part-9-displaying-the-data", 
            "text": "We have created a somewhat reasonable experiment at this point, so let's take a look at the data being generated. jsPsych has a handy  function called  jsPsych.data.displayData()  that is useful for debugging your experiment. It will remove all of the information on the screen and replace it with the raw data collected so far. This isn't terribly useful when you are actually running an experiment, but it's very handy for checking the data during development.  We need the  displayData  function to execute when the experiment ends. One way to do this is to use the  on_finish  callback function . This function will automatically execute once all the trials in the experiment are finished. We can specify a function to call in the  init  method.  jsPsych.init({\n  experiment_structure: experiment,\n  on_finish: function() {\n    jsPsych.data.displayData();\n  }\n});", 
            "title": "Part 9: Displaying the data"
        }, 
        {
            "location": "/tutorials/rt-task/#part-10-adding-tagging-data-to-a-trial", 
            "text": "All trials in jsPsych can be tagged with additional arbitrary data. This data will get stored alongside the data that the plugin generates, which allows experimenters to record properties of a trial with the data from the trial.  In this example experiment, we are going to tag each trial as being either a  go  or a  no-go  trial. In this particular example, this is somewhat redundant, since we can determine the trial type by looking at the stimulus that was displayed. However, the technique is essential in many circumstances for marking the data for subsequent analysis.  Adding tagging data involves setting the  data  parameter of a trial. Like other parameters, you can set the  data  parameter of any object and it will be passed on to the objects in the timeline. In this particular experiment, we want to set the data parameter for each type of stimulus. We can do that by adding a data property to the items in the  test_stimuli  array:  var test_stimuli = [\n  {\n    stimulus:  img/blue.png ,\n    data: { response: 'go' }\n  },\n  {\n    stimulus:  img/orange.png ,\n    data: { response: 'no-go' }\n  }\n];  The value for the data property should be an object. Each key in the object will be a new entry in the data for that trial, with the corresponding value attached.", 
            "title": "Part 10: Adding tagging data to a trial"
        }, 
        {
            "location": "/tutorials/rt-task/#part-11-using-functions-as-parameters", 
            "text": "One methodological flaw in our experiment right now is that the time between trials is always the same. This will let people anticipate the response as they learn how much time is in between the trials.  We can fix this by generating a random value for the  timing_post_trial  parameter in the test block.  Most jsPsych plugins will allow you to set the value of a parameter as a function. The function will be called at the start of the trial, and the parameter will be replaced with the return value of the function. We will create a simple function to generate a random value for the timing_post_trial parameter:  var post_trial_gap = function() {\n  return Math.floor( Math.random() * 1500 ) + 750;\n}  The above function will return a random value between 750 and 2250, with uniform sampling from the range. You can do whatever you like inside a function that is a parameter, as long as the return value is a valid value for the parameter.  Now that we've got a function that generates a random time, we can specify the  timing_post_trial  parameter in the testing block.  var test_block = {\n  type:  single-stim ,\n  choices: ['F'],\n  timing_response: 1500,\n  timing_post_trial: post_trial_gap,\n  timeline: all_trials\n};  If you run the experiment, you'll notice that the interval between trials changes randomly throughout the experiment.", 
            "title": "Part 11: Using functions as parameters"
        }, 
        {
            "location": "/tutorials/rt-task/#part-12-adding-data-to-a-trial-that-is-based-on-the-subjects-performance", 
            "text": "If you examine the data generated by the experiment, one thing that is missing is any direct indication of whether the subject responded correctly or not. It's possible to derive the correctness of the response by looking at a combination of the  rt  and  stimulus  values, but for subsequent analysis, it would also be useful to tag each trial with a  correct  property that is either  true  or  false .  We can only determine whether a trial should be marked as correct or not after the trial is complete. What we really want to do is run some code after each trial to determine the correctness of the response that was made. We can use the  on_finish  event to do this. If we attach an  on_finish  event handler to a trial, we can execute a function immediately after the trial ends. The event handler (a function) is passed a single argument containing the data generated by the trial. In the example below, the event handler calculates the correctness of the response, and then uses the jsPsych.data.addDataToLastTrial method to add a correct property to the previous trial.  var test_block = {\n  type:  single-stim ,\n  choices: ['F'],\n  timing_response: 1500,\n  timing_post_trial: post_trial_gap,\n  on_finish: function(data){\n    var correct = false;\n    if(data.response == 'go'   data.rt   -1){\n      correct = true;\n    } else if(data.response == 'no-go'   data.rt == -1){\n      correct = true;\n    }\n    jsPsych.data.addDataToLastTrial({correct: correct});\n  },\n  timeline: all_trials\n};", 
            "title": "Part 12: Adding data to a trial that is based on the subject's performance"
        }, 
        {
            "location": "/tutorials/rt-task/#part-13-displaying-data-to-the-subject", 
            "text": "We've got a reasonable experiment at this point. One thing that subjects might appreciate is knowing how well they performed at the end of the experiment. We will create a simple debriefing screen at the end of the experiment that shows the subject their accuracy and average response time on correct responses.  First, we need a function to compute the subject's accuracy and mean RT. We will use the  jsPsych.data.getTrialsOfType()  method to get the data from all the trials run by the single-stim plugin. Then we will iterate through that data to compute the desired measures.  function getSubjectData() {\n\n  var trials = jsPsych.data.getTrialsOfType('single-stim');\n\n  var sum_rt = 0;\n  var correct_trial_count = 0;\n  var correct_rt_count = 0;\n  for (var i = 0; i   trials.length; i++) {\n    if (trials[i].correct == true) {\n      correct_trial_count++;\n      if(trials[i].rt   -1){\n        sum_rt += trials[i].rt;\n        correct_rt_count++;\n      }\n    }\n  }\n  return {\n    rt: Math.floor(sum_rt / correct_rt_count),\n    accuracy: Math.floor(correct_trial_count / trials.length * 100)\n  }\n}  Next, we add a trial using the text plugin to show the response time. However, there's one catch. We want to use the function we just added above to get the average response time of the subject. But we can't do this until the experiment is over. Therefore, we need to use a  function  as the value of the  text  parameter in the block. This will result in the function being called right when the trial begins. If we didn't do this, then the  getAverageResponseTime()  function would be executed at the beginning of the experiment, which would be bad since there is no data at that point!  var debrief_block = {\n  type:  text ,\n  text: function() {\n    var subject_data = getSubjectData();\n    return  p You responded correctly on  +subject_data.accuracy+ % of  +\n     the trials. /p p Your average response time was  strong  +\n    subject_data.rt +  ms /strong . Press any key to complete the  +\n     experiment. Thank you! /p ;\n  }\n};  We need to add the debrief block to the experiment definition array.  experiment.push(debrief_block);", 
            "title": "Part 13: Displaying data to the subject"
        }, 
        {
            "location": "/tutorials/rt-task/#the-final-code", 
            "text": "!doctype html  html \n   head \n     title My experiment /title \n     script src= https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js /script \n     script src= jspsych-5.0/jspsych.js /script \n     script src= jspsych-5.0/plugins/jspsych-text.js /script \n     script src= jspsych-5.0/plugins/jspsych-single-stim.js /script \n     link href= jspsych-5.0/css/jspsych.css  rel= stylesheet  type= text/css /link \n   /head \n   body \n   /body \n   script \n\n  /* define welcome message block */\n  var welcome_block = {\n    type:  text ,\n    text:  Welcome to the experiment. Press any key to begin. \n  };\n\n  /* define instructions block */\n  var instructions_block = {\n    type:  text ,\n    text:  p In this experiment, a circle will appear in the center   +\n         of the screen. /p p If the circle is  strong blue /strong ,   +\n         press the letter F on the keyboard as fast as you can. /p  +\n         p If the circle is  strong orange /strong , do not press   +\n         any key. /p  +\n         div class='left center-content' img src='img/blue.png' /img  +\n         p class='small' strong Press the F key /strong /p /div  +\n         div class='right center-content' img src='img/orange.png' /img  +\n         p class='small' strong Do not press a key /strong /p /div  +\n         p Press any key to begin. /p ,\n    timing_post_trial: 2000\n  };\n\n  /* define test block */\n\n  var test_stimuli = [\n    {\n      stimulus:  img/blue.png ,\n      data: { response: 'go' }\n    },\n    {\n      stimulus:  img/orange.png ,\n      data: { response: 'no-go' }\n    }\n  ];\n\n  var all_trials = jsPsych.randomization.repeat(test_stimuli, 10);\n\n  var post_trial_gap = function() {\n    return Math.floor( Math.random() * 1500 ) + 750;\n  }\n\n  var test_block = {\n    type:  single-stim ,\n    choices: ['F'],\n    timing_response: 1500,\n    timing_post_trial: post_trial_gap,\n    on_finish: function(data){\n      var correct = false;\n      if(data.response == 'go'   data.rt   -1){\n        correct = true;\n      } else if(data.response == 'no-go'   data.rt == -1){\n        correct = true;\n      }\n      jsPsych.data.addDataToLastTrial({correct: correct});\n    },\n    timeline: all_trials\n  };\n\n  /* define debrief block */\n\n  function getSubjectData() {\n\n    var trials = jsPsych.data.getTrialsOfType('single-stim');\n\n    var sum_rt = 0;\n    var correct_trial_count = 0;\n    var correct_rt_count = 0;\n    for (var i = 0; i   trials.length; i++) {\n      if (trials[i].correct == true) {\n        correct_trial_count++;\n        if(trials[i].rt   -1){\n          sum_rt += trials[i].rt;\n          correct_rt_count++;\n        }\n      }\n    }\n    return {\n      rt: Math.floor(sum_rt / correct_rt_count),\n      accuracy: Math.floor(correct_trial_count / trials.length * 100)\n    }\n  }\n\n  var debrief_block = {\n    type:  text ,\n    text: function() {\n      var subject_data = getSubjectData();\n      return  p You responded correctly on  +subject_data.accuracy+ % of  +\n       the trials. /p p Your average response time was  strong  +\n      subject_data.rt +  ms /strong . Press any key to complete the  +\n       experiment. Thank you! /p ;\n    }\n  };\n\n  /* create experiment timeline array */\n  var timeline = [];\n  timeline.push(welcome_block);\n  timeline.push(instructions_block);\n  timeline.push(test_block);\n  timeline.push(debrief_block);\n\n  /* start the experiment */\n  jsPsych.init({\n    timeline: timeline,\n    on_finish: function() {\n      jsPsych.data.displayData();\n    }\n  }); /script  /html", 
            "title": "The final code"
        }, 
        {
            "location": "/features/timeline/", 
            "text": "Creating an Experiment: The Timeline\n\n\nTo create an experiment using jsPsych, you need to specify a timeline that describes the experiment. The timeline is an ordered set of trials. You must create the timeline before launching the experiment. The bulk of the code you will write for an experiment will be code to create the timeline. This page walks through the creation of timelines, including very basic examples and more advanced features.\n\n\nA single trial\n\n\nTo create a trial, you need to create an object that describes the trial. The most important feature of this object is the \ntype\n parameter. This tells jsPsych which plugin file to use to run the trial. For example, if you want to use the text plugin to display a short message, the trial object would look like this:\n\n\nvar trial = {\n    type: 'text',\n    text: 'hello world!'\n}\n\n\n\n\nThe parameters for this object will depend on the plugin that you choose. Each plugin defines the set of parameters that are needed to run a trial with that plugin. Visit the documentation for a plugin to learn about the parameters that you can use with that plugin.\n\n\nTo create a timeline with the single trial and run the experiment, just embed the trial object in an array. A timeline is simply an array of trials.\n\n\nvar timeline = [trial];\n\njsPsych.init({\n    timeline: timeline\n});\n\n\n\n\nTo actually create and run this simple example, complete the \nhello world tutorial\n.\n\n\nMultiple trials\n\n\nScaling up to multiple trials is easy. Just create an object for each trial, and add each object to the array.\n\n\n// with lots of trials, it might be easier to add the trials\n// to the timeline array as they are defined.\nvar timeline = [];\n\nvar trial_1 = {\n    type: 'text',\n    text: 'This is trial 1.'\n}\ntimeline.push(trial_1);\n\nvar trial_2 = {\n    type: 'text',\n    text: 'This is trial 2.'\n}\ntimeline.push(trial_2);\n\nvar trial_3 = {\n    type: 'text',\n    text: 'This is trial 3.'\n}\ntimeline.push(trial_3);\n\n\n\n\nNested timelines\n\n\nEach object on the timeline can also have it's own timeline. This is useful for a lot of reasons. The first is that it allows you to define common parameters across trials once and have them apply to all the trials on the nested timeline. The example below creates a series of trials using the single-stim plugin, where the only thing that changes from trial-to-trial is the image file being displayed on the screen.\n\n\nvar judgment_trials = {\n    type: 'single-stim',\n    prompt: '\np\nPress a number 1-7 to indicate how unusual the image is.\n/p\n',\n    choices: ['1','2','3','4','5','6','7'],\n    timeline: [\n        {stimulus: 'image1.png'},\n        {stimulus: 'image2.png'},\n        {stimulus: 'image3.png'}\n    ]\n}\n\n\n\n\nIn the above code, the \ntype\n, \nprompt\n, and \nchoices\n parameters are automatically applied to all of the objects in the \ntimeline\n array. This creates three trials with the same \ntype\n, \nprompt\n, and \nchoices\n parameters, but different values for the \nstimulus\n parameter.\n\n\nYou can also override the values by declaring a new value in the \ntimeline\n array. In the example below, the second trial will display a different prompt message.\n\n\nvar judgment_trials = {\n    type: 'single-stim',\n    prompt: '\np\nPress a number 1-7 to indicate how unusual the image is.\n/p\n',\n    choices: ['1','2','3','4','5','6','7'],\n    timeline: [\n        {stimulus: 'image1.png'},\n        {stimulus: 'image2.png', prompt: '\np\nPress 1 for this trial.\n/p\n'},\n        {stimulus: 'image3.png'}\n    ]\n}\n\n\n\n\nTimelines can be nested any number of times.\n\n\nRandomizing the order of trials on a timeline\n\n\nYou can randomize the order that the trials on timeline occur by setting the parameter \nrandomize_order\n to \ntrue\n.\n\n\nvar judgment_trials = {\n    type: 'single-stim',\n    prompt: '\np\nPress a number 1-7 to indicate how unusual the image is.\n/p\n',\n    choices: ['1','2','3','4','5','6','7'],\n    timeline: [\n        {stimulus: 'image1.png'},\n        {stimulus: 'image2.png'},\n        {stimulus: 'image3.png'}\n    ],\n    randomize_order: true\n}\n\n\n\n\nIf the timeline repeats multiple times (through a loop), then the order will be re-randomized at the start of each iteration.\n\n\nLooping timelines\n\n\nAny timeline can be looped using the \nloop_function\n option. The loop function should be a function that evaluates to \ntrue\n if the timeline should repeat, and \nfalse\n if the timeline should end. The loop function will be evaluated after the timeline is completed.\n\n\nvar trial = {\n    type: 'text',\n    text: 'Hello. This is in a loop. Press R to repeat this trial, or C to continue.'\n}\n\nvar loop_node = {\n    timeline: [trial],\n    loop_function: function(data){\n        if(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('r') == data[0].key_press){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n\n\n\nConditional timelines\n\n\nA timeline can be skipped based on the evaluation of a function using the \nconditional_function\n option. If the conditional function evaluates to \ntrue\n, the timeline will execute normally. If the conditional function evaluates to \nfalse\n, then the timeline will be skipped. The conditional function is evaluated whenever the timeline is about to run the first trial.\n\n\nvar pre_if_trial = {\n    type: 'text',\n    text: 'The next trial is in a conditional statement. Press S to skip it, or V to view it.'\n}\n\nvar if_trial = {\n    type: 'text',\n    text: 'You chose to view the trial. Press any key to continue.'\n}\n\nvar if_node = {\n    timeline: [if_trial],\n    conditional_function: function(){\n        var data = jsPsych.data.getLastTrialData();\n        if(data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('s')){\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nvar after_if_trial = {\n    type: 'text',\n    text: 'This is the trial after the conditional.'\n}\n\njsPsych.init({\n    display_element: $('#jspsych-target'),\n    timeline: [pre_if_trial, if_node, after_if_trial],\n    on_finish: function(){jsPsych.data.displayData(); }\n});", 
            "title": "Creating an Experiment: The Timeline"
        }, 
        {
            "location": "/features/timeline/#creating-an-experiment-the-timeline", 
            "text": "To create an experiment using jsPsych, you need to specify a timeline that describes the experiment. The timeline is an ordered set of trials. You must create the timeline before launching the experiment. The bulk of the code you will write for an experiment will be code to create the timeline. This page walks through the creation of timelines, including very basic examples and more advanced features.", 
            "title": "Creating an Experiment: The Timeline"
        }, 
        {
            "location": "/features/timeline/#a-single-trial", 
            "text": "To create a trial, you need to create an object that describes the trial. The most important feature of this object is the  type  parameter. This tells jsPsych which plugin file to use to run the trial. For example, if you want to use the text plugin to display a short message, the trial object would look like this:  var trial = {\n    type: 'text',\n    text: 'hello world!'\n}  The parameters for this object will depend on the plugin that you choose. Each plugin defines the set of parameters that are needed to run a trial with that plugin. Visit the documentation for a plugin to learn about the parameters that you can use with that plugin.  To create a timeline with the single trial and run the experiment, just embed the trial object in an array. A timeline is simply an array of trials.  var timeline = [trial];\n\njsPsych.init({\n    timeline: timeline\n});  To actually create and run this simple example, complete the  hello world tutorial .", 
            "title": "A single trial"
        }, 
        {
            "location": "/features/timeline/#multiple-trials", 
            "text": "Scaling up to multiple trials is easy. Just create an object for each trial, and add each object to the array.  // with lots of trials, it might be easier to add the trials\n// to the timeline array as they are defined.\nvar timeline = [];\n\nvar trial_1 = {\n    type: 'text',\n    text: 'This is trial 1.'\n}\ntimeline.push(trial_1);\n\nvar trial_2 = {\n    type: 'text',\n    text: 'This is trial 2.'\n}\ntimeline.push(trial_2);\n\nvar trial_3 = {\n    type: 'text',\n    text: 'This is trial 3.'\n}\ntimeline.push(trial_3);", 
            "title": "Multiple trials"
        }, 
        {
            "location": "/features/timeline/#nested-timelines", 
            "text": "Each object on the timeline can also have it's own timeline. This is useful for a lot of reasons. The first is that it allows you to define common parameters across trials once and have them apply to all the trials on the nested timeline. The example below creates a series of trials using the single-stim plugin, where the only thing that changes from trial-to-trial is the image file being displayed on the screen.  var judgment_trials = {\n    type: 'single-stim',\n    prompt: ' p Press a number 1-7 to indicate how unusual the image is. /p ',\n    choices: ['1','2','3','4','5','6','7'],\n    timeline: [\n        {stimulus: 'image1.png'},\n        {stimulus: 'image2.png'},\n        {stimulus: 'image3.png'}\n    ]\n}  In the above code, the  type ,  prompt , and  choices  parameters are automatically applied to all of the objects in the  timeline  array. This creates three trials with the same  type ,  prompt , and  choices  parameters, but different values for the  stimulus  parameter.  You can also override the values by declaring a new value in the  timeline  array. In the example below, the second trial will display a different prompt message.  var judgment_trials = {\n    type: 'single-stim',\n    prompt: ' p Press a number 1-7 to indicate how unusual the image is. /p ',\n    choices: ['1','2','3','4','5','6','7'],\n    timeline: [\n        {stimulus: 'image1.png'},\n        {stimulus: 'image2.png', prompt: ' p Press 1 for this trial. /p '},\n        {stimulus: 'image3.png'}\n    ]\n}  Timelines can be nested any number of times.", 
            "title": "Nested timelines"
        }, 
        {
            "location": "/features/timeline/#randomizing-the-order-of-trials-on-a-timeline", 
            "text": "You can randomize the order that the trials on timeline occur by setting the parameter  randomize_order  to  true .  var judgment_trials = {\n    type: 'single-stim',\n    prompt: ' p Press a number 1-7 to indicate how unusual the image is. /p ',\n    choices: ['1','2','3','4','5','6','7'],\n    timeline: [\n        {stimulus: 'image1.png'},\n        {stimulus: 'image2.png'},\n        {stimulus: 'image3.png'}\n    ],\n    randomize_order: true\n}  If the timeline repeats multiple times (through a loop), then the order will be re-randomized at the start of each iteration.", 
            "title": "Randomizing the order of trials on a timeline"
        }, 
        {
            "location": "/features/timeline/#looping-timelines", 
            "text": "Any timeline can be looped using the  loop_function  option. The loop function should be a function that evaluates to  true  if the timeline should repeat, and  false  if the timeline should end. The loop function will be evaluated after the timeline is completed.  var trial = {\n    type: 'text',\n    text: 'Hello. This is in a loop. Press R to repeat this trial, or C to continue.'\n}\n\nvar loop_node = {\n    timeline: [trial],\n    loop_function: function(data){\n        if(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('r') == data[0].key_press){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", 
            "title": "Looping timelines"
        }, 
        {
            "location": "/features/timeline/#conditional-timelines", 
            "text": "A timeline can be skipped based on the evaluation of a function using the  conditional_function  option. If the conditional function evaluates to  true , the timeline will execute normally. If the conditional function evaluates to  false , then the timeline will be skipped. The conditional function is evaluated whenever the timeline is about to run the first trial.  var pre_if_trial = {\n    type: 'text',\n    text: 'The next trial is in a conditional statement. Press S to skip it, or V to view it.'\n}\n\nvar if_trial = {\n    type: 'text',\n    text: 'You chose to view the trial. Press any key to continue.'\n}\n\nvar if_node = {\n    timeline: [if_trial],\n    conditional_function: function(){\n        var data = jsPsych.data.getLastTrialData();\n        if(data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('s')){\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n\nvar after_if_trial = {\n    type: 'text',\n    text: 'This is the trial after the conditional.'\n}\n\njsPsych.init({\n    display_element: $('#jspsych-target'),\n    timeline: [pre_if_trial, if_node, after_if_trial],\n    on_finish: function(){jsPsych.data.displayData(); }\n});", 
            "title": "Conditional timelines"
        }, 
        {
            "location": "/features/data/", 
            "text": "Data Storage\n\n\nThere are two very different kinds of data storage: data stored in \nmemory\n and data stored \npermanently\n. Data stored permanently exists even after the browser running jsPsych closes, typically in a database or in a file on a web server. Data stored in memory exists only as long the browser window running jsPsych is open.\n\n\njsPsych has many features for interacting with data stored in memory, but relatively few for permanent data storage. This is a deliberate choice, mainly because there are dozens of ways that data could be stored permanently and this strategy avoids locking in one particular solution. However, saving data permanently is obviously a crucial component of any experiment, and the second half of this page contains a few suggestions on how to accomplish permanent data storage.\n\n\nStoring data in jsPsych's data structure\n\n\njsPsych has a centralized array of data that is filled in as the experiment runs. Each trial adds an entry to this array, and you can access the content of the array with various functions, including \njsPsych.data.getData()\n, which returns the entire contents of jsPsych's data array.\n\n\nIn many cases, data collection will be automatic and hidden. Plugins save data on their own, so it is not uncommon to have the only interaction with the data be at the end of the experiment when it is time to save it in a more permanent manner (see sections below about how to do this). However, there are some situations in which you may want to interact with the data; in particular, you may want to store additional data that the plugins are not recording, like a subject identifier or condition assignment. You may also want to add data on a trial by trial basis. For example, in a Stroop paradigm you would want to label which trials are congruent and which are incongruent. These scenarios are explored below.\n\n\nAdding data to all trials\n\n\nOften it is useful to add a piece of data to \nall\n of the trials in the experiment. For example, appending the subject ID to each trial. This can be done easily with the \njsPsych.data.addProperties\n function. Here is an example:\n\n\n// generate a random subject ID\nvar subject_id = Math.floor(Math.random()*100000);\n\n// pick a random condition for the subject at the start of the experiment\nvar condition_assignment = jsPsych.randomization.sample(['conditionA', 'conditionB', 'conditionC'],1)[0];\n\n// record the condition assignment in the jsPsych data\n// this adds a property called 'subject' and a property called 'condition' to every trial\njsPsych.data.addProperties({\n  subject: subject_id,\n  condition: condition_assignment\n});\n\n\n\n\nAdding data to a particular trial or set of trials\n\n\nData can be added to a particular trial by setting the \ndata\n parameter for the trial. The \ndata\n parameter is an object of key-value pairs, and each pair is added to the data for that trial.\n\n\nvar trial = {\n  type: 'single-stim',\n  stimulus: 'imgA.jpg',\n  data: { image_type: 'A' }\n}\n\n\n\n\nData declared in this way is also saved in the trials on any nested timelines:\n\n\nvar block = {\n  type: 'single-stim',\n  data: { image_type: 'A' },\n  timeline: [\n    {stimulus: 'imgA1.jpg'},\n    {stimulus: 'imgA2.jpg'}\n  ]\n}\n\n\n\n\nStoring data permanently as a file\n\n\nThis is one of the simplest methods for saving jsPsych data on the server that is running the experiment. It involves a short PHP script and a few lines of JavaScript code. This method will save each participant's data as a CSV file on the server. \nThis method will only work if you are running on a web server with PHP installed, or a local server with PHP (e.g., \nXAMPP\n).\n\n\nThis method uses a simple PHP script to write files to the server:\n\n\n?php\n// the $_POST[] array will contain the passed in filename and data\n// the directory \ndata\n is writable by the server (chmod 777)\n$filename = \ndata/\n.$_POST['filename'];\n$data = $_POST['filedata'];\n// write the file to disk\nfile_put_contents($filename, $data);\n?\n\n\n\n\n\nThe \nfile_put_contents($filename, $data)\n method requires permission to write new files. An easy way to solve this is to create a directory on the server that will store the data and use the chmod command to give all users write permission (chmod 777) to that directory. In the above example, I append the directory \ndata/\n to the filename, and that directory is writable.\n\n\nTo use the PHP script, the JavaScript that runs jsPsych needs to send the filename and filedata information. jQuery has an easy to use method that enables JavaScript\n-\nPHP communication. Here's an example:\n\n\nfunction saveData(filename, filedata){\n   $.ajax({\n      type:'post',\n      cache: false,\n      url: 'save_data.php', // this is the path to the above PHP script\n      data: {filename: filename, filedata: filedata}\n   });\n}\n\n// call the saveData function after the experiment is over\njsPsych.init({\n\n   // code to define the experiment structure would go here...\n\n   on_finish: function(data){ saveData(\nfilename.csv\n, jsPsych.data.dataAsCSV()) }\n});\n\n\n\n\nTo use this in an actual experiment, it would be important to tie the filename to some unique identifier like a subject number.\n\n\nStoring data permanently in a MySQL database\n\n\nThe ideal solution for storing data generated by jsPsych is to write it to a database.\n\n\nThere are dozens of database options. MySQL is one of the most popular \nrelational databases\n, is free to use, and relatively easy \nto install\n. This page will assume that you have a MySQL database installed on your server that is hosting the jsPsych experiment, and that your server is able to execute PHP code. If you are trying to run on a local machine, you'll need to install a local server environment like \nXAMPP\n.\n\n\nStep 1\n\n\nTo communicate with a MySQL database, you will need a server-side script, such as a PHP script. The following script should work for all jsPsych data. Copy the code below into a PHP file and give it an appropriate name (e.g. savedata.php). Put the PHP file on your server in a convenient location. \nThis script will only work with jsPsych version 4.0 and later.\n\n\n?php\n\n// Submit Data to mySQL database\n// Josh de Leeuw\n\n// Edit this line to include your database connection script\n//\n//  The script you link should contain the following two lines:\n//\n//  $dbc = mysql_connect('localhost', 'username', 'password');\n//  mysql_select_db('databasename', $dbc);\n//\ninclude('database_connect.php');\n\n// You should not need to edit below this line\n\nfunction mysql_insert($table, $inserts) {\n    $values = array_map('mysql_real_escape_string', array_values($inserts));\n    $keys = array_keys($inserts);\n\n    return mysql_query('INSERT INTO `'.$table.'` (`'.implode('`,`', $keys).'`) VALUES (\\''.implode('\\',\\'', $values).'\\')');\n}\n\n// get the table name\n$tab = $_POST['table'];\n\n// decode the data object from json\n$trials = json_decode($_POST['json']);\n\n// get the optional data (decode as array)\n$opt_data = json_decode($_POST['opt_data'], true);\n$opt_data_names = array_keys($opt_data);\n\nvar_dump($trials);\n\n// for each element in the trials array, insert the row into the mysql table\nfor($i=0;$i\ncount($trials);$i++)\n{\n    $to_insert = (array)($trials[$i]);\n    // add any optional, static parameters that got passed in (like subject id or condition)\n    for($j=0;$j\ncount($opt_data_names);$j++){\n        $to_insert[$opt_data_names[$j]] = $opt_data[$opt_data_names[$j]];\n    }\n    $result = mysql_insert($tab, $to_insert);\n}\n\n// confirm the results\nif (!$result) {\n    die('Invalid query: ' . mysql_error());\n} else {\n    print \nsuccessful insert!\n;\n}\n\n?\n\n\n\n\n\nStep 2\n\n\nTo use the above PHP script, you'll need to provide the credentials for your MySQL database. The PHP script is expecting the credentials to be stored in a separate PHP file called 'database_connect.php', located in the same directory as the PHP script. This file should look like:\n\n\n?php\n\n$dbc = mysql_connect('localhost', 'username', 'password');\nmysql_select_db('databasename', $dbc);\n\n?\n\n\n\n\n\nReplace the username and password strings with your database credentials, and replace the databasename string with the name of the database you are connecting to. For example, if my username is 'josh', my password is 'abc123', and the database is 'myresearch' then the file should look like:\n\n\n?php\n\n$dbc = mysql_connect('localhost', 'josh', 'abc123');\nmysql_select_db('myresearch', $dbc);\n\n?\n\n\n\n\n\nStep 3\n\n\nTo use this PHP script, you need to invoke it from JavaScript code within your experiment page. Here's an example of how to do that.\n\n\n// data parameter should be either the value of jsPsych.data()\n// or the parameter that is passed to the on_data_update callback function for the core library\n// jsPsych.data() contains ALL data\n// the callback function will contain only the most recently written data.\nfunction save_data(data){\n   var data_table = \nmy_experiment_table\n; // change this for different experiments\n   $.ajax({\n      type:'post',\n      cache: false,\n      url: 'path/to_php/file.php', // change this to point to your php file.\n      // opt_data is to add additional values to every row, like a subject ID\n      // replace 'key' with the column name, and 'value' with the value.\n      data: {\n          table: data_table,\n          json: JSON.stringify(data),\n          opt_data: {key: value}\n      },\n      success: function(output) { console.log(output); } // write the result to javascript console\n   });\n}\n\n\n\n\nNote that you'll need to change the script above to reference the table in your mysql database that will store the data, the path to the PHP file created in step 1, and change the opt_data line to include any data you want to append to the table, such as a subject ID (or remove this line entirely if you have no additional data).", 
            "title": "Data Storage"
        }, 
        {
            "location": "/features/data/#data-storage", 
            "text": "There are two very different kinds of data storage: data stored in  memory  and data stored  permanently . Data stored permanently exists even after the browser running jsPsych closes, typically in a database or in a file on a web server. Data stored in memory exists only as long the browser window running jsPsych is open.  jsPsych has many features for interacting with data stored in memory, but relatively few for permanent data storage. This is a deliberate choice, mainly because there are dozens of ways that data could be stored permanently and this strategy avoids locking in one particular solution. However, saving data permanently is obviously a crucial component of any experiment, and the second half of this page contains a few suggestions on how to accomplish permanent data storage.", 
            "title": "Data Storage"
        }, 
        {
            "location": "/features/data/#storing-data-in-jspsychs-data-structure", 
            "text": "jsPsych has a centralized array of data that is filled in as the experiment runs. Each trial adds an entry to this array, and you can access the content of the array with various functions, including  jsPsych.data.getData() , which returns the entire contents of jsPsych's data array.  In many cases, data collection will be automatic and hidden. Plugins save data on their own, so it is not uncommon to have the only interaction with the data be at the end of the experiment when it is time to save it in a more permanent manner (see sections below about how to do this). However, there are some situations in which you may want to interact with the data; in particular, you may want to store additional data that the plugins are not recording, like a subject identifier or condition assignment. You may also want to add data on a trial by trial basis. For example, in a Stroop paradigm you would want to label which trials are congruent and which are incongruent. These scenarios are explored below.  Adding data to all trials  Often it is useful to add a piece of data to  all  of the trials in the experiment. For example, appending the subject ID to each trial. This can be done easily with the  jsPsych.data.addProperties  function. Here is an example:  // generate a random subject ID\nvar subject_id = Math.floor(Math.random()*100000);\n\n// pick a random condition for the subject at the start of the experiment\nvar condition_assignment = jsPsych.randomization.sample(['conditionA', 'conditionB', 'conditionC'],1)[0];\n\n// record the condition assignment in the jsPsych data\n// this adds a property called 'subject' and a property called 'condition' to every trial\njsPsych.data.addProperties({\n  subject: subject_id,\n  condition: condition_assignment\n});  Adding data to a particular trial or set of trials  Data can be added to a particular trial by setting the  data  parameter for the trial. The  data  parameter is an object of key-value pairs, and each pair is added to the data for that trial.  var trial = {\n  type: 'single-stim',\n  stimulus: 'imgA.jpg',\n  data: { image_type: 'A' }\n}  Data declared in this way is also saved in the trials on any nested timelines:  var block = {\n  type: 'single-stim',\n  data: { image_type: 'A' },\n  timeline: [\n    {stimulus: 'imgA1.jpg'},\n    {stimulus: 'imgA2.jpg'}\n  ]\n}", 
            "title": "Storing data in jsPsych's data structure"
        }, 
        {
            "location": "/features/data/#storing-data-permanently-as-a-file", 
            "text": "This is one of the simplest methods for saving jsPsych data on the server that is running the experiment. It involves a short PHP script and a few lines of JavaScript code. This method will save each participant's data as a CSV file on the server.  This method will only work if you are running on a web server with PHP installed, or a local server with PHP (e.g.,  XAMPP ).  This method uses a simple PHP script to write files to the server:  ?php\n// the $_POST[] array will contain the passed in filename and data\n// the directory  data  is writable by the server (chmod 777)\n$filename =  data/ .$_POST['filename'];\n$data = $_POST['filedata'];\n// write the file to disk\nfile_put_contents($filename, $data);\n?   The  file_put_contents($filename, $data)  method requires permission to write new files. An easy way to solve this is to create a directory on the server that will store the data and use the chmod command to give all users write permission (chmod 777) to that directory. In the above example, I append the directory  data/  to the filename, and that directory is writable.  To use the PHP script, the JavaScript that runs jsPsych needs to send the filename and filedata information. jQuery has an easy to use method that enables JavaScript - PHP communication. Here's an example:  function saveData(filename, filedata){\n   $.ajax({\n      type:'post',\n      cache: false,\n      url: 'save_data.php', // this is the path to the above PHP script\n      data: {filename: filename, filedata: filedata}\n   });\n}\n\n// call the saveData function after the experiment is over\njsPsych.init({\n\n   // code to define the experiment structure would go here...\n\n   on_finish: function(data){ saveData( filename.csv , jsPsych.data.dataAsCSV()) }\n});  To use this in an actual experiment, it would be important to tie the filename to some unique identifier like a subject number.", 
            "title": "Storing data permanently as a file"
        }, 
        {
            "location": "/features/data/#storing-data-permanently-in-a-mysql-database", 
            "text": "The ideal solution for storing data generated by jsPsych is to write it to a database.  There are dozens of database options. MySQL is one of the most popular  relational databases , is free to use, and relatively easy  to install . This page will assume that you have a MySQL database installed on your server that is hosting the jsPsych experiment, and that your server is able to execute PHP code. If you are trying to run on a local machine, you'll need to install a local server environment like  XAMPP .  Step 1  To communicate with a MySQL database, you will need a server-side script, such as a PHP script. The following script should work for all jsPsych data. Copy the code below into a PHP file and give it an appropriate name (e.g. savedata.php). Put the PHP file on your server in a convenient location.  This script will only work with jsPsych version 4.0 and later.  ?php\n\n// Submit Data to mySQL database\n// Josh de Leeuw\n\n// Edit this line to include your database connection script\n//\n//  The script you link should contain the following two lines:\n//\n//  $dbc = mysql_connect('localhost', 'username', 'password');\n//  mysql_select_db('databasename', $dbc);\n//\ninclude('database_connect.php');\n\n// You should not need to edit below this line\n\nfunction mysql_insert($table, $inserts) {\n    $values = array_map('mysql_real_escape_string', array_values($inserts));\n    $keys = array_keys($inserts);\n\n    return mysql_query('INSERT INTO `'.$table.'` (`'.implode('`,`', $keys).'`) VALUES (\\''.implode('\\',\\'', $values).'\\')');\n}\n\n// get the table name\n$tab = $_POST['table'];\n\n// decode the data object from json\n$trials = json_decode($_POST['json']);\n\n// get the optional data (decode as array)\n$opt_data = json_decode($_POST['opt_data'], true);\n$opt_data_names = array_keys($opt_data);\n\nvar_dump($trials);\n\n// for each element in the trials array, insert the row into the mysql table\nfor($i=0;$i count($trials);$i++)\n{\n    $to_insert = (array)($trials[$i]);\n    // add any optional, static parameters that got passed in (like subject id or condition)\n    for($j=0;$j count($opt_data_names);$j++){\n        $to_insert[$opt_data_names[$j]] = $opt_data[$opt_data_names[$j]];\n    }\n    $result = mysql_insert($tab, $to_insert);\n}\n\n// confirm the results\nif (!$result) {\n    die('Invalid query: ' . mysql_error());\n} else {\n    print  successful insert! ;\n}\n\n?   Step 2  To use the above PHP script, you'll need to provide the credentials for your MySQL database. The PHP script is expecting the credentials to be stored in a separate PHP file called 'database_connect.php', located in the same directory as the PHP script. This file should look like:  ?php\n\n$dbc = mysql_connect('localhost', 'username', 'password');\nmysql_select_db('databasename', $dbc);\n\n?   Replace the username and password strings with your database credentials, and replace the databasename string with the name of the database you are connecting to. For example, if my username is 'josh', my password is 'abc123', and the database is 'myresearch' then the file should look like:  ?php\n\n$dbc = mysql_connect('localhost', 'josh', 'abc123');\nmysql_select_db('myresearch', $dbc);\n\n?   Step 3  To use this PHP script, you need to invoke it from JavaScript code within your experiment page. Here's an example of how to do that.  // data parameter should be either the value of jsPsych.data()\n// or the parameter that is passed to the on_data_update callback function for the core library\n// jsPsych.data() contains ALL data\n// the callback function will contain only the most recently written data.\nfunction save_data(data){\n   var data_table =  my_experiment_table ; // change this for different experiments\n   $.ajax({\n      type:'post',\n      cache: false,\n      url: 'path/to_php/file.php', // change this to point to your php file.\n      // opt_data is to add additional values to every row, like a subject ID\n      // replace 'key' with the column name, and 'value' with the value.\n      data: {\n          table: data_table,\n          json: JSON.stringify(data),\n          opt_data: {key: value}\n      },\n      success: function(output) { console.log(output); } // write the result to javascript console\n   });\n}  Note that you'll need to change the script above to reference the table in your mysql database that will store the data, the path to the PHP file created in step 1, and change the opt_data line to include any data you want to append to the table, such as a subject ID (or remove this line entirely if you have no additional data).", 
            "title": "Storing data permanently in a MySQL database"
        }, 
        {
            "location": "/features/functions-as-parameters/", 
            "text": "Using Functions as Parameters for Plugins\n\n\nMost plugins allow parameters to be functions. In a typical declaration of a jsPsych trial, parameters have to be known at the start of the experiment. This makes it impossible to alter the content of the trial based on the outcome of previous trials. When functions are used as parameters for a block of trials, the function is evaluated at the start of each trial, and the return value of the function is used as the parameter. This enables dynamic updating of the parameter based on data that a subject has generated.\n\n\nHere is a sketch of how this functionality could be used to display a score to subjects that depends on their overall accuracy on the task.\n\n\n\n// this variable contains a score based on accuracy.\n// you can update the score variable in a number of ways.\n// one option would be to use the on_finish callback in the\n// trial to update the score after the trial is complete.\nvar score = 0;\n\nvar xab_trial = {\n  type: 'xab',\n  stimulus: xab_stimuli,\n  prompt: function() {\n    return \np\nYour current score is \n+score+\n/p\n;\n  }\n}", 
            "title": "Dynamic Content:  Using Functions as Plugin Parameters"
        }, 
        {
            "location": "/features/functions-as-parameters/#using-functions-as-parameters-for-plugins", 
            "text": "Most plugins allow parameters to be functions. In a typical declaration of a jsPsych trial, parameters have to be known at the start of the experiment. This makes it impossible to alter the content of the trial based on the outcome of previous trials. When functions are used as parameters for a block of trials, the function is evaluated at the start of each trial, and the return value of the function is used as the parameter. This enables dynamic updating of the parameter based on data that a subject has generated.  Here is a sketch of how this functionality could be used to display a score to subjects that depends on their overall accuracy on the task.  \n// this variable contains a score based on accuracy.\n// you can update the score variable in a number of ways.\n// one option would be to use the on_finish callback in the\n// trial to update the score after the trial is complete.\nvar score = 0;\n\nvar xab_trial = {\n  type: 'xab',\n  stimulus: xab_stimuli,\n  prompt: function() {\n    return  p Your current score is  +score+ /p ;\n  }\n}", 
            "title": "Using Functions as Parameters for Plugins"
        }, 
        {
            "location": "/features/callbacks/", 
            "text": "Event-related callback functions\n\n\njsPsych offers the ability to call arbitrary functions in response to certain events occurring, like the end of a trial or when new data is saved. This page summarizes the different opportunities for callback functions and how to specify them.\n\n\n\n\non_data_update\n\n\nThe \non_data_update\n callback can be declared in the \njsPsych.init\n method. The callback triggers whenever data is generated by a plugin (specifically, whenever the \njsPsych.data.write\n method is called). The function will be passed a single argument, which contains the data that was written.\n\n\nSample use\n\n\njsPsych.init({\n  timeline: exp,\n  on_data_update: function(data) {\n    console.log('Just added new data. The contents of the data are: '+JSON.stringify(data));\n  }\n});\n\n\n\n\n\n\non_finish (trial)\n\n\nThe \non_finish\n callback can be added to any trial. The callback will trigger whenever the trial ends. The callback function will be passed a single argument, containing the data object from the trial.\n\n\nSample use\n\n\nvar trial = {\n  type: 'single-stim',\n  stimulus: 'imgA.png',\n  on_finish: function(data) {\n    console.log('The trial just ended.');\n    console.log(JSON.stringify(data));\n  }\n};\n\n\n\n\n\n\non_finish (experiment)\n\n\nThe \non_finish\n callback can be declared in the \njsPsych.init\n method. The callback will trigger once all trials in the experiment have been run. The method will be passed a single argument, containing all of the data generated in the experiment.\n\n\nSample use\n\n\njsPsych.init({\n  timeline: exp,\n  on_finish: function(data) {\n    console.log('The experiment is over! Here is all the data: '+JSON.stringify(data));\n  }\n});\n\n\n\n\n\n\non_trial_finish\n\n\nThe \non_trial_finish\n callback can be declared in the \njsPsych.init\n method. The callback will trigger at the end of every trial in the experiment. If you want a callback to trigger only for the end of certain trials, use the \non_finish\n callback on the trial object. There are no parameters passed to the callback function.\n\n\nSample use\n\n\njsPsych.init({\n  timeline: exp,\n  on_trial_finish: function() {\n    console.log('A trial just ended.');\n  }\n});\n\n\n\n\n\n\non_trial_start\n\n\nThe \non_trial_start\n callback can be declared in the \njsPsych.init\n method. The callback will trigger at the start of every trial in the experiment. There are no parameters passed to the callback function.\n\n\nSample use\n\n\njsPsych.init({\n  timeline: exp,\n  on_trial_start: function() {\n    console.log('A trial just started.');\n  }\n});", 
            "title": "Event-related Callback Functions"
        }, 
        {
            "location": "/features/callbacks/#event-related-callback-functions", 
            "text": "jsPsych offers the ability to call arbitrary functions in response to certain events occurring, like the end of a trial or when new data is saved. This page summarizes the different opportunities for callback functions and how to specify them.", 
            "title": "Event-related callback functions"
        }, 
        {
            "location": "/features/callbacks/#on_data_update", 
            "text": "The  on_data_update  callback can be declared in the  jsPsych.init  method. The callback triggers whenever data is generated by a plugin (specifically, whenever the  jsPsych.data.write  method is called). The function will be passed a single argument, which contains the data that was written.  Sample use  jsPsych.init({\n  timeline: exp,\n  on_data_update: function(data) {\n    console.log('Just added new data. The contents of the data are: '+JSON.stringify(data));\n  }\n});", 
            "title": "on_data_update"
        }, 
        {
            "location": "/features/callbacks/#on_finish-trial", 
            "text": "The  on_finish  callback can be added to any trial. The callback will trigger whenever the trial ends. The callback function will be passed a single argument, containing the data object from the trial.  Sample use  var trial = {\n  type: 'single-stim',\n  stimulus: 'imgA.png',\n  on_finish: function(data) {\n    console.log('The trial just ended.');\n    console.log(JSON.stringify(data));\n  }\n};", 
            "title": "on_finish (trial)"
        }, 
        {
            "location": "/features/callbacks/#on_finish-experiment", 
            "text": "The  on_finish  callback can be declared in the  jsPsych.init  method. The callback will trigger once all trials in the experiment have been run. The method will be passed a single argument, containing all of the data generated in the experiment.  Sample use  jsPsych.init({\n  timeline: exp,\n  on_finish: function(data) {\n    console.log('The experiment is over! Here is all the data: '+JSON.stringify(data));\n  }\n});", 
            "title": "on_finish (experiment)"
        }, 
        {
            "location": "/features/callbacks/#on_trial_finish", 
            "text": "The  on_trial_finish  callback can be declared in the  jsPsych.init  method. The callback will trigger at the end of every trial in the experiment. If you want a callback to trigger only for the end of certain trials, use the  on_finish  callback on the trial object. There are no parameters passed to the callback function.  Sample use  jsPsych.init({\n  timeline: exp,\n  on_trial_finish: function() {\n    console.log('A trial just ended.');\n  }\n});", 
            "title": "on_trial_finish"
        }, 
        {
            "location": "/features/callbacks/#on_trial_start", 
            "text": "The  on_trial_start  callback can be declared in the  jsPsych.init  method. The callback will trigger at the start of every trial in the experiment. There are no parameters passed to the callback function.  Sample use  jsPsych.init({\n  timeline: exp,\n  on_trial_start: function() {\n    console.log('A trial just started.');\n  }\n});", 
            "title": "on_trial_start"
        }, 
        {
            "location": "/features/media-preloading/", 
            "text": "Media Preloading\n\n\nIf an experiment uses images or audio files as stimuli, it is important to preload the files before running the experiment. Preloading files means that the subject's browser will download all of the files and store them in local memory on the subject's computer. This is important because loading an image file is much faster if it is already in memory on the subject's computer. Without preloading, there will be noticeable delays in the display of media, which will affect any timing measurements (such as how long an image is displayed, or a subject's response time since first viewing an image).\n\n\njsPsych will automatically preload audio and image files that are used as parameters for the standard set of plugins.\n\n\n// the image file img/file1.png is\n// automatically preloaded before the experiment begins\nvar trial = {\n    type: 'single-stim',\n    stimulus: 'img/file1.png'\n}\n\n// the sound file is also preloaded automatically\nvar sound_trial = {\n    type: 'single-audio',\n    stimulus: 'snd/hello.mp3'\n}\n\njsPsych.init({\n    timeline: [trial]\n});\n\n\n\n\nIf you are using images in your experiment but they are not being passed directly as parameters to the trials, then you may need to manually preload the image files.\n\n\njsPsych has an image preloading function in the core library. For full documentation, see the \nAPI reference page\n. The function will load all of the images listed in an array, and then call a function when the loading is complete. Below is a brief example.\n\n\n// this trial will not preload the images, because the image file is being used\n// in an HTML string\nvar trial = {\n    type: 'single-stim',\n    stimulus: '\nimg src=\nimg/file1.png\n/img\n',\n    is_html: true\n}\n\n// an array of paths to images that need to be loaded\nvar images = ['img/file1.png'];\n\njsPsych.preloadImages(images, function(){ startExperiment(); });\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: [trial]\n    });\n}\n\n\n\n\nNote: If you are using HTML strings as stimuli, such as in the single-stim plugin, you will see a series of error messages in the JavaScript console about failing to find files. These messages can be ignored.", 
            "title": "Media Preloading"
        }, 
        {
            "location": "/features/media-preloading/#media-preloading", 
            "text": "If an experiment uses images or audio files as stimuli, it is important to preload the files before running the experiment. Preloading files means that the subject's browser will download all of the files and store them in local memory on the subject's computer. This is important because loading an image file is much faster if it is already in memory on the subject's computer. Without preloading, there will be noticeable delays in the display of media, which will affect any timing measurements (such as how long an image is displayed, or a subject's response time since first viewing an image).  jsPsych will automatically preload audio and image files that are used as parameters for the standard set of plugins.  // the image file img/file1.png is\n// automatically preloaded before the experiment begins\nvar trial = {\n    type: 'single-stim',\n    stimulus: 'img/file1.png'\n}\n\n// the sound file is also preloaded automatically\nvar sound_trial = {\n    type: 'single-audio',\n    stimulus: 'snd/hello.mp3'\n}\n\njsPsych.init({\n    timeline: [trial]\n});  If you are using images in your experiment but they are not being passed directly as parameters to the trials, then you may need to manually preload the image files.  jsPsych has an image preloading function in the core library. For full documentation, see the  API reference page . The function will load all of the images listed in an array, and then call a function when the loading is complete. Below is a brief example.  // this trial will not preload the images, because the image file is being used\n// in an HTML string\nvar trial = {\n    type: 'single-stim',\n    stimulus: ' img src= img/file1.png /img ',\n    is_html: true\n}\n\n// an array of paths to images that need to be loaded\nvar images = ['img/file1.png'];\n\njsPsych.preloadImages(images, function(){ startExperiment(); });\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: [trial]\n    });\n}  Note: If you are using HTML strings as stimuli, such as in the single-stim plugin, you will see a series of error messages in the JavaScript console about failing to find files. These messages can be ignored.", 
            "title": "Media Preloading"
        }, 
        {
            "location": "/features/fullscreen/", 
            "text": "Fullscreen Experiments\n\n\nYou can run your experiment in fullscreen mode by setting the \nfullscreen\n parameter in the \njsPsych.init\n call that launches the experiment.\n\n\njsPsych.init({\n  timeline: timeline,\n  fullscreen: true\n});\n\n\n\n\nFor security reasons, launching the browser into fullscreen mode requires that the user take an action. Therefore, if fullscreen mode is requested, a button will be displayed on the page to launch the experiment into fullscreen mode. The experiment will not begin until this button is pressed.\n\n\nSafari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari.", 
            "title": "Fullscreen Experiments"
        }, 
        {
            "location": "/features/fullscreen/#fullscreen-experiments", 
            "text": "You can run your experiment in fullscreen mode by setting the  fullscreen  parameter in the  jsPsych.init  call that launches the experiment.  jsPsych.init({\n  timeline: timeline,\n  fullscreen: true\n});  For security reasons, launching the browser into fullscreen mode requires that the user take an action. Therefore, if fullscreen mode is requested, a button will be displayed on the page to launch the experiment into fullscreen mode. The experiment will not begin until this button is pressed.  Safari does not support keyboard input when the browser is in fullscreen mode. Therefore, the function will not launch fullscreen mode on Safari.", 
            "title": "Fullscreen Experiments"
        }, 
        {
            "location": "/features/progress-bar/", 
            "text": "Automatic Progress Bar\n\n\njsPsych can show a progress bar at the top of the experiment page indicating the subject's overall completion progress. The progress bar is rendered outside the jsPsych display element, and it requires the \njspsych.css\n file to be loaded on the page. As of version 4.0, the progress bar looks like this:\n\n\n\n\nTo show the progress bar, set the \nshow_progress_bar\n option in \njsPsych.init\n to \ntrue\n:\n\n\njsPsych.init({\n    timeline: exp,\n    show_progress_bar: true\n});\n\n\n\n\nThe progress bar updates after every every node on the top-level timeline updates. In other words, the progress bar updates after each TimelineNode in the main timeline array is completed. This avoids distracting updates in the middle of trials that are composed of multiple plugins, or confusing updates due to looping or conditional structures that may or may not execute depending on the actions of the subject. This also allows some flexibility for the programmer; by nesting timelines in a deliberate manner, the timing of progress bar updates can be controlled.", 
            "title": "Automatic Progress Bar"
        }, 
        {
            "location": "/features/progress-bar/#automatic-progress-bar", 
            "text": "jsPsych can show a progress bar at the top of the experiment page indicating the subject's overall completion progress. The progress bar is rendered outside the jsPsych display element, and it requires the  jspsych.css  file to be loaded on the page. As of version 4.0, the progress bar looks like this:   To show the progress bar, set the  show_progress_bar  option in  jsPsych.init  to  true :  jsPsych.init({\n    timeline: exp,\n    show_progress_bar: true\n});  The progress bar updates after every every node on the top-level timeline updates. In other words, the progress bar updates after each TimelineNode in the main timeline array is completed. This avoids distracting updates in the middle of trials that are composed of multiple plugins, or confusing updates due to looping or conditional structures that may or may not execute depending on the actions of the subject. This also allows some flexibility for the programmer; by nesting timelines in a deliberate manner, the timing of progress bar updates can be controlled.", 
            "title": "Automatic Progress Bar"
        }, 
        {
            "location": "/features/mturk/", 
            "text": "Integrating with Mechanical Turk\n\n\nA common use of jsPsych is to build an online experiment and find subjects using \nMechanical Turk\n. Once an experiment is available through a web server and data is being \nsaved on the server\n, connecting the experiment with Mechanical Turk takes only a few additional steps. jsPsych has some built-in functionality to assist with this process. \n\n\nThe jsPsych.turk module\n\n\nThe \njsPsych.turk\n module contains functions that are relevant for experiments running on Mechanical Turk.\n\n\nCreating an advertisement page\n\n\nWhen potential subjects view your experiment on Mechanical Turk, they will be able to see a single webpage before deciding whether or not to accept the HIT (start the experiment). This first page is often used as an advertisement for the experiment, similar to posting a flier in a department hallway. The important thing to remember about this page is that potential subjects will be able to interact with it even if they haven't accepted the HIT. Therefore, it can be useful to change the content of the page depending on whether the HIT has been accepted or not. This is relatively easy to do using jsPsych and jQuery:\n\n\ndiv id=\nexperiment_link\nYou must accept the HIT to begin the experiment\n/div\n.\n\n\nscript\n\n// jsPsych has a method turkInfo() which can determine whether or not the\n// HIT has been accepted.\nvar turkInfo = jsPsych.turkInfo();\n\n// turkInfo.previewMode is true in two cases: when the HIT has not been\n// accepted yet OR when the page is viewed outside of mechanical turk.\n// The second property, outsideTurk, is true when the page is viewed\n// outside of mechanical turk, so together, the statement will be true\n// only when in Turk and when the HIT is not accepted yet.\nif(turkInfo.previewMode \n !turkInfo.outsideTurk) {\n  $('#turkInfo').html('\na href=\nlink_to_experiment.html\n target=\n_blank\nClick Here to Start Experiment\n/a\n');\n}\n\n/script\n\n\n\n\n\nOne important issue with advertisement pages is that they must be served using the https protocol, which requires having an SSL certificate on the web server hosting the page. Instructions for how to do this vary depending on what kind of server you are using, so the best advice is to simply Google for instructions on how to acquire and install an SSL certificate on your particular server.\n\n\nGetting the worker ID\n\n\nEvery account on Mechanical Turk is given a unique identification string. Recording this ID is a useful way to keep track of who is doing your experiment. In particular, while Turk has built in tools for preventing the same person from doing a HIT more than once, there may be cases where you don't want subjects to complete related experiments. If you store the worker ID of every person who starts an experiment in a database, then you can exclude people by running a query on the database to check for the ID. jsPsych can get the workerID, assignmentID, and hitID with the turkInfo method.\n\n\nvar turkInfo = jsPsych.turk.turkInfo();\n\n// workerID\nturkInfo.workerId\n\n// hitID\nturkInfo.hitId\n\n// assignmentID\nturkInfo.assignmentId\n\n\n\n\nRecording the workerId at the start of the experiment is also a good way to track dropouts.\n\n\nSubmitting results to Mechanical Turk\n\n\nIf you are running a HIT on Mechanical Turk using the ExternalQuestion template, then you'll need to provide a way for subjects to indicate that they have completed the HIT. (If you are using another template, then the template will provide this code for you). jsPSych makes this a relatively easy task. A common strategy for external HITs is to display an HTML page on the Mechanical Turk website that links to your HIT. Subjects click the link, which opens the actual experiment content in a new browser window or tab, allowing the experiment to take up the whole browser window instead of just the iframe that displays content on Mechanical Turk.\n\n\nOn this page, you might include a submit button for workers to indicate that they have finished the experiment. The page would look something like this:\n\n\np\nEnter the code you were given:\n/p\n\n\ninput type=\ntext\n id=\ncode\n/input\n\n\nbutton onclick=\nsendData();\nSubmit HIT\n/button\n\n\n\nscript\n\nfunction sendData() {\n  jsPsych.turk.submitToTurk({\n    code: document.getElementById('code').value\n  });\n}\n\n/script\n\n\n\n\n\nWhen workers click the button, the contents of the \ncode\n text field will be sent to Mechanical Turk, and you'll be able to view the subjects and the codes that they entered in the Mechanical Turk GUI. You can then approve or reject work using the Mechanical Turk website.\n\n\nLimitations\n\n\njsPsych is not designed to communicate with the Mechanical Turk API in a comprehensive manner. If you are looking for software to help you post and manage HITs, then you may want to look at \nPsiTurk\n. jsPsych and PsiTurk complement each other nicely, and there is \nan example of combining the two platforms\n on PsiTurk's experiment exchange.", 
            "title": "Integrating with Mechanical Turk"
        }, 
        {
            "location": "/features/mturk/#integrating-with-mechanical-turk", 
            "text": "A common use of jsPsych is to build an online experiment and find subjects using  Mechanical Turk . Once an experiment is available through a web server and data is being  saved on the server , connecting the experiment with Mechanical Turk takes only a few additional steps. jsPsych has some built-in functionality to assist with this process.", 
            "title": "Integrating with Mechanical Turk"
        }, 
        {
            "location": "/features/mturk/#the-jspsychturk-module", 
            "text": "The  jsPsych.turk  module contains functions that are relevant for experiments running on Mechanical Turk.", 
            "title": "The jsPsych.turk module"
        }, 
        {
            "location": "/features/mturk/#creating-an-advertisement-page", 
            "text": "When potential subjects view your experiment on Mechanical Turk, they will be able to see a single webpage before deciding whether or not to accept the HIT (start the experiment). This first page is often used as an advertisement for the experiment, similar to posting a flier in a department hallway. The important thing to remember about this page is that potential subjects will be able to interact with it even if they haven't accepted the HIT. Therefore, it can be useful to change the content of the page depending on whether the HIT has been accepted or not. This is relatively easy to do using jsPsych and jQuery:  div id= experiment_link You must accept the HIT to begin the experiment /div . script \n// jsPsych has a method turkInfo() which can determine whether or not the\n// HIT has been accepted.\nvar turkInfo = jsPsych.turkInfo();\n\n// turkInfo.previewMode is true in two cases: when the HIT has not been\n// accepted yet OR when the page is viewed outside of mechanical turk.\n// The second property, outsideTurk, is true when the page is viewed\n// outside of mechanical turk, so together, the statement will be true\n// only when in Turk and when the HIT is not accepted yet.\nif(turkInfo.previewMode   !turkInfo.outsideTurk) {\n  $('#turkInfo').html(' a href= link_to_experiment.html  target= _blank Click Here to Start Experiment /a ');\n} /script   One important issue with advertisement pages is that they must be served using the https protocol, which requires having an SSL certificate on the web server hosting the page. Instructions for how to do this vary depending on what kind of server you are using, so the best advice is to simply Google for instructions on how to acquire and install an SSL certificate on your particular server.", 
            "title": "Creating an advertisement page"
        }, 
        {
            "location": "/features/mturk/#getting-the-worker-id", 
            "text": "Every account on Mechanical Turk is given a unique identification string. Recording this ID is a useful way to keep track of who is doing your experiment. In particular, while Turk has built in tools for preventing the same person from doing a HIT more than once, there may be cases where you don't want subjects to complete related experiments. If you store the worker ID of every person who starts an experiment in a database, then you can exclude people by running a query on the database to check for the ID. jsPsych can get the workerID, assignmentID, and hitID with the turkInfo method.  var turkInfo = jsPsych.turk.turkInfo();\n\n// workerID\nturkInfo.workerId\n\n// hitID\nturkInfo.hitId\n\n// assignmentID\nturkInfo.assignmentId  Recording the workerId at the start of the experiment is also a good way to track dropouts.", 
            "title": "Getting the worker ID"
        }, 
        {
            "location": "/features/mturk/#submitting-results-to-mechanical-turk", 
            "text": "If you are running a HIT on Mechanical Turk using the ExternalQuestion template, then you'll need to provide a way for subjects to indicate that they have completed the HIT. (If you are using another template, then the template will provide this code for you). jsPSych makes this a relatively easy task. A common strategy for external HITs is to display an HTML page on the Mechanical Turk website that links to your HIT. Subjects click the link, which opens the actual experiment content in a new browser window or tab, allowing the experiment to take up the whole browser window instead of just the iframe that displays content on Mechanical Turk.  On this page, you might include a submit button for workers to indicate that they have finished the experiment. The page would look something like this:  p Enter the code you were given: /p  input type= text  id= code /input  button onclick= sendData(); Submit HIT /button  script \nfunction sendData() {\n  jsPsych.turk.submitToTurk({\n    code: document.getElementById('code').value\n  });\n} /script   When workers click the button, the contents of the  code  text field will be sent to Mechanical Turk, and you'll be able to view the subjects and the codes that they entered in the Mechanical Turk GUI. You can then approve or reject work using the Mechanical Turk website.", 
            "title": "Submitting results to Mechanical Turk"
        }, 
        {
            "location": "/features/mturk/#limitations", 
            "text": "jsPsych is not designed to communicate with the Mechanical Turk API in a comprehensive manner. If you are looking for software to help you post and manage HITs, then you may want to look at  PsiTurk . jsPsych and PsiTurk complement each other nicely, and there is  an example of combining the two platforms  on PsiTurk's experiment exchange.", 
            "title": "Limitations"
        }, 
        {
            "location": "/core_library/overview/", 
            "text": "The jsPsych core library\n\n\nEvery jsPsych experiment utilizes the core library (contained in the \njspsych.js\n file). The core library is the glue that holds all of the various plugins together. There are also several modules that are contained in the core library for tasks that are common to many different experiments. These modules are available whenever the \njspsych.js\n file is loaded.\n\n\nCore library API\n\n\nCore\n\n\n\n\njsPsych.currentTimelineNodeID\n\n\njsPsych.currentTrial\n\n\njsPsych.endCurrentTimeline\n\n\njsPsych.endExperiment\n\n\njsPsych.finishTrial\n\n\njsPsych.getDisplayElement\n\n\njsPsych.init\n\n\njsPsych.initSettings\n\n\njsPsych.progress\n\n\njsPsych.startTime\n\n\njsPsych.totalTime\n\n\n\n\nData module\n\n\n\n\njsPsych.data.addDataToLastTrial\n\n\njsPsych.data.addProperties\n\n\njsPsych.data.dataAsCSV\n\n\njsPsych.data.dataAsJSON\n\n\njsPsych.data.displayData\n\n\njsPsych.data.getData\n\n\njsPsych.data.getDataByTimelineNode\n\n\njsPsych.data.getDataByTrialIndex\n\n\njsPsych.data.getLastTimelineData\n\n\njsPsych.data.getLastTrialData\n\n\n\n\njsPsych.data.getTrialsOfType\n\n\n\n\n\n\njsPsych.data.getURLVariable\n\n\n\n\njsPsych.data.localSave\n\n\njsPsych.data.write\n\n\njsPsych.data.urlVariables\n\n\n\n\nTurk module\n\n\n\n\njsPsych.turk.submitToTurk\n\n\njsPsych.turk.turkInfo\n\n\n\n\nRandomization module\n\n\n\n\njsPsych.randomization.factorial\n\n\njsPsych.randomization.randomID\n\n\njsPsych.randomization.repeat\n\n\njsPsych.randomization.sample\n\n\njsPsych.randomization.shuffle\n\n\njsPsych.randomization.shuffleNoRepeats\n\n\n\n\nPluginAPI module\n\n\n\n\njsPsych.pluginAPI.autoPreload\n\n\njsPsych.pluginAPI.cancelAllKeyboardResponses\n\n\njsPsych.pluginAPI.cancelKeyboardResponse\n\n\njsPsych.pluginAPI.convertKeyCharacterToKeyCode\n\n\njsPsych.pluginAPI.getAudioBuffer\n\n\njsPsych.pluginAPI.getKeyboardResponse\n\n\njsPsych.pluginAPI.evaluateFunctionParameters\n\n\njsPsych.pluginAPI.preloadAudioFiles\n\n\njsPsych.pluginAPI.preloadImages\n\n\njsPsych.pluginAPI.registerPreload", 
            "title": "Overview"
        }, 
        {
            "location": "/core_library/overview/#the-jspsych-core-library", 
            "text": "Every jsPsych experiment utilizes the core library (contained in the  jspsych.js  file). The core library is the glue that holds all of the various plugins together. There are also several modules that are contained in the core library for tasks that are common to many different experiments. These modules are available whenever the  jspsych.js  file is loaded.", 
            "title": "The jsPsych core library"
        }, 
        {
            "location": "/core_library/overview/#core-library-api", 
            "text": "Core   jsPsych.currentTimelineNodeID  jsPsych.currentTrial  jsPsych.endCurrentTimeline  jsPsych.endExperiment  jsPsych.finishTrial  jsPsych.getDisplayElement  jsPsych.init  jsPsych.initSettings  jsPsych.progress  jsPsych.startTime  jsPsych.totalTime   Data module   jsPsych.data.addDataToLastTrial  jsPsych.data.addProperties  jsPsych.data.dataAsCSV  jsPsych.data.dataAsJSON  jsPsych.data.displayData  jsPsych.data.getData  jsPsych.data.getDataByTimelineNode  jsPsych.data.getDataByTrialIndex  jsPsych.data.getLastTimelineData  jsPsych.data.getLastTrialData   jsPsych.data.getTrialsOfType    jsPsych.data.getURLVariable   jsPsych.data.localSave  jsPsych.data.write  jsPsych.data.urlVariables   Turk module   jsPsych.turk.submitToTurk  jsPsych.turk.turkInfo   Randomization module   jsPsych.randomization.factorial  jsPsych.randomization.randomID  jsPsych.randomization.repeat  jsPsych.randomization.sample  jsPsych.randomization.shuffle  jsPsych.randomization.shuffleNoRepeats   PluginAPI module   jsPsych.pluginAPI.autoPreload  jsPsych.pluginAPI.cancelAllKeyboardResponses  jsPsych.pluginAPI.cancelKeyboardResponse  jsPsych.pluginAPI.convertKeyCharacterToKeyCode  jsPsych.pluginAPI.getAudioBuffer  jsPsych.pluginAPI.getKeyboardResponse  jsPsych.pluginAPI.evaluateFunctionParameters  jsPsych.pluginAPI.preloadAudioFiles  jsPsych.pluginAPI.preloadImages  jsPsych.pluginAPI.registerPreload", 
            "title": "Core library API"
        }, 
        {
            "location": "/core_library/jspsych-core/", 
            "text": "The jsPsych core library\n\n\n\n\njsPsych.currentTimelineNodeID\n\n\njsPsych.currentTimelineNodeID()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns the ID of the TimelineNode that is currently active.\n\n\nDescription\n\n\nGets the ID of the active TimelineNode. The ID is a string that follows a specific format:\n\n\n\n\n\"0.0\"\n is the ID of the first top-level TimelineNode\n\n\n\"1.0\"\n is the ID of the second top-level TimelineNode\n\n\n\"2.0\"\n is the ID of the third top-level TimelineNode, and so on...\n\n\n\n\nIf a TimelineNode iterates multiple times (using the loop function, for example), then the iterations are indicated in the second number:\n\n\n\n\n\"0.0\"\n is the ID of the first top-level TimelineNode during the first iteration\n\n\n\"0.1\"\n is the ID of the first top-level TimelineNode during the second iteration\n\n\n\"0.2\"\n is the ID of the first top-level TimelineNode during the third iteration, and so on...\n\n\n\n\nIf TimelineNodes are nested in other TimelineNodes, then the hierarchical structure is shown with \n\".\"\n:\n\n\n\n\n\"0.0-1.0\"\n is the ID of the second TimelineNode on the timeline of the first top-level TimelineNode.\n\n\n\"0.0-2.0\"\n is the ID of the third TimelineNode on the timeline of the first top-level TimelineNode, and so on...\n\n\n\n\nThe rules about iterations apply throughout the hierarchical ID:\n\n\n\n\n\"0.2-1.3\"\n is the ID of the second TimelineNode, executing for the fourth time, on the timeline of the first top-level TimelineNode, executing for the third time.\n\n\n\n\nExample\n\n\nvar id = jsPsych.currentTimelineNodeID();\n\nconsole.log('The current TimelineNode ID is '+id);\n\n\n\n\n\n\njsPsych.currentTrial\n\n\njsPsych.currentTrial()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns the object describing the current trial. The object will contain all of the parameters associated with the current trial.\n\n\nDescription\n\n\nGet a description of the current trial\n\n\nExample\n\n\n\nvar trial = jsPsych.currentTrial();\n\nconsole.log('The current trial is using the '+trial.type+' plugin');\n\n\n\n\n\n\njsPsych.endCurrentTimeline\n\n\njsPsych.endCurrentTimeline\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nNone.\n\n\nDescription\n\n\nEnds the current timeline. If timelines are nested, then only the timeline that contains the current trial is ended.\n\n\nExample\n\n\nLoop indefinitely until a particular key is pressed\n\n\n\nvar images = [\n  \nimg/1.gif\n, \nimg/2.gif\n, \nimg/3.gif\n, \nimg/4.gif\n,\n  \nimg/5.gif\n, \nimg/6.gif\n, \nimg/7.gif\n, \nimg/8.gif\n,\n  \nimg/9.gif\n, \nimg/10.gif\n\n];\n\nvar trials = [];\nfor (var i = 0; i \n images.length; i++) {\n  trials.push({\n    stimulus: images[i]\n  });\n}\n\nvar block = {\n  type: 'single-stim',\n  choices: [89, 78], // Y or N\n  prompt: '\np class=\ncenter-content\nPress Y to Continue. Press N to end this node of the experiment.\n/p\n',\n  on_finish: function(data) {\n    if (data.key_press == 78) {\n      jsPsych.endCurrentTimeline();\n    }\n  },\n  timeline: trials\n}\n\nvar after_block = {\n  type: 'single-stim',\n  stimulus: '\np\nThe next node\n/p\n',\n  is_html: true\n}\n\njsPsych.init({\n  display_element: $('#jspsych-target'),\n  timeline: [block, after_block],\n  on_finish: function() {\n    jsPsych.data.displayData();\n  }\n});\n\n\n\n\n\n\n\njsPsych.endExperiment\n\n\njsPsych.endExperiment(end_message)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nend_message\n\n\nstring\n\n\nA message to display on the screen after the experiment is over.\n\n\n\n\n\n\n\n\nReturn value\n\n\nNone.\n\n\nDescription\n\n\nEnds the experiment, skipping all remaining trials.\n\n\nExample\n\n\nEnd the experiment if a particular response is given\n\n\nvar trial = {\n  type: 'single-stim',\n  stimulus: 'image1.jpg',\n  choices: [89,78], // Y or N\n  prompt: '\np class=\ncenter-content\nPress Y to Continue. Press N to end the experiment\n/p\n',\n  on_finish: function(data){\n    if(data.key_press == 78){\n      jsPsych.endExperiment('The experiment was ended by pressing N.');\n    }\n  }\n}\n\n\n\n\n\n\njsPsych.finishTrial\n\n\njsPsych.finishTrial(data)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nThe data to store for the trial.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nThis method tells jsPsych that the current trial is over. It is used in all of the plugins to end the current trial. When the trial ends a few things happen:\n\n\n\n\nThe data is stored using \njsPsych.data.write()\n\n\nThe on_finish callback function is executed for the trial\n\n\nThe on_trial_finish callback function is executed\n\n\nThe progress bar is updated if it is being displayed\n\n\nThe experiment ends if the trial is the last one (and the on_finish callback function is executed).\n\n\nThe next trial, if one exists, is started.\n\n\n\n\nExample\n\n\n\n// this code would be in a plugin\njsPsych.finishTrial({correct_response: true});\n\n\n\n\n\n\n\njsPsych.getDisplayElement\n\n\njsPsych.getDisplayElement\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns the jQuery-object that contains the DOM element used for displaying the experiment.\n\n\nDescription\n\n\nGet the DOM element that displays the experiment.\n\n\nExample\n\n\nvar el = jsPsych.getDisplayElement();\n\n// hide the jsPsych display\nel.hide();\n\n\n\n\n\n\njsPsych.init\n\n\njsPsych.init(settings)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsettings\n\n\nobject\n\n\nThe settings object for initializing jsPsych. See table below.\n\n\n\n\n\n\n\n\nThe settings object can contain several parameters. The only \nrequired\n parameter is \ntimeline\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeline\n\n\narray\n\n\nAn array containing the objects that describe the experiment timeline. See \nCreating an Experiment: The Timeline\n.\n\n\n\n\n\n\ndisplay_element\n\n\njQuery object\n\n\nA jQuery-selected DOM element, e.g., \n$('#target')\n selects the element with the \nid='target'\n attribute. If left blank, then jsPsych will use the \nbody\n element to display content (creating it if necessary). You can override this parameter at the trial level as well by specifying a display_element property on any timeline.\n\n\n\n\n\n\non_finish\n\n\nfunction\n\n\nFunction to execute when the experiment ends.\n\n\n\n\n\n\non_trial_start\n\n\nfunction\n\n\nFunction to execute when a new trial begins.\n\n\n\n\n\n\non_trial_finish\n\n\nfunction\n\n\nFunction to execute when a trial ends.\n\n\n\n\n\n\non_data_update\n\n\nfunction\n\n\nFunction to execute every time data is stored using the \njsPsych.data.write\n method. All plugins use this method to save data (via a call to \njsPsych.finishTrial\n, so this function runs every time a plugin stores new data.\n\n\n\n\n\n\nshow_progress_bar\n\n\nboolean\n\n\nIf true, then \na progress bar\n is shown at the top of the page.\n\n\n\n\n\n\nmax_load_time\n\n\nnumeric\n\n\nThe maximum number of milliseconds to wait for audio content to preload. If the wait time is exceeded, then an error message is logged and the experiment stops. The default value is 30 seconds.\n\n\n\n\n\n\nskip_load_check\n\n\nboolean\n\n\nIf true, then the experiment will not wait for audio content to load before starting. The default value is false.\n\n\n\n\n\n\nfullscreen\n\n\nboolean\n\n\nIf true, the experiment will run in fullscreen mode. See the \nfeature page\n for more details.\n\n\n\n\n\n\ndefault_iti\n\n\nnumeric\n\n\nThe default inter-trial interval in ms. The default value if none is specified is 1,000ms.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nThis method configures and starts the experiment.\n\n\nExample\n\n\nSee any of the plugin examples in the \ntests \n examples folder\n in the GitHub repository.\n\n\n\n\njsPsych.initSettings\n\n\njsPsych.initSettings()\n\n\n\n\nParameters\n\n\nNone\n\n\nReturn value\n\n\nReturns the settings object used to initialize the experiment.\n\n\nDescription\n\n\nGets the object containing the settings for the current experiment.\n\n\nExample\n\n\nvar settings = jsPsych.initSettings();\n\n// check the experiment structure\nconsole.log(JSON.stringify(settings.timeline));\n\n\n\n\n\n\njsPsych.progress\n\n\njsPsych.progress()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns an object with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntotal_trials\n\n\nnumeric\n\n\nIndicates the number of trials in the experiment. Note that this does not count possible loops or skipped trials due to conditional statements.\n\n\n\n\n\n\ncurrent_trial_global\n\n\nnumeric\n\n\nReturns the trial index of the current trial in a global scope. Every trial will increase this count by 1.\n\n\n\n\n\n\npercent_complete\n\n\nnumeric\n\n\nEstimates the percent of the experiment that is complete. Works as expected for experiments without conditional or looping timelines. For complex timelines, the percent is an approximation.\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method returns information about the length of the experiment and the subject's current location in the experiment timeline.\n\n\nExample\n\n\n\nvar progress = jsPsych.progress();\n\nalert('You have completed approximately '+progress.percent_complete+'% of the experiment');\n\n\n\n\n\n\n\njsPsych.startTime\n\n\njsPsych.startTime()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns a \nDate\n object indicating when the experiment began.\n\n\nDescription\n\n\nGet the time that the experiment began.\n\n\nExample\n\n\nvar start_time = jsPsych.startTime();\n\n\n\n\n\n\njsPsych.totalTime\n\n\njsPsych.totalTime()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns a numeric value indicating the number of milliseconds since \njsPsych.init\n was called.\n\n\nDescription\n\n\nGets the total time the subject has been in the experiment.\n\n\nExample\n\n\n\nvar time = jsPsych.totalTime();\nconsole.log(time);", 
            "title": "jsPsych core"
        }, 
        {
            "location": "/core_library/jspsych-core/#the-jspsych-core-library", 
            "text": "", 
            "title": "The jsPsych core library"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychcurrenttimelinenodeid", 
            "text": "jsPsych.currentTimelineNodeID()  Parameters  None.  Return value  Returns the ID of the TimelineNode that is currently active.  Description  Gets the ID of the active TimelineNode. The ID is a string that follows a specific format:   \"0.0\"  is the ID of the first top-level TimelineNode  \"1.0\"  is the ID of the second top-level TimelineNode  \"2.0\"  is the ID of the third top-level TimelineNode, and so on...   If a TimelineNode iterates multiple times (using the loop function, for example), then the iterations are indicated in the second number:   \"0.0\"  is the ID of the first top-level TimelineNode during the first iteration  \"0.1\"  is the ID of the first top-level TimelineNode during the second iteration  \"0.2\"  is the ID of the first top-level TimelineNode during the third iteration, and so on...   If TimelineNodes are nested in other TimelineNodes, then the hierarchical structure is shown with  \".\" :   \"0.0-1.0\"  is the ID of the second TimelineNode on the timeline of the first top-level TimelineNode.  \"0.0-2.0\"  is the ID of the third TimelineNode on the timeline of the first top-level TimelineNode, and so on...   The rules about iterations apply throughout the hierarchical ID:   \"0.2-1.3\"  is the ID of the second TimelineNode, executing for the fourth time, on the timeline of the first top-level TimelineNode, executing for the third time.   Example  var id = jsPsych.currentTimelineNodeID();\n\nconsole.log('The current TimelineNode ID is '+id);", 
            "title": "jsPsych.currentTimelineNodeID"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychcurrenttrial", 
            "text": "jsPsych.currentTrial()  Parameters  None.  Return value  Returns the object describing the current trial. The object will contain all of the parameters associated with the current trial.  Description  Get a description of the current trial  Example  \nvar trial = jsPsych.currentTrial();\n\nconsole.log('The current trial is using the '+trial.type+' plugin');", 
            "title": "jsPsych.currentTrial"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychendcurrenttimeline", 
            "text": "jsPsych.endCurrentTimeline  Parameters  None.  Return value  None.  Description  Ends the current timeline. If timelines are nested, then only the timeline that contains the current trial is ended.  Example  Loop indefinitely until a particular key is pressed  \nvar images = [\n   img/1.gif ,  img/2.gif ,  img/3.gif ,  img/4.gif ,\n   img/5.gif ,  img/6.gif ,  img/7.gif ,  img/8.gif ,\n   img/9.gif ,  img/10.gif \n];\n\nvar trials = [];\nfor (var i = 0; i   images.length; i++) {\n  trials.push({\n    stimulus: images[i]\n  });\n}\n\nvar block = {\n  type: 'single-stim',\n  choices: [89, 78], // Y or N\n  prompt: ' p class= center-content Press Y to Continue. Press N to end this node of the experiment. /p ',\n  on_finish: function(data) {\n    if (data.key_press == 78) {\n      jsPsych.endCurrentTimeline();\n    }\n  },\n  timeline: trials\n}\n\nvar after_block = {\n  type: 'single-stim',\n  stimulus: ' p The next node /p ',\n  is_html: true\n}\n\njsPsych.init({\n  display_element: $('#jspsych-target'),\n  timeline: [block, after_block],\n  on_finish: function() {\n    jsPsych.data.displayData();\n  }\n});", 
            "title": "jsPsych.endCurrentTimeline"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychendexperiment", 
            "text": "jsPsych.endExperiment(end_message)  Parameters     Parameter  Type  Description      end_message  string  A message to display on the screen after the experiment is over.     Return value  None.  Description  Ends the experiment, skipping all remaining trials.  Example  End the experiment if a particular response is given  var trial = {\n  type: 'single-stim',\n  stimulus: 'image1.jpg',\n  choices: [89,78], // Y or N\n  prompt: ' p class= center-content Press Y to Continue. Press N to end the experiment /p ',\n  on_finish: function(data){\n    if(data.key_press == 78){\n      jsPsych.endExperiment('The experiment was ended by pressing N.');\n    }\n  }\n}", 
            "title": "jsPsych.endExperiment"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychfinishtrial", 
            "text": "jsPsych.finishTrial(data)  Parameters     Parameter  Type  Description      data  object  The data to store for the trial.     Return value  Returns nothing.  Description  This method tells jsPsych that the current trial is over. It is used in all of the plugins to end the current trial. When the trial ends a few things happen:   The data is stored using  jsPsych.data.write()  The on_finish callback function is executed for the trial  The on_trial_finish callback function is executed  The progress bar is updated if it is being displayed  The experiment ends if the trial is the last one (and the on_finish callback function is executed).  The next trial, if one exists, is started.   Example  \n// this code would be in a plugin\njsPsych.finishTrial({correct_response: true});", 
            "title": "jsPsych.finishTrial"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychgetdisplayelement", 
            "text": "jsPsych.getDisplayElement  Parameters  None.  Return value  Returns the jQuery-object that contains the DOM element used for displaying the experiment.  Description  Get the DOM element that displays the experiment.  Example  var el = jsPsych.getDisplayElement();\n\n// hide the jsPsych display\nel.hide();", 
            "title": "jsPsych.getDisplayElement"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychinit", 
            "text": "jsPsych.init(settings)  Parameters     Parameter  Type  Description      settings  object  The settings object for initializing jsPsych. See table below.     The settings object can contain several parameters. The only  required  parameter is  timeline .     Parameter  Type  Description      timeline  array  An array containing the objects that describe the experiment timeline. See  Creating an Experiment: The Timeline .    display_element  jQuery object  A jQuery-selected DOM element, e.g.,  $('#target')  selects the element with the  id='target'  attribute. If left blank, then jsPsych will use the  body  element to display content (creating it if necessary). You can override this parameter at the trial level as well by specifying a display_element property on any timeline.    on_finish  function  Function to execute when the experiment ends.    on_trial_start  function  Function to execute when a new trial begins.    on_trial_finish  function  Function to execute when a trial ends.    on_data_update  function  Function to execute every time data is stored using the  jsPsych.data.write  method. All plugins use this method to save data (via a call to  jsPsych.finishTrial , so this function runs every time a plugin stores new data.    show_progress_bar  boolean  If true, then  a progress bar  is shown at the top of the page.    max_load_time  numeric  The maximum number of milliseconds to wait for audio content to preload. If the wait time is exceeded, then an error message is logged and the experiment stops. The default value is 30 seconds.    skip_load_check  boolean  If true, then the experiment will not wait for audio content to load before starting. The default value is false.    fullscreen  boolean  If true, the experiment will run in fullscreen mode. See the  feature page  for more details.    default_iti  numeric  The default inter-trial interval in ms. The default value if none is specified is 1,000ms.     Return value  Returns nothing.  Description  This method configures and starts the experiment.  Example  See any of the plugin examples in the  tests   examples folder  in the GitHub repository.", 
            "title": "jsPsych.init"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychinitsettings", 
            "text": "jsPsych.initSettings()  Parameters  None  Return value  Returns the settings object used to initialize the experiment.  Description  Gets the object containing the settings for the current experiment.  Example  var settings = jsPsych.initSettings();\n\n// check the experiment structure\nconsole.log(JSON.stringify(settings.timeline));", 
            "title": "jsPsych.initSettings"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychprogress", 
            "text": "jsPsych.progress()  Parameters  None.  Return value  Returns an object with the following properties:     Property  Type  Description      total_trials  numeric  Indicates the number of trials in the experiment. Note that this does not count possible loops or skipped trials due to conditional statements.    current_trial_global  numeric  Returns the trial index of the current trial in a global scope. Every trial will increase this count by 1.    percent_complete  numeric  Estimates the percent of the experiment that is complete. Works as expected for experiments without conditional or looping timelines. For complex timelines, the percent is an approximation.     Description  This method returns information about the length of the experiment and the subject's current location in the experiment timeline.  Example  \nvar progress = jsPsych.progress();\n\nalert('You have completed approximately '+progress.percent_complete+'% of the experiment');", 
            "title": "jsPsych.progress"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychstarttime", 
            "text": "jsPsych.startTime()  Parameters  None.  Return value  Returns a  Date  object indicating when the experiment began.  Description  Get the time that the experiment began.  Example  var start_time = jsPsych.startTime();", 
            "title": "jsPsych.startTime"
        }, 
        {
            "location": "/core_library/jspsych-core/#jspsychtotaltime", 
            "text": "jsPsych.totalTime()  Parameters  None.  Return value  Returns a numeric value indicating the number of milliseconds since  jsPsych.init  was called.  Description  Gets the total time the subject has been in the experiment.  Example  \nvar time = jsPsych.totalTime();\nconsole.log(time);", 
            "title": "jsPsych.totalTime"
        }, 
        {
            "location": "/core_library/jspsych-data/", 
            "text": "jsPsych.data\n\n\nThe jsPsych.data module contains functions for interacting with the data generated by jsPsych plugins.\n\n\n\n\njsPsych.data.addDataToLastTrial\n\n\njsPsych.data.addDataToLastTrial(data)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nObject of key: value pairs to add to the data from the last trial.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nThis method appends data to the data recorded by the last trial. It's particularly useful when combined with the \non_finish\n event handler for a trial, as shown in the example below.\n\n\nExamples\n\n\nEvaluate a response and add to data\n\n\nvar trial = {\n    type: 'single-stim',\n    stimulus: 'img/happy_face_1.jpg',\n    choices: [89,78], // Y or N\n    prompt: '\np class=\ncenter-content\nHave you seen this face before? Y or N.\n/p\n',\n    on_finish: function(trial_data){\n        // let's imagine that the correct answer is NO\n        var correct = (trial_data.key_press == 78);\n        jsPsych.data.addDataToLastTrial({correct: correct});\n    }\n}\n\n\n\n\n\n\njsPsych.data.addProperties\n\n\njsPsych.data.addProperties(properties)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproperties\n\n\nobject\n\n\nObject of key: value pairs to add to the data.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nThis method appends a set of properties to every trial in the data object, including trials that have already occurred and trials that have yet to occur. You can use this to record things like the subject ID or condition assignment.\n\n\nExamples\n\n\nAssigning a subject ID\n\n\njsPsych.data.addProperties({subject: 1});\n\njsPsych.init({\n    timeline: exp\n})\n\n\n\n\n\n\njsPsych.data.dataAsCSV\n\n\njsPsych.data.dataAsCSV()\n\n\n\n\nReturn value\n\n\nReturns a string in CSV format\n\n\nDescription\n\n\nGenerate a CSV formatted string containing all of the data generated in the experiment.\n\n\nExamples\n\n\nBasic example\n\n\nvar csvString = jsPsych.data.dataAsCSV();\n\n\n\n\n\n\njsPsych.data.dataAsJSON\n\n\njsPsych.data.dataAsJSON()\n\n\n\n\nReturn value\n\n\nReturns a string in JSON format\n\n\nDescription\n\n\nGenerate a JSON formatted string containing all of the data generated in the experiment.\n\n\nExamples\n\n\nBasic example\n\n\nvar jsonString = jsPsych.data.dataAsJSON();\n\n\n\n\n\n\njsPsych.data.displayData\n\n\njsPsych.data.displayData(format)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nSpecifies whether to display the data in \n'csv'\n or \n'json'\n format.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nOutputs all of the data collected in the experiment to the screen in either JSON or CSV format. This is a useful method for quick debugging when developing an experiment.\n\n\nExamples\n\n\nUsing the on_finish callback function to show data at the end of the experiment\n\n\njsPsych.init({\n    experiment_structure: exp,\n    on_finish: function() {\n        jsPsych.data.displayData('csv');\n    }\n})\n\n\n\n\n\n\njsPsych.data.getData\n\n\njsPsych.data.getData()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns an array containing all of the data generated in the experiment. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in \nkey: value\n format.\n\n\nDescription\n\n\nGets all of the data generated by the experiment.\n\n\nExample\n\n\nvar alldata = jsPsych.data.getData();\n\n\n\n\n\n\njsPsych.data.getDataByTimelineNode\n\n\njsPsych.data.getDataByTimelineNode(node_id)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnode_id\n\n\nstring\n\n\nThe id of the TimelineNodes to get data from.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns an array containing all of the data generated in a specified TimelineNode. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in \nkey: value\n format.\n\n\nDescription\n\n\nGet all the data generated by a specified TimelineNode.\n\n\nExample\n\n\n\nvar current_node_id = jsPsych.currentTimelineNodeID();\n\nvar data_from_current_node = jsPsych.data.getDataByTimelineNode(current_node_id);\n\n\n\n\n\n\n\njsPsych.data.getDataByTrialIndex\n\n\njsPsych.data.getDataByTrialIndex(trial_index)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrial_index\n\n\nnumeric\n\n\nThe global trial index of the trial\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns an array containing all of the data for a particular trial. Trials are automatically indexed by a global\n\n\nDescription\n\n\nGets all the data generated from a specific trial.\n\n\nExamples\n\n\nBasic example\n\n\nvar first_trial_data = jsPsych.data.getDataByTrialIndex(0);\nvar second_trial_data = jsPsych.data.getDataByTrialIndex(1);\n\n\n\n\n\n\njsPsych.data.getLastTimelineData\n\n\njsPsych.data.getLastTimelineData()\n\n\n\n\nReturn value\n\n\nReturns an array containing all of the data generated in the same timeline as the last trial. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in \nkey: value\n format.\n\n\nDescription\n\n\nGets all of the data generated in the same chunk as the last trial.\n\n\nExample\n\n\nvar lasttimelinedata = jsPsych.data.getLastTimelineData();\n\n\n\n\n\n\njsPsych.data.getLastTrialData\n\n\njsPsych.data.getLastTrialData()\n\n\n\n\nReturn value\n\n\nReturns an object in \nkey: value\n format containing the data from the last trial.\n\n\nDescription\n\n\nGets the data generated by the last trial.\n\n\nExample\n\n\nvar lasttrialdata = jsPsych.data.getLastTrialData();\n\n\n\n\n\n\njsPsych.data.getTrialsOfType\n\n\njsPsych.data.getTrialsOfType(type)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nWhich plugin to get trial data from.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns an array containing all of the data generated by a particular plugin. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in \nkey: value\n format.\n\n\nDescription\n\n\nGets all the data generated by trials from a particular plugin.\n\n\nExamples\n\n\nBasic example\n\n\nvar all_xab_trials = jsPsych.data.getTrialsOfType('xab');\n\n\n\n\nCompute average RT over whole experiment\n\n\n// this example shows how this method could be used to display data\n// to the subject, by finding all trials of type 'single-stim' and\n// calculating the average response time.\n\nvar debrief_block = {\n  type: \ntext\n,\n  text: function() {\n    return \np\nYour average response time was \nstrong\n +\n           getAverageResponseTime() + \nms\n/strong\n. Press \n +\n           \nany key to complete the experiment. Thank you!\n/p\n;\n  }\n};\n\nfunction getAverageResponseTime() {\n\n  var trials = jsPsych.data.getTrialsOfType('single-stim');\n\n  var sum_rt = 0;\n  var valid_trial_count = 0;\n  for (var i = 0; i \n trials.length; i++) {\n    if (trials[i].rt \n -1) {\n      sum_rt += trials[i].rt;\n      valid_trial_count++;\n    }\n  }\n  return Math.floor(sum_rt / valid_trial_count);\n}\n\n\n\n\n\n\njsPsych.data.getURLVariable\n\n\njsPsych.data.getURLVariable(var_name)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvar_name\n\n\nstring\n\n\nWhich variable to get the value of.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns the value of a variable passed in through the query string.\n\n\nDescription\n\n\nFor extracting a particular variable passed in through a URL query string.\n\n\nExamples\n\n\n\n// if the URL of the page is: experiment.html?subject=1234\ncondition=test\n\nconsole.log(jsPsych.data.getURLVariable('subject')) // logs \n1234\n\nconsole.log(jsPsych.data.getURLVariable('condition')) // logs \ntest\n\n\n\n\n\n\n\n\njsPsych.data.localSave\n\n\njsPsych.data.localSave(filename, format)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilename\n\n\nstring\n\n\nFilename of locally saved file\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nSpecifies either \n'csv'\n or \n'json'\n format\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nSaves a CSV or JSON file on the computer running the experiment. If conducting an online experiment, this will download the file onto the subject's computer, and is therefore not a recommended data storage solution for online data collection.\n\n\nWarning:\n This function relies on features which are \ncurrently not supported by all major web browsers\n, though adoption rates are increasing rapidly. It will work on the most recent versions of Chrome, Firefox, Safari, and Internet Explorer.\n\n\nExample\n\n\njsPsych.data.localSave('mydata.csv', 'csv');\n\n\n\n\n\n\njsPsych.data.urlVariables\n\n\njsPsych.data.urlVariables()\n\n\n\n\nReturn value\n\n\nReturns an object (associative array) of the variables in the URL query string.\n\n\nDescription\n\n\nFor extracting variables passed in through a URL query string.\n\n\nExamples\n\n\n\n// if the URL of the page is: experiment.html?subject=1234\ncondition=test\n\nvar urlvar = jsPsych.data.urlVariables();\nconsole.log(urlvar.subject) // logs \n1234\n\nconsole.log(urlvar.condition) // logs \ntest\n\n\n\n\n\n\n\n\njsPsych.data.write\n\n\njsPsych.data.write(data_object)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata_object\n\n\nobject\n\n\nObject of \nkey: value\n pairs to store in jsPsych's data storage as a trial.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nThis method is used by \njsPsych.finishTrial\n for writing data. You should probably not use it to add data. Instead use \njsPsych.data.addProperties\n.\n\n\nExamples\n\n\n\n// don't use this! data should only be written once per trial. use jsPsych.finishTrial to save data.\n\nvar trial_data = {\n    correct: true,\n    rt: 487\n}\n\njsPsych.data.write(trial_data);", 
            "title": "jsPsych.data"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdata", 
            "text": "The jsPsych.data module contains functions for interacting with the data generated by jsPsych plugins.", 
            "title": "jsPsych.data"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdataadddatatolasttrial", 
            "text": "jsPsych.data.addDataToLastTrial(data)  Parameters     Parameter  Type  Description      data  object  Object of key: value pairs to add to the data from the last trial.     Return value  Returns nothing.  Description  This method appends data to the data recorded by the last trial. It's particularly useful when combined with the  on_finish  event handler for a trial, as shown in the example below.  Examples  Evaluate a response and add to data  var trial = {\n    type: 'single-stim',\n    stimulus: 'img/happy_face_1.jpg',\n    choices: [89,78], // Y or N\n    prompt: ' p class= center-content Have you seen this face before? Y or N. /p ',\n    on_finish: function(trial_data){\n        // let's imagine that the correct answer is NO\n        var correct = (trial_data.key_press == 78);\n        jsPsych.data.addDataToLastTrial({correct: correct});\n    }\n}", 
            "title": "jsPsych.data.addDataToLastTrial"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdataaddproperties", 
            "text": "jsPsych.data.addProperties(properties)  Parameters     Parameter  Type  Description      properties  object  Object of key: value pairs to add to the data.     Return value  Returns nothing.  Description  This method appends a set of properties to every trial in the data object, including trials that have already occurred and trials that have yet to occur. You can use this to record things like the subject ID or condition assignment.  Examples  Assigning a subject ID  jsPsych.data.addProperties({subject: 1});\n\njsPsych.init({\n    timeline: exp\n})", 
            "title": "jsPsych.data.addProperties"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatadataascsv", 
            "text": "jsPsych.data.dataAsCSV()  Return value  Returns a string in CSV format  Description  Generate a CSV formatted string containing all of the data generated in the experiment.  Examples  Basic example  var csvString = jsPsych.data.dataAsCSV();", 
            "title": "jsPsych.data.dataAsCSV"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatadataasjson", 
            "text": "jsPsych.data.dataAsJSON()  Return value  Returns a string in JSON format  Description  Generate a JSON formatted string containing all of the data generated in the experiment.  Examples  Basic example  var jsonString = jsPsych.data.dataAsJSON();", 
            "title": "jsPsych.data.dataAsJSON"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatadisplaydata", 
            "text": "jsPsych.data.displayData(format)  Parameters     Parameter  Type  Description      format  string  Specifies whether to display the data in  'csv'  or  'json'  format.     Return value  Returns nothing.  Description  Outputs all of the data collected in the experiment to the screen in either JSON or CSV format. This is a useful method for quick debugging when developing an experiment.  Examples  Using the on_finish callback function to show data at the end of the experiment  jsPsych.init({\n    experiment_structure: exp,\n    on_finish: function() {\n        jsPsych.data.displayData('csv');\n    }\n})", 
            "title": "jsPsych.data.displayData"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetdata", 
            "text": "jsPsych.data.getData()  Parameters  None.  Return value  Returns an array containing all of the data generated in the experiment. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in  key: value  format.  Description  Gets all of the data generated by the experiment.  Example  var alldata = jsPsych.data.getData();", 
            "title": "jsPsych.data.getData"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetdatabytimelinenode", 
            "text": "jsPsych.data.getDataByTimelineNode(node_id)  Parameters     Parameter  Type  Description      node_id  string  The id of the TimelineNodes to get data from.     Return value  Returns an array containing all of the data generated in a specified TimelineNode. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in  key: value  format.  Description  Get all the data generated by a specified TimelineNode.  Example  \nvar current_node_id = jsPsych.currentTimelineNodeID();\n\nvar data_from_current_node = jsPsych.data.getDataByTimelineNode(current_node_id);", 
            "title": "jsPsych.data.getDataByTimelineNode"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetdatabytrialindex", 
            "text": "jsPsych.data.getDataByTrialIndex(trial_index)  Parameters     Parameter  Type  Description      trial_index  numeric  The global trial index of the trial     Return value  Returns an array containing all of the data for a particular trial. Trials are automatically indexed by a global  Description  Gets all the data generated from a specific trial.  Examples  Basic example  var first_trial_data = jsPsych.data.getDataByTrialIndex(0);\nvar second_trial_data = jsPsych.data.getDataByTrialIndex(1);", 
            "title": "jsPsych.data.getDataByTrialIndex"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetlasttimelinedata", 
            "text": "jsPsych.data.getLastTimelineData()  Return value  Returns an array containing all of the data generated in the same timeline as the last trial. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in  key: value  format.  Description  Gets all of the data generated in the same chunk as the last trial.  Example  var lasttimelinedata = jsPsych.data.getLastTimelineData();", 
            "title": "jsPsych.data.getLastTimelineData"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatagetlasttrialdata", 
            "text": "jsPsych.data.getLastTrialData()  Return value  Returns an object in  key: value  format containing the data from the last trial.  Description  Gets the data generated by the last trial.  Example  var lasttrialdata = jsPsych.data.getLastTrialData();", 
            "title": "jsPsych.data.getLastTrialData"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatagettrialsoftype", 
            "text": "jsPsych.data.getTrialsOfType(type)  Parameters     Parameter  Type  Description      type  string  Which plugin to get trial data from.     Return value  Returns an array containing all of the data generated by a particular plugin. Each element of the array contains the data for a single trial. Each trial's data is stored as an object in  key: value  format.  Description  Gets all the data generated by trials from a particular plugin.  Examples  Basic example  var all_xab_trials = jsPsych.data.getTrialsOfType('xab');  Compute average RT over whole experiment  // this example shows how this method could be used to display data\n// to the subject, by finding all trials of type 'single-stim' and\n// calculating the average response time.\n\nvar debrief_block = {\n  type:  text ,\n  text: function() {\n    return  p Your average response time was  strong  +\n           getAverageResponseTime() +  ms /strong . Press   +\n            any key to complete the experiment. Thank you! /p ;\n  }\n};\n\nfunction getAverageResponseTime() {\n\n  var trials = jsPsych.data.getTrialsOfType('single-stim');\n\n  var sum_rt = 0;\n  var valid_trial_count = 0;\n  for (var i = 0; i   trials.length; i++) {\n    if (trials[i].rt   -1) {\n      sum_rt += trials[i].rt;\n      valid_trial_count++;\n    }\n  }\n  return Math.floor(sum_rt / valid_trial_count);\n}", 
            "title": "jsPsych.data.getTrialsOfType"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatageturlvariable", 
            "text": "jsPsych.data.getURLVariable(var_name)  Parameters     Parameter  Type  Description      var_name  string  Which variable to get the value of.     Return value  Returns the value of a variable passed in through the query string.  Description  For extracting a particular variable passed in through a URL query string.  Examples  \n// if the URL of the page is: experiment.html?subject=1234 condition=test\n\nconsole.log(jsPsych.data.getURLVariable('subject')) // logs  1234 \nconsole.log(jsPsych.data.getURLVariable('condition')) // logs  test", 
            "title": "jsPsych.data.getURLVariable"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatalocalsave", 
            "text": "jsPsych.data.localSave(filename, format)  Parameters     Parameter  Type  Description      filename  string  Filename of locally saved file    format  string  Specifies either  'csv'  or  'json'  format     Return value  Returns nothing.  Description  Saves a CSV or JSON file on the computer running the experiment. If conducting an online experiment, this will download the file onto the subject's computer, and is therefore not a recommended data storage solution for online data collection.  Warning:  This function relies on features which are  currently not supported by all major web browsers , though adoption rates are increasing rapidly. It will work on the most recent versions of Chrome, Firefox, Safari, and Internet Explorer.  Example  jsPsych.data.localSave('mydata.csv', 'csv');", 
            "title": "jsPsych.data.localSave"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdataurlvariables", 
            "text": "jsPsych.data.urlVariables()  Return value  Returns an object (associative array) of the variables in the URL query string.  Description  For extracting variables passed in through a URL query string.  Examples  \n// if the URL of the page is: experiment.html?subject=1234 condition=test\n\nvar urlvar = jsPsych.data.urlVariables();\nconsole.log(urlvar.subject) // logs  1234 \nconsole.log(urlvar.condition) // logs  test", 
            "title": "jsPsych.data.urlVariables"
        }, 
        {
            "location": "/core_library/jspsych-data/#jspsychdatawrite", 
            "text": "jsPsych.data.write(data_object)  Parameters     Parameter  Type  Description      data_object  object  Object of  key: value  pairs to store in jsPsych's data storage as a trial.     Return value  Returns nothing.  Description  This method is used by  jsPsych.finishTrial  for writing data. You should probably not use it to add data. Instead use  jsPsych.data.addProperties .  Examples  \n// don't use this! data should only be written once per trial. use jsPsych.finishTrial to save data.\n\nvar trial_data = {\n    correct: true,\n    rt: 487\n}\n\njsPsych.data.write(trial_data);", 
            "title": "jsPsych.data.write"
        }, 
        {
            "location": "/core_library/jspsych-randomization/", 
            "text": "jsPsych.randomization\n\n\nThe jsPsych.randomization module contains methods that are useful for generating random lists of trial variables.\n\n\n\n\njsPsych.randomization.factorial\n\n\njsPsych.randomization.factorial(factors, repetitions, unpack)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfactors\n\n\nobject\n\n\nThe \nfactors\n object should contain a property for each different factor. Each property-factor should have a value of an array, with each element of the array corresponding to a level of the factor.\n\n\n\n\n\n\nrepetitions\n\n\ninteger\n\n\nThe number of times to repeat each unique combination of the factors in the output sample.\n\n\n\n\n\n\nunpack\n\n\nboolean\n\n\nIf \ntrue\n then the output will be an object with a property for each factor in the original \nfactors\n object. The value of each property-factor will be an array containing the levels of the factor in a random order. The order will be consistent across each property-factor (e.g. the first element of each property-factor will specify one unique combination of the factors). If \nfalse\n, then the return value will be an array of objects where each property-factor contains only a single value.\n\n\n\n\n\n\n\n\nReturn value\n\n\nThe return value depends on the \nunpack\n parameter. See description of the parameter above, and examples below.\n\n\nDescription\n\n\nThis method takes a list of factors and their levels, and creates a full factorial design by creating each unique combination of the factors. The returned set of combinations is in a random order.\n\n\nExamples\n\n\nCreate full factorial design\n\n\nvar factors = {\n    stimulus: ['a.jpg', 'b.jpg'],\n    ms_delay: [100, 200]\n}\n\nvar full_design = jsPsych.randomization.factorial(factors, 1);\n\n/*\noutput:\nfull_design = [\n    {stimulus: 'a.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 100},\n]\n*/\n\n\n\n\nCreate full factorial design with repeats\n\n\nvar factors = {\n    stimulus: ['a.jpg', 'b.jpg'],\n    ms_delay: [100, 200]\n}\n\nvar full_design = jsPsych.randomization.factorial(factors, 2);\n\n/*\noutput:\nfull_design = [\n    {stimulus: 'b.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 100},\n    {stimulus: 'b.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 200},\n    {stimulus: 'a.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 200},\n]\n*/\n\n\n\n\nCreate full factorial design, unpacked\n\n\nvar factors = {\n    stimulus: ['a.jpg', 'b.jpg'],\n    ms_delay: [100, 200]\n}\n\nvar full_design = jsPsych.randomization.factorial(factors, 1, true);\n\n/*\noutput:\nfull_design = {\n    stimulus: ['a.jpg','b.jpg','b.jpg','a.jpg'],\n    ms_delay: [200, 100, 200, 100]\n]\n*/\n\n\n\n\n\n\njsPsych.randomization.randomID\n\n\njsPsych.randomization.randomID(length)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlength\n\n\ninteger\n\n\nThe length of the randomly generated ID\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns a string of length \nlength\n where each character is randomly selected from the numbers 0-9 and all lowercase English letters a-z.\n\n\nDescription\n\n\nGenerates a random string that is likely to be unique. If length is undefined, then the string length is 32.\n\n\nExample\n\n\n\nconsole.log(jsPsych.randomization.randomID());\n// outputs: \nt7dwz0e713pc8juuaayyfvpkdd9un239\n\n\nconsole.log(jsPsych.randomization.randomID(8));\n// outputs: \n3xtpcbck\n\n\n\n\n\n\n\n\njsPsych.randomization.repeat\n\n\njsPsych.randomization.repeat(array, repetitions, unpack)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to randomize \n repeat.\n\n\n\n\n\n\nrepetitions\n\n\ninteger or array\n\n\nThe number of times to repeat each element of the \narray\n in the final sample. If this parameter is defined as an integer, then each element of \narray\n is repeated the same number of times. This parameter can also be an array of the same length as \narray\n, in which case each element of \narray\n will be repeated the number of times defined in the corresponding position of the \nrepetitions\n array.\n\n\n\n\n\n\nunpack\n\n\nboolean\n\n\nIf each element of \narray\n is an object with an equivalent set of properties, then setting \nunpack\n to \ntrue\n will make the return value an object with a property for each of the unique properties among the elements of the \narray\n. Each property in the output object will be an array containing the values for that property in the randomized order. The order will be consistent across properties. If this is \nfalse\n then the output is just an array containing a randomized order of the original \narray\n elements.\n\n\n\n\n\n\n\n\nReturn value\n\n\nThe return value depends on the \nunpack\n parameter. See description of the parameter above, and examples below.\n\n\nDescription\n\n\nThis method takes an array of values and generates a new random order of the array, with the option of repeating each element of the array a specified number of times.\n\n\nIf the array elements are objects with the same set of properties, then this method can optionally return a single object where each property is a randomized order of the properties defined in the original set of objects. This is useful for randomizing sets of parameters that are used to define a jsPsych block.\n\n\nExamples\n\n\nShuffle an array, no repeats\n\n\n\nvar myArray = [1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 1);\n\n// output: shuffledArray = [3,2,4,1,5]\n\n\n\n\nShuffle an array with repeats\n\n\n\nvar myArray = [1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 2);\n\n// output: shuffledArray = [1,3,4,2,2,4,5,1,5,3]\n\n\n\n\nShuffle an array of objects\n\n\n\nvar trial1 = {\n    stimulus: 'img/faceA.jpg',\n    correct_key: 80,\n    person_name: 'Joe'\n}\n\nvar trial2 = {\n    stimulus: 'img/faceB.jpg',\n    correct_key: 80,\n    person_name: 'Fred'\n}\n\nvar trial3 = {\n    stimulus: 'img/faceC.jpg',\n    correct_key: 81,\n    person_name: 'Mary'\n}\n\nvar myArray = [ trial1, trial2, trial3 ];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 2);\n\n// output: shuffledArray = [ trial1, trial3, trial3, trial2, trial1, trial2 ]\n\n\n\n\nShuffle an array of objects, with unpack\n\n\n\nvar trial1 = {\n    stimulus: 'img/faceA.jpg',\n    correct_key: 80,\n    person_name: 'Joe'\n}\n\nvar trial2 = {\n    stimulus: 'img/faceB.jpg',\n    correct_key: 80,\n    person_name: 'Fred'\n}\n\nvar trial3 = {\n    stimulus: 'img/faceC.jpg',\n    correct_key: 81,\n    person_name: 'Mary'\n}\n\nvar myArray = [ trial1, trial2, trial3 ];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 2, true);\n\n/*\noutput: shuffledArray = {\n    stimulus: ['img/faceB.jpg','img/faceA.jpg','img/faceC.jpg','img/faceA.jpg','img/faceC.jpg','img/faceB.jpg'],\n    correct_key: [80, 80, 81, 80, 81, 80],\n    person_name: ['Fred','Joe', 'Mary', 'Joe', 'Mary', 'Fred']\n}\n*/\n\n\n\n\n\n\njsPsych.randomization.sample\n\n\njsPsych.randomization.sample(array, sampleSize, withReplacement)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to sample from\n\n\n\n\n\n\nsampleSize\n\n\nnumeric\n\n\nThe number of samples to draw\n\n\n\n\n\n\nwithReplacement\n\n\nboolean\n\n\nIf \ntrue\n, then sampling will be with replacement. Otherwise, sampling is without replacement.\n\n\n\n\n\n\n\n\nReturn value\n\n\nAn array containing the sample.\n\n\nDescription\n\n\nThis method returns a sample drawn at random from a set of values. Sampling can be with replacement (items can be chosen more than once) or without replacement (items may only be chosen once).\n\n\nExamples\n\n\nSample without replacement\n\n\n\nvar myArray = [1,2,3,4,5];\nvar sample = jsPsych.randomization.sample(myArray, 2, false);\n\n// output: sample = [3,2];\n\n\n\n\nSample with replacement\n\n\n\nvar myArray = [1,2,3,4,5];\nvar sample = jsPsych.randomization.sample(myArray, 8, true);\n\n// output: sample = [3,2,1,5,3,3,4,2];\n\n\n\n\n\n\njsPsych.randomization.shuffle\n\n\njsPsych.randomization.shuffle(array)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to shuffle\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns an array with the same elements as the input array in a random order.\n\n\nDescription\n\n\nA simple method for shuffling the order of an array.\n\n\nExamples\n\n\nShuffle an array\n\n\n\nvar myArray = [1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.shuffle(myArray);\n\n// output: shuffledArray = [3,2,4,1,5]\n\n\n\n\n\n\njsPsych.randomization.shuffleNoRepeats\n\n\njsPsych.randomization.shuffleNoRepeats(array, equalityTest)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\narray\n\n\nThe array of values to shuffle\n\n\n\n\n\n\nequalityTest\n\n\nfunction\n\n\nA function to use to evaluate the equality of neighbors in the array. The function should accept two parameters, which are the two elements to be tested. It should return \ntrue\n if they are equal and \nfalse\n if not. The default function, if none is specified, is to use the \n===\n operator. This will work for primitive values, but fail for Objects and Arrays. An example function is given below in the examples.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns an array with the same elements as the input array in a random order, with no repeating neighbors.\n\n\nDescription\n\n\nShuffle an array, ensuring that neighboring elements in the array are different.\n\n\nWarning: if you provide an array that has very few valid permutations with no neighboring elements, then this method will fail and cause the browser to hang.\n\n\nExamples\n\n\nBasic example\n\n\n\nvar myArray = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.shuffleNoRepeats(myArray);\n\n// output: shuffledArray = [2, 3, 5, 1, 2, 4, 1, 5, 4, 1, 3, 5, 4, 3, 2]\n\n\n\n\nCustom equalityTest\n\n\nvar myObjects = [\n  {color:\nblue\n},\n    {color:\nred\n},\n    {color:\nyellow\n},\n    {color:\norange\n}\n];\n\nvar repeatedSet = jsPsych.randomization.repeat(myObjects,3);\nvar shuffled = jsPsych.randomization.shuffleNoRepeats(repeatedSet, function(a,b) { return a.color === b.color });\n\n// console.log(JSON.stringify(shuffled))\n// \n[{\ncolor\n:\nred\n},{\ncolor\n:\nyellow\n},{\ncolor\n:\nblue\n},{\ncolor\n:\nyellow\n},{\ncolor\n:\norange\n},{\ncolor\n:\nred\n},{\ncolor\n:\nyellow\n},{\ncolor\n:\norange\n},{\ncolor\n:\nblue\n},{\ncolor\n:\norange\n},{\ncolor\n:\nred\n},{\ncolor\n:\nblue\n}]", 
            "title": "jsPsych.randomization"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomization", 
            "text": "The jsPsych.randomization module contains methods that are useful for generating random lists of trial variables.", 
            "title": "jsPsych.randomization"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationfactorial", 
            "text": "jsPsych.randomization.factorial(factors, repetitions, unpack)  Parameters     Parameter  Type  Description      factors  object  The  factors  object should contain a property for each different factor. Each property-factor should have a value of an array, with each element of the array corresponding to a level of the factor.    repetitions  integer  The number of times to repeat each unique combination of the factors in the output sample.    unpack  boolean  If  true  then the output will be an object with a property for each factor in the original  factors  object. The value of each property-factor will be an array containing the levels of the factor in a random order. The order will be consistent across each property-factor (e.g. the first element of each property-factor will specify one unique combination of the factors). If  false , then the return value will be an array of objects where each property-factor contains only a single value.     Return value  The return value depends on the  unpack  parameter. See description of the parameter above, and examples below.  Description  This method takes a list of factors and their levels, and creates a full factorial design by creating each unique combination of the factors. The returned set of combinations is in a random order.  Examples  Create full factorial design  var factors = {\n    stimulus: ['a.jpg', 'b.jpg'],\n    ms_delay: [100, 200]\n}\n\nvar full_design = jsPsych.randomization.factorial(factors, 1);\n\n/*\noutput:\nfull_design = [\n    {stimulus: 'a.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 100},\n]\n*/  Create full factorial design with repeats  var factors = {\n    stimulus: ['a.jpg', 'b.jpg'],\n    ms_delay: [100, 200]\n}\n\nvar full_design = jsPsych.randomization.factorial(factors, 2);\n\n/*\noutput:\nfull_design = [\n    {stimulus: 'b.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 100},\n    {stimulus: 'b.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 200},\n    {stimulus: 'b.jpg', ms_delay: 200},\n    {stimulus: 'a.jpg', ms_delay: 100},\n    {stimulus: 'a.jpg', ms_delay: 200},\n]\n*/  Create full factorial design, unpacked  var factors = {\n    stimulus: ['a.jpg', 'b.jpg'],\n    ms_delay: [100, 200]\n}\n\nvar full_design = jsPsych.randomization.factorial(factors, 1, true);\n\n/*\noutput:\nfull_design = {\n    stimulus: ['a.jpg','b.jpg','b.jpg','a.jpg'],\n    ms_delay: [200, 100, 200, 100]\n]\n*/", 
            "title": "jsPsych.randomization.factorial"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationrandomid", 
            "text": "jsPsych.randomization.randomID(length)  Parameters     Parameter  Type  Description      length  integer  The length of the randomly generated ID     Return value  Returns a string of length  length  where each character is randomly selected from the numbers 0-9 and all lowercase English letters a-z.  Description  Generates a random string that is likely to be unique. If length is undefined, then the string length is 32.  Example  \nconsole.log(jsPsych.randomization.randomID());\n// outputs:  t7dwz0e713pc8juuaayyfvpkdd9un239 \n\nconsole.log(jsPsych.randomization.randomID(8));\n// outputs:  3xtpcbck", 
            "title": "jsPsych.randomization.randomID"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationrepeat", 
            "text": "jsPsych.randomization.repeat(array, repetitions, unpack)  Parameters     Parameter  Type  Description      array  array  The array of values to randomize   repeat.    repetitions  integer or array  The number of times to repeat each element of the  array  in the final sample. If this parameter is defined as an integer, then each element of  array  is repeated the same number of times. This parameter can also be an array of the same length as  array , in which case each element of  array  will be repeated the number of times defined in the corresponding position of the  repetitions  array.    unpack  boolean  If each element of  array  is an object with an equivalent set of properties, then setting  unpack  to  true  will make the return value an object with a property for each of the unique properties among the elements of the  array . Each property in the output object will be an array containing the values for that property in the randomized order. The order will be consistent across properties. If this is  false  then the output is just an array containing a randomized order of the original  array  elements.     Return value  The return value depends on the  unpack  parameter. See description of the parameter above, and examples below.  Description  This method takes an array of values and generates a new random order of the array, with the option of repeating each element of the array a specified number of times.  If the array elements are objects with the same set of properties, then this method can optionally return a single object where each property is a randomized order of the properties defined in the original set of objects. This is useful for randomizing sets of parameters that are used to define a jsPsych block.  Examples  Shuffle an array, no repeats  \nvar myArray = [1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 1);\n\n// output: shuffledArray = [3,2,4,1,5]  Shuffle an array with repeats  \nvar myArray = [1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 2);\n\n// output: shuffledArray = [1,3,4,2,2,4,5,1,5,3]  Shuffle an array of objects  \nvar trial1 = {\n    stimulus: 'img/faceA.jpg',\n    correct_key: 80,\n    person_name: 'Joe'\n}\n\nvar trial2 = {\n    stimulus: 'img/faceB.jpg',\n    correct_key: 80,\n    person_name: 'Fred'\n}\n\nvar trial3 = {\n    stimulus: 'img/faceC.jpg',\n    correct_key: 81,\n    person_name: 'Mary'\n}\n\nvar myArray = [ trial1, trial2, trial3 ];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 2);\n\n// output: shuffledArray = [ trial1, trial3, trial3, trial2, trial1, trial2 ]  Shuffle an array of objects, with unpack  \nvar trial1 = {\n    stimulus: 'img/faceA.jpg',\n    correct_key: 80,\n    person_name: 'Joe'\n}\n\nvar trial2 = {\n    stimulus: 'img/faceB.jpg',\n    correct_key: 80,\n    person_name: 'Fred'\n}\n\nvar trial3 = {\n    stimulus: 'img/faceC.jpg',\n    correct_key: 81,\n    person_name: 'Mary'\n}\n\nvar myArray = [ trial1, trial2, trial3 ];\nvar shuffledArray = jsPsych.randomization.repeat(myArray, 2, true);\n\n/*\noutput: shuffledArray = {\n    stimulus: ['img/faceB.jpg','img/faceA.jpg','img/faceC.jpg','img/faceA.jpg','img/faceC.jpg','img/faceB.jpg'],\n    correct_key: [80, 80, 81, 80, 81, 80],\n    person_name: ['Fred','Joe', 'Mary', 'Joe', 'Mary', 'Fred']\n}\n*/", 
            "title": "jsPsych.randomization.repeat"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationsample", 
            "text": "jsPsych.randomization.sample(array, sampleSize, withReplacement)  Parameters     Parameter  Type  Description      array  array  The array of values to sample from    sampleSize  numeric  The number of samples to draw    withReplacement  boolean  If  true , then sampling will be with replacement. Otherwise, sampling is without replacement.     Return value  An array containing the sample.  Description  This method returns a sample drawn at random from a set of values. Sampling can be with replacement (items can be chosen more than once) or without replacement (items may only be chosen once).  Examples  Sample without replacement  \nvar myArray = [1,2,3,4,5];\nvar sample = jsPsych.randomization.sample(myArray, 2, false);\n\n// output: sample = [3,2];  Sample with replacement  \nvar myArray = [1,2,3,4,5];\nvar sample = jsPsych.randomization.sample(myArray, 8, true);\n\n// output: sample = [3,2,1,5,3,3,4,2];", 
            "title": "jsPsych.randomization.sample"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationshuffle", 
            "text": "jsPsych.randomization.shuffle(array)  Parameters     Parameter  Type  Description      array  array  The array of values to shuffle     Return value  Returns an array with the same elements as the input array in a random order.  Description  A simple method for shuffling the order of an array.  Examples  Shuffle an array  \nvar myArray = [1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.shuffle(myArray);\n\n// output: shuffledArray = [3,2,4,1,5]", 
            "title": "jsPsych.randomization.shuffle"
        }, 
        {
            "location": "/core_library/jspsych-randomization/#jspsychrandomizationshufflenorepeats", 
            "text": "jsPsych.randomization.shuffleNoRepeats(array, equalityTest)  Parameters     Parameter  Type  Description      array  array  The array of values to shuffle    equalityTest  function  A function to use to evaluate the equality of neighbors in the array. The function should accept two parameters, which are the two elements to be tested. It should return  true  if they are equal and  false  if not. The default function, if none is specified, is to use the  ===  operator. This will work for primitive values, but fail for Objects and Arrays. An example function is given below in the examples.     Return value  Returns an array with the same elements as the input array in a random order, with no repeating neighbors.  Description  Shuffle an array, ensuring that neighboring elements in the array are different.  Warning: if you provide an array that has very few valid permutations with no neighboring elements, then this method will fail and cause the browser to hang.  Examples  Basic example  \nvar myArray = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5];\nvar shuffledArray = jsPsych.randomization.shuffleNoRepeats(myArray);\n\n// output: shuffledArray = [2, 3, 5, 1, 2, 4, 1, 5, 4, 1, 3, 5, 4, 3, 2]  Custom equalityTest  var myObjects = [\n  {color: blue },\n    {color: red },\n    {color: yellow },\n    {color: orange }\n];\n\nvar repeatedSet = jsPsych.randomization.repeat(myObjects,3);\nvar shuffled = jsPsych.randomization.shuffleNoRepeats(repeatedSet, function(a,b) { return a.color === b.color });\n\n// console.log(JSON.stringify(shuffled))\n//  [{ color : red },{ color : yellow },{ color : blue },{ color : yellow },{ color : orange },{ color : red },{ color : yellow },{ color : orange },{ color : blue },{ color : orange },{ color : red },{ color : blue }]", 
            "title": "jsPsych.randomization.shuffleNoRepeats"
        }, 
        {
            "location": "/core_library/jspsych-turk/", 
            "text": "jsPsych.turk\n\n\nThe jsPsych.turk module contains functions for interacting with Mechanical Turk. \n\n\n\n\njsPsych.turk.submitToTurk\n\n\njsPsych.turk.submitToTurk(data)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nThe \ndata\n parameter is an object of \nkey: value\n pairs. Any pairs in the \ndata\n parameter will be saved by Mechanical Turk, and can be downloaded in a CSV file through the Mechanical Turk interface.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nThis method will submit a HIT to Mechanical Turk, causing the HIT to finish. \n\n\nThis method will only work when called from within the mechanical turk website. If you are using an external HIT to send workers to your own server, this method will not work on an externally hosted page. It will work if your external content is loaded in the iframe on the Mechanical Turk website.\n\n\nExample\n\n\n\n\np\nEnter the code you were given:\n/p\n\n\ninput type=\ntext\n id=\ncode\n/input\n\n\nbutton onclick=\nsendData();\nSubmit HIT\n/button\n\n\n\nscript\n\n// this content must be loaded in the iframe on the mechanical turk website.\n// usually, this means that the content is part of your 'recruitment ad', the\n// page the workers can see when they are deciding whether or not to accept a HIT.\n// one option is to include a simple form on this page that workers submit, with a\n// special code that they get at the end of the experiment.\n\nfunction sendData() {\n  jsPsych.turk.submitToTurk({\n    code: document.getElementById('code').value\n  });\n}\n\n/script\n\n\n\n\n\n\n\njsPsych.turk.turkInfo\n\n\njsPsych.turk.turkInfo()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns an object with six properties:\n\n\n\n\n.assignmentId\n contains the assignment ID string of the HIT.\n\n\n.hitId\n contains the HIT ID.\n\n\n.workerId\n contains the worker ID of the worker completing the HIT.\n\n\n.turkSubmitTo\n contains the URL for submitting the HIT. This parameter is used in the \njsPsych.turk.submitToTurk\n method, and is probably not useful outside of that context.\n\n\n.previewMode\n is a boolean value indicating whether or not the worker has accepted the HIT yet. If the page is viewed inside Mechancial Turk and the worker has not clicked 'Accept HIT' then this will be true. If the page is viewed outside Mechanical Turk or the worker has acccepted the HIT, then it will be false.\n\n\n.outsideTurk\n is a boolean value indicating if the page is being viewed within Mechanical Turk, or if it is being viewed from another source (e.g. someone directly going to the page URL instead of going through mturk).\n\n\n\n\nDescription\n\n\nThis method returns basic information about the current Mechanical Turk session, including the worker ID, assignment ID, and HIT ID.\n\n\nExample\n\n\n\nvar turkInfo = jsPsych.turk.turkInfo();\n\nalert('Worker ID is: ' + turkInfo.workerId);\n\nalert('Assignment ID is: ' + turkInfo.assignmentId);\n\nalert('HIT ID is: ' + turkInfo.hitId);\n\n// true if the page is viewed within Mechanical Turk, \n// but worker has not accepted the HIT yet.\n// false if the page is viewed outside Mechanical Turk,\n// OR the worker has accepted the HIT.\nalert('Preview mode? ' + turkInfo.previewMode); \n\n// true if the page is viewed outside mechanical turk,\n// false otherwise.\nalert('Outside turk? ' + turkInfo.outsideTurk);", 
            "title": "jsPsych.turk"
        }, 
        {
            "location": "/core_library/jspsych-turk/#jspsychturk", 
            "text": "The jsPsych.turk module contains functions for interacting with Mechanical Turk.", 
            "title": "jsPsych.turk"
        }, 
        {
            "location": "/core_library/jspsych-turk/#jspsychturksubmittoturk", 
            "text": "jsPsych.turk.submitToTurk(data)  Parameters     Parameter  Type  Description      data  object  The  data  parameter is an object of  key: value  pairs. Any pairs in the  data  parameter will be saved by Mechanical Turk, and can be downloaded in a CSV file through the Mechanical Turk interface.     Return value  Returns nothing.  Description  This method will submit a HIT to Mechanical Turk, causing the HIT to finish.   This method will only work when called from within the mechanical turk website. If you are using an external HIT to send workers to your own server, this method will not work on an externally hosted page. It will work if your external content is loaded in the iframe on the Mechanical Turk website.  Example   p Enter the code you were given: /p  input type= text  id= code /input  button onclick= sendData(); Submit HIT /button  script \n// this content must be loaded in the iframe on the mechanical turk website.\n// usually, this means that the content is part of your 'recruitment ad', the\n// page the workers can see when they are deciding whether or not to accept a HIT.\n// one option is to include a simple form on this page that workers submit, with a\n// special code that they get at the end of the experiment.\n\nfunction sendData() {\n  jsPsych.turk.submitToTurk({\n    code: document.getElementById('code').value\n  });\n} /script", 
            "title": "jsPsych.turk.submitToTurk"
        }, 
        {
            "location": "/core_library/jspsych-turk/#jspsychturkturkinfo", 
            "text": "jsPsych.turk.turkInfo()  Parameters  None.  Return value  Returns an object with six properties:   .assignmentId  contains the assignment ID string of the HIT.  .hitId  contains the HIT ID.  .workerId  contains the worker ID of the worker completing the HIT.  .turkSubmitTo  contains the URL for submitting the HIT. This parameter is used in the  jsPsych.turk.submitToTurk  method, and is probably not useful outside of that context.  .previewMode  is a boolean value indicating whether or not the worker has accepted the HIT yet. If the page is viewed inside Mechancial Turk and the worker has not clicked 'Accept HIT' then this will be true. If the page is viewed outside Mechanical Turk or the worker has acccepted the HIT, then it will be false.  .outsideTurk  is a boolean value indicating if the page is being viewed within Mechanical Turk, or if it is being viewed from another source (e.g. someone directly going to the page URL instead of going through mturk).   Description  This method returns basic information about the current Mechanical Turk session, including the worker ID, assignment ID, and HIT ID.  Example  \nvar turkInfo = jsPsych.turk.turkInfo();\n\nalert('Worker ID is: ' + turkInfo.workerId);\n\nalert('Assignment ID is: ' + turkInfo.assignmentId);\n\nalert('HIT ID is: ' + turkInfo.hitId);\n\n// true if the page is viewed within Mechanical Turk, \n// but worker has not accepted the HIT yet.\n// false if the page is viewed outside Mechanical Turk,\n// OR the worker has accepted the HIT.\nalert('Preview mode? ' + turkInfo.previewMode); \n\n// true if the page is viewed outside mechanical turk,\n// false otherwise.\nalert('Outside turk? ' + turkInfo.outsideTurk);", 
            "title": "jsPsych.turk.turkInfo"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/", 
            "text": "jsPsych.pluginAPI\n\n\nThe pluginAPI module contains functions that are useful when developing new plugins.\n\n\n\n\njsPsych.pluginAPI.autoPreload\n\n\njsPsych.pluginAPI.autoPreload(timeline, callback)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeline\n\n\nTimelineNode object\n\n\nA TimelineNode object that contains an arbitrary set of trials.\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nA function to execute when loading is complete\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nAttempts to preload all image files and audio files that will be used to run the trials on the timeline. Content will only preload from plugins that have used the \nregisterPreload\n method to define the media types of their parameters.\n\n\nThe callback function executes once all of the files are preloaded.\n\n\nThis method is used internally by the core jsPsych code. It is not recommended that you call it manually.\n\n\nExamples\n\n\n// you probably shouldn't use this method\n\n\n\n\n\n\njsPsych.pluginAPI.cancelAllKeyboardResponses\n\n\njsPsych.pluginAPI.cancelAllKeyboardResponses()\n\n\n\n\nParameters\n\n\nNone.\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nCancels all currently active keyboard listeners created by \njsPsych.pluginAPI.getKeyboardResponse\n.\n\n\nExamples\n\n\njsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n\n\n\n\n\njsPsych.pluginAPI.cancelKeyboardResponse\n\n\njsPsych.pluginAPI.cancelKeyboardResponse(listener_id)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlistener_id\n\n\nobject\n\n\nThe listener_id object generated by the call to \njsPsych.pluginAPI.getKeyboardResponse\n.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nCancels a specific keyboard listener created by \njsPsych.pluginAPI.getKeyboardResponse\n.\n\n\nExamples\n\n\n// create a persistent keyboard listener\nvar listener_id = jsPsych.pluginAPI.getKeyboardResponse(after_response, ['p','q'], 'date', true);\n\n// cancel keyboard listener\njsPsych.pluginAPI.cancelKeyboardResponse(listener_id);\n\n\n\n\n\n\njsPsych.pluginAPI.convertKeyCharacterToKeyCode\n\n\njsPsych.pluginAPI.convertKeyCharacterToKeyCode(character)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncharacter\n\n\nstring\n\n\nThe string representation of keyboard key.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns the numeric keycode associated with the \ncharacter\n parameter.\n\n\nDescription\n\n\nConverts between the string representation of a key and the numeric key code associated with that key.\n\n\nExamples\n\n\nvar keycode = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('a')\n// keycode is 65\n\nkeycode = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('space')\n// keycode is 32\n\n\n\n\n\n\njsPsych.pluginAPI.getAudioBuffer\n\n\njsPsych.pluginAPI.getAudioBuffer(filepath)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilepath\n\n\nstring\n\n\nThe path to the audio file that was preloaded.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns an audio buffer compatible with the WebAudio API for the given filepath.\n\n\nDescription\n\n\nGets an AudioBuffer that can be played with the WebAudio API. The file must be preloaded with \npreloadAudioFiles\n or the automatic preload (\nautoPreload\n).\n\n\nExamples\n\n\n// the code below is used to play audio in the single-audio plugin\nvar source = context.createBufferSource();\nsource.buffer = jsPsych.pluginAPI.getAudioBuffer(trial.stimulus);\nsource.connect(context.destination);\nstartTime = context.currentTime + 0.1;\nsource.start(startTime);\n\n\n\n\n\n\njsPsych.pluginAPI.getKeyboardResponse\n\n\njsPsych.pluginAPI.getKeyboardResponse(parameters)\n\n\n\n\nParameters\n\n\nThe method accepts an object of parameter values (see example below). The valid keys for this object are listed in the table below.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncallback_function\n\n\nfunction\n\n\nThe function to execute whenever a valid keyboard response is generated.\n\n\n\n\n\n\nvalid_responses\n\n\narray\n\n\nAn array of key codes or character strings representing valid responses. Responses not on the list will be ignored. An empty array indicates that all responses are acceptable.\n\n\n\n\n\n\nrt_method\n\n\nstring\n\n\nIndicates which method of recording time to use. The \n'date'\n method uses calls to \n(new Date()).getTime()\n to record timing information. The \n'performance'\n method uses calls to \nperformance.now()\n, which is a more modern JavaScript feature. The \n'performance'\n approach is \nnot supported by all the major browsers yet\n, but adoption rates are increasing. The \naudio\n method is used in conjuction with an \naudio_context\n (set as an additional parameter). This uses the clock time of the \naudio_context\n when audio stimuli are being played.\n\n\n\n\n\n\naudio_context\n\n\nAudioContext object\n\n\nThe AudioContext of the audio file that is being played.\n\n\n\n\n\n\naudio_context_start_time\n\n\nnumeric\n\n\nThe scheduled time of the sound file in the AudioContext. This will be used as the start time.\n\n\n\n\n\n\nallow_held_key\n\n\nboolean\n\n\nIf \ntrue\n, then responses will be registered from keys that are being held down. If \nfalse\n, then a held key can only register a response the first time that \ngetKeyboardResponse\n is called for that key. For example, if a participant holds down the \nA\n key before the experiment starts, then the first time \ngetKeyboardResponse\n is called, the \nA\n will register as a key press. However, any future calls to \ngetKeyboardResponse\n will not register the \nA\n until the participant releases the key and presses it again.\n\n\n\n\n\n\npersist\n\n\nboolean\n\n\nIf false, then the keyboard listener will only trigger the first time a valid key is pressed. If true, then it will trigger every time a valid key is pressed until it is explicitly cancelled by \njsPsych.pluginAPI.cancelKeyboardResponse\n or \njsPsych.pluginAPI.cancelAllKeyboardResponses\n.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturn an object that uniquely identifies the keyboard listener. This object can be passed to \njsPsych.pluginAPI.cancelKeyboardResponse\n to cancel the keyboard listener.\n\n\nDescription\n\n\nGets a keyboard response from the subject, recording the response time from when the function is first called until a valid response is generated.\n\n\nA valid response triggers the \ncallback_function\n specified in the parameters. A single argument is passed to the callback function. The argument contains an object with the properties \nkey\n and \nrt\n. \nkey\n contains the numeric key code of the response, and \nrt\n contains the response time.\n\n\nExamples\n\n\nGet a single response from any key\n\n\n\nvar after_response = function(info){\n    alert('You pressed key '+info.key+' after '+info.rt+'ms');\n}\n\njsPsych.pluginAPI.getKeyboardResponse({\n  callback_function:after_response,\n  valid_responses: [],\n  rt_method: 'date',\n  persist: false\n});\n\n\n\n\nGet a responses from a key until the letter Q is pressed\n\n\n\nvar after_response = function(info){\n    alert('You pressed key '+info.key+' after '+info.rt+'ms');\n\n    if(info.key == 81){ // the key code for 'Q' is 81.\n        jsPsych.pluginAPI.cancelKeyboardResponse(listener);\n    }\n}\n\nvar listener = jsPsych.pluginAPI.getKeyboardResponse({\n  callback_function:after_response,\n  valid_responses: [],\n  rt_method: 'date',\n  persist: true\n});\n\n\n\n\n\n\njsPsych.pluginAPI.evaluateFunctionParameters\n\n\njsPsych.pluginAPI.evaluateFunctionParameters(trial, protect)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrial\n\n\nobject\n\n\nAn object representing the trial (typically the same variable that gets passed to the \nplugin.trial\n method). It contains \nkey: value\n pairs describing all the trial parameters.\n\n\n\n\n\n\nprotect\n\n\narray\n\n\nAn array of strings, indicating which parameters in the \ntrial\n object should be protected from normalization\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns a the trial object with all values that were functions replaced by the return value of the function.\n\n\nDescription\n\n\nThis method replaces any parameters that are functions with the output of the function.\n\n\nExample\n\n\n\n// a snippet from a trial method\n\nplugin.trial = function(display_element, trial) {\n\n    trial = jsPsych.pluginAPI.evaluateFunctionParameters(trial);\n\n     // the rest of the trial code...\n}\n\n\n\n\n\n\n\njsPsych.pluginAPI.preloadImages\n\n\njsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\narray\n\n\nAn array of audio file paths to load. The array can be nested (e.g. if images are in multiple arrays to help sort by condition or task).\n\n\n\n\n\n\ncallback_complete\n\n\nfunction\n\n\nA function to execute when all the files have been loaded.\n\n\n\n\n\n\ncallback_load\n\n\nfunction\n\n\nA function to execute after each file has been loaded. A single parameter is passed to this function which contains the number of files that have been loaded so far.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nUse this function to preload audio files that are not part of a plugin with automatic preloading. Audio files in official plugins will automatically preload. See \nMedia Preloading\n for more information.\n\n\nIt is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the files are loaded. Thus, it is possible that an audio file would be required for playing before it is done preloading. The \ncallback_complete\n function will only execute after all the audio files are loaded, and can be used to control the flow of the experiment (e.g. by starting the experiment in the \ncallback_complete\n function).\n\n\nThe \ncallback_load\n function can be used to indicate progress. See example below.\n\n\nExamples\n\n\nBasic use\n\n\n\nvar sounds = ['file1.mp3', 'file2.mp3', 'file3.mp3'];\n\njsPsych.preloadAudioFiles(sounds, function(){ startExperiment(); });\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}\n\n\n\n\n\nShow progress of loading\n\n\nvar sounds = ['file1.mp3', 'file2.mp3', 'file3.mp3'];\n\njsPsych.preloadAudioFiles(sounds, function(){ startExperiment(); }, function(nLoaded) { updateLoadedCount(nLoaded); });\n\nfunction updateLoadedCount(nLoaded){\n    var percentcomplete = nLoaded / sounds.length * 100;\n\n    // could put something fancier here, like a progress bar\n    // or updating text in the DOM.\n    console.log('Loaded '+percentcomplete+'% of audio files');\n}\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}\n\n\n\n\n\n\njsPsych.pluginAPI.preloadImages\n\n\njsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimages\n\n\narray\n\n\nAn array of image paths to load. The array can be nested (e.g. if images are in multiple arrays to help sort by condition or task).\n\n\n\n\n\n\ncallback_complete\n\n\nfunction\n\n\nA function to execute when all the images have been loaded.\n\n\n\n\n\n\ncallback_load\n\n\nfunction\n\n\nA function to execute after each image has been loaded. A single parameter is passed to this function which contains the number of images that have been loaded so far.\n\n\n\n\n\n\n\n\nReturn value\n\n\nReturns nothing.\n\n\nDescription\n\n\nUse this function to preload image files that are not part of a plugin with automatic preloading. Image files in official plugins will automatically preload. See \nMedia Preloading\n for more information.\n\n\nIt is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the images are loaded. Thus, it is possible that an image would be required for display before it is done preloading. The \ncallback_complete\n function will only execute after all the images are loaded, and can be used to control the flow of the experiment (e.g. by starting the experiment in the \ncallback_complete\n function).\n\n\nThe \ncallback_load\n function can be used to indicate progress, if the number of images to be loaded is known ahead of time. See example below.\n\n\nExamples\n\n\nBasic use\n\n\n\nvar images = ['img/file1.png', 'img/file2.png', 'img/file3.png'];\n\njsPsych.preloadImages(images, function(){ startExperiment(); });\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}\n\n\n\n\n\nShow progress of loading\n\n\nvar images = ['img/file1.png', 'img/file2.png', 'img/file3.png'];\n\njsPsych.preloadImages(images, function(){ startExperiment(); }, function(nLoaded) { updateLoadedCount(nLoaded); });\n\nfunction updateLoadedCount(nLoaded){\n    var percentcomplete = nLoaded / images.length * 100;\n\n    // could put something fancier here, like a progress bar\n    // or updating text in the DOM.\n    console.log('Loaded '+percentcomplete+'% of images');\n}\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}\n\n\n\n\n\n\njsPsych.pluginAPI.registerPreload\n\n\njsPsych.pluginAPI.registerPreload(plugin_name, parameter, media_type)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplugin_name\n\n\nstring\n\n\nThe name of the plugin. e.g., 'single-stim'.\n\n\n\n\n\n\nparameter\n\n\nstring\n\n\nThe name of the parameter that is a media file. e.g., 'stimulus'\n\n\n\n\n\n\nmedia_type\n\n\nstring\n\n\nThe type of media, either 'image' or 'audio'.\n\n\n\n\n\n\n\n\nReturn value\n\n\nNothing.\n\n\nDescription\n\n\nUse this method in a plugin file to mark a parameter as containing an element that should be preloaded. The method should be called in the plugin file such that it gets called when the file is loaded.\n\n\nExample\n\n\nFor an example, see the \nsingle-stim\n and \nsingle-audio\n plugins.", 
            "title": "jsPsych.pluginAPI"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapi", 
            "text": "The pluginAPI module contains functions that are useful when developing new plugins.", 
            "title": "jsPsych.pluginAPI"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiautopreload", 
            "text": "jsPsych.pluginAPI.autoPreload(timeline, callback)  Parameters     Parameter  Type  Description      timeline  TimelineNode object  A TimelineNode object that contains an arbitrary set of trials.    callback  function  A function to execute when loading is complete     Return value  Returns nothing.  Description  Attempts to preload all image files and audio files that will be used to run the trials on the timeline. Content will only preload from plugins that have used the  registerPreload  method to define the media types of their parameters.  The callback function executes once all of the files are preloaded.  This method is used internally by the core jsPsych code. It is not recommended that you call it manually.  Examples  // you probably shouldn't use this method", 
            "title": "jsPsych.pluginAPI.autoPreload"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapicancelallkeyboardresponses", 
            "text": "jsPsych.pluginAPI.cancelAllKeyboardResponses()  Parameters  None.  Return value  Returns nothing.  Description  Cancels all currently active keyboard listeners created by  jsPsych.pluginAPI.getKeyboardResponse .  Examples  jsPsych.pluginAPI.cancelAllKeyboardResponses();", 
            "title": "jsPsych.pluginAPI.cancelAllKeyboardResponses"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapicancelkeyboardresponse", 
            "text": "jsPsych.pluginAPI.cancelKeyboardResponse(listener_id)  Parameters     Parameter  Type  Description      listener_id  object  The listener_id object generated by the call to  jsPsych.pluginAPI.getKeyboardResponse .     Return value  Returns nothing.  Description  Cancels a specific keyboard listener created by  jsPsych.pluginAPI.getKeyboardResponse .  Examples  // create a persistent keyboard listener\nvar listener_id = jsPsych.pluginAPI.getKeyboardResponse(after_response, ['p','q'], 'date', true);\n\n// cancel keyboard listener\njsPsych.pluginAPI.cancelKeyboardResponse(listener_id);", 
            "title": "jsPsych.pluginAPI.cancelKeyboardResponse"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiconvertkeycharactertokeycode", 
            "text": "jsPsych.pluginAPI.convertKeyCharacterToKeyCode(character)  Parameters     Parameter  Type  Description      character  string  The string representation of keyboard key.     Return value  Returns the numeric keycode associated with the  character  parameter.  Description  Converts between the string representation of a key and the numeric key code associated with that key.  Examples  var keycode = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('a')\n// keycode is 65\n\nkeycode = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('space')\n// keycode is 32", 
            "title": "jsPsych.pluginAPI.convertKeyCharacterToKeyCode"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapigetaudiobuffer", 
            "text": "jsPsych.pluginAPI.getAudioBuffer(filepath)  Parameters     Parameter  Type  Description      filepath  string  The path to the audio file that was preloaded.     Return value  Returns an audio buffer compatible with the WebAudio API for the given filepath.  Description  Gets an AudioBuffer that can be played with the WebAudio API. The file must be preloaded with  preloadAudioFiles  or the automatic preload ( autoPreload ).  Examples  // the code below is used to play audio in the single-audio plugin\nvar source = context.createBufferSource();\nsource.buffer = jsPsych.pluginAPI.getAudioBuffer(trial.stimulus);\nsource.connect(context.destination);\nstartTime = context.currentTime + 0.1;\nsource.start(startTime);", 
            "title": "jsPsych.pluginAPI.getAudioBuffer"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapigetkeyboardresponse", 
            "text": "jsPsych.pluginAPI.getKeyboardResponse(parameters)  Parameters  The method accepts an object of parameter values (see example below). The valid keys for this object are listed in the table below.     Parameter  Type  Description      callback_function  function  The function to execute whenever a valid keyboard response is generated.    valid_responses  array  An array of key codes or character strings representing valid responses. Responses not on the list will be ignored. An empty array indicates that all responses are acceptable.    rt_method  string  Indicates which method of recording time to use. The  'date'  method uses calls to  (new Date()).getTime()  to record timing information. The  'performance'  method uses calls to  performance.now() , which is a more modern JavaScript feature. The  'performance'  approach is  not supported by all the major browsers yet , but adoption rates are increasing. The  audio  method is used in conjuction with an  audio_context  (set as an additional parameter). This uses the clock time of the  audio_context  when audio stimuli are being played.    audio_context  AudioContext object  The AudioContext of the audio file that is being played.    audio_context_start_time  numeric  The scheduled time of the sound file in the AudioContext. This will be used as the start time.    allow_held_key  boolean  If  true , then responses will be registered from keys that are being held down. If  false , then a held key can only register a response the first time that  getKeyboardResponse  is called for that key. For example, if a participant holds down the  A  key before the experiment starts, then the first time  getKeyboardResponse  is called, the  A  will register as a key press. However, any future calls to  getKeyboardResponse  will not register the  A  until the participant releases the key and presses it again.    persist  boolean  If false, then the keyboard listener will only trigger the first time a valid key is pressed. If true, then it will trigger every time a valid key is pressed until it is explicitly cancelled by  jsPsych.pluginAPI.cancelKeyboardResponse  or  jsPsych.pluginAPI.cancelAllKeyboardResponses .     Return value  Return an object that uniquely identifies the keyboard listener. This object can be passed to  jsPsych.pluginAPI.cancelKeyboardResponse  to cancel the keyboard listener.  Description  Gets a keyboard response from the subject, recording the response time from when the function is first called until a valid response is generated.  A valid response triggers the  callback_function  specified in the parameters. A single argument is passed to the callback function. The argument contains an object with the properties  key  and  rt .  key  contains the numeric key code of the response, and  rt  contains the response time.  Examples  Get a single response from any key  \nvar after_response = function(info){\n    alert('You pressed key '+info.key+' after '+info.rt+'ms');\n}\n\njsPsych.pluginAPI.getKeyboardResponse({\n  callback_function:after_response,\n  valid_responses: [],\n  rt_method: 'date',\n  persist: false\n});  Get a responses from a key until the letter Q is pressed  \nvar after_response = function(info){\n    alert('You pressed key '+info.key+' after '+info.rt+'ms');\n\n    if(info.key == 81){ // the key code for 'Q' is 81.\n        jsPsych.pluginAPI.cancelKeyboardResponse(listener);\n    }\n}\n\nvar listener = jsPsych.pluginAPI.getKeyboardResponse({\n  callback_function:after_response,\n  valid_responses: [],\n  rt_method: 'date',\n  persist: true\n});", 
            "title": "jsPsych.pluginAPI.getKeyboardResponse"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapievaluatefunctionparameters", 
            "text": "jsPsych.pluginAPI.evaluateFunctionParameters(trial, protect)  Parameters     Parameter  Type  Description      trial  object  An object representing the trial (typically the same variable that gets passed to the  plugin.trial  method). It contains  key: value  pairs describing all the trial parameters.    protect  array  An array of strings, indicating which parameters in the  trial  object should be protected from normalization     Return value  Returns a the trial object with all values that were functions replaced by the return value of the function.  Description  This method replaces any parameters that are functions with the output of the function.  Example  \n// a snippet from a trial method\n\nplugin.trial = function(display_element, trial) {\n\n    trial = jsPsych.pluginAPI.evaluateFunctionParameters(trial);\n\n     // the rest of the trial code...\n}", 
            "title": "jsPsych.pluginAPI.evaluateFunctionParameters"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapipreloadimages", 
            "text": "jsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)  Parameters     Parameter  Type  Description      files  array  An array of audio file paths to load. The array can be nested (e.g. if images are in multiple arrays to help sort by condition or task).    callback_complete  function  A function to execute when all the files have been loaded.    callback_load  function  A function to execute after each file has been loaded. A single parameter is passed to this function which contains the number of files that have been loaded so far.     Return value  Returns nothing.  Description  Use this function to preload audio files that are not part of a plugin with automatic preloading. Audio files in official plugins will automatically preload. See  Media Preloading  for more information.  It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the files are loaded. Thus, it is possible that an audio file would be required for playing before it is done preloading. The  callback_complete  function will only execute after all the audio files are loaded, and can be used to control the flow of the experiment (e.g. by starting the experiment in the  callback_complete  function).  The  callback_load  function can be used to indicate progress. See example below.  Examples  Basic use  \nvar sounds = ['file1.mp3', 'file2.mp3', 'file3.mp3'];\n\njsPsych.preloadAudioFiles(sounds, function(){ startExperiment(); });\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}  Show progress of loading  var sounds = ['file1.mp3', 'file2.mp3', 'file3.mp3'];\n\njsPsych.preloadAudioFiles(sounds, function(){ startExperiment(); }, function(nLoaded) { updateLoadedCount(nLoaded); });\n\nfunction updateLoadedCount(nLoaded){\n    var percentcomplete = nLoaded / sounds.length * 100;\n\n    // could put something fancier here, like a progress bar\n    // or updating text in the DOM.\n    console.log('Loaded '+percentcomplete+'% of audio files');\n}\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}", 
            "title": "jsPsych.pluginAPI.preloadImages"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapipreloadimages_1", 
            "text": "jsPsych.pluginAPI.preloadImages(images, callback_complete, callback_load)  Parameters     Parameter  Type  Description      images  array  An array of image paths to load. The array can be nested (e.g. if images are in multiple arrays to help sort by condition or task).    callback_complete  function  A function to execute when all the images have been loaded.    callback_load  function  A function to execute after each image has been loaded. A single parameter is passed to this function which contains the number of images that have been loaded so far.     Return value  Returns nothing.  Description  Use this function to preload image files that are not part of a plugin with automatic preloading. Image files in official plugins will automatically preload. See  Media Preloading  for more information.  It is possible to run this function without specifying a callback function. However, in this case the code will continue executing while the images are loaded. Thus, it is possible that an image would be required for display before it is done preloading. The  callback_complete  function will only execute after all the images are loaded, and can be used to control the flow of the experiment (e.g. by starting the experiment in the  callback_complete  function).  The  callback_load  function can be used to indicate progress, if the number of images to be loaded is known ahead of time. See example below.  Examples  Basic use  \nvar images = ['img/file1.png', 'img/file2.png', 'img/file3.png'];\n\njsPsych.preloadImages(images, function(){ startExperiment(); });\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}  Show progress of loading  var images = ['img/file1.png', 'img/file2.png', 'img/file3.png'];\n\njsPsych.preloadImages(images, function(){ startExperiment(); }, function(nLoaded) { updateLoadedCount(nLoaded); });\n\nfunction updateLoadedCount(nLoaded){\n    var percentcomplete = nLoaded / images.length * 100;\n\n    // could put something fancier here, like a progress bar\n    // or updating text in the DOM.\n    console.log('Loaded '+percentcomplete+'% of images');\n}\n\nfunction startExperiment(){\n    jsPsych.init({\n        timeline: exp\n    });\n}", 
            "title": "jsPsych.pluginAPI.preloadImages"
        }, 
        {
            "location": "/core_library/jspsych-pluginAPI/#jspsychpluginapiregisterpreload", 
            "text": "jsPsych.pluginAPI.registerPreload(plugin_name, parameter, media_type)  Parameters     Parameter  Type  Description      plugin_name  string  The name of the plugin. e.g., 'single-stim'.    parameter  string  The name of the parameter that is a media file. e.g., 'stimulus'    media_type  string  The type of media, either 'image' or 'audio'.     Return value  Nothing.  Description  Use this method in a plugin file to mark a parameter as containing an element that should be preloaded. The method should be called in the plugin file such that it gets called when the file is loaded.  Example  For an example, see the  single-stim  and  single-audio  plugins.", 
            "title": "jsPsych.pluginAPI.registerPreload"
        }, 
        {
            "location": "/plugins/overview/", 
            "text": "Plugins\n\n\nIn jsPsych, plugins define the kinds of tasks that subjects perform in experiments. Some plugins define very general tasks, like displaying instructions or displaying a visual stimulus and getting a keyboard response. Other plugins are more specific, displaying particular kinds of interactive stimuli, or running a specific version of particular kind of task. Creating an experiment with jsPsych involves figuring out which plugins are needed for the kinds of tasks you want to have your subjects perform.\n\n\nPlugins provide a structure for a particular task, but often allow for significant customization and flexibility. For example, the \njspsych-single-stim\n plugin defines a simple structure for showing a visual stimulus and collecting a keyboard response. You can specify the what the stimulus is, what keys the subject is allowed to press, and how long the stimulus should be on the screen, how long the subject has to respond, and so on. Many of these content options have reasonable default values; even though the \njspsych-single-stim\n plugin has many different options, you only \nneed\n to specify the stimulus in order to use it. Each plugin has its own documentation page, which describes what the plugin does and what options are available.\n\n\nUsing a plugin\n\n\nTo use a plugin, you'll need to load the plugin's JavaScript file on your experiment page:\n\n\nhead\n\n\nscript src=\njspsych/plugins/jspsych-single-stim.js\n type=\ntext/javascript\n/script\n\n\n/head\n\n\n\n\n\nOnce a plugin is loaded, you can define a trial that uses that plugin. The following JavaScript code defines a trial using the \njspsych-single-stim\n plugin to display an image file ('images/happy_face.jpg'). This trial uses the default values for valid keys, length of display, and other parameters. You could override these values by adding them to the object.\n\n\nvar single_stim_trial = {\n    type: 'single-stim',\n    stimulus: 'images/happy_face.jpg'\n}\n\n\n\n\nHere's an exampe of overriding the default value for \ntiming_post_trial\n:\n\n\nvar single_stim_trial = {\n    type: 'single-stim',\n    stimulus: 'images/happy_face.jpg',\n    timing_post_trial: 2000\n}\n\n\n\n\nParameters available in all plugins\n\n\nEach plugin specifies its own set of parameters. Check the documentation for a plugin to see what parameters are available and what they do.\n\n\nIn addition, there is a set of parameters that can be specified for any plugin.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntiming_post_trial\n\n\nnumeric\n\n\n1000\n\n\nSets the time, in milliseconds, between the current trial and the next trial.\n\n\n\n\n\n\non_finish\n\n\nfunction\n\n\nundefined\n\n\nA callback function to execute when the trial finishes. See \nthis page\n for more details.\n\n\n\n\n\n\ndata\n\n\nobject\n\n\nundefined\n\n\nAn object containing additional data to store for the trial. See \nthis page\n for more details.\n\n\n\n\n\n\ndisplay_element\n\n\njQuery DOM selection\n\n\nChange the target display at the trial level by specifying a new target for content.\n\n\n\n\n\n\n\n\n\n\nData collected by plugins\n\n\nEach plugin defines what data is collected on the trial. The documentation for each plugin specifies what data is collected by that plugin.\n\n\nIn addition to the data collected by a plugin, there is a default set of data that is collected on every trial. The collected data are:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ntrial_type\n\n\nstring\n\n\nThe name of the plugin used to run the trial.\n\n\n\n\n\n\ntrial_index\n\n\nnumeric\n\n\nThe index of the current trial across the whole experiment.\n\n\n\n\n\n\ntime_elapsed\n\n\nnumeric\n\n\nThe number of milliseconds since the start of the experiment when the trial ended.\n\n\n\n\n\n\ninternal_node_id\n\n\nstring\n\n\nA string identifier for the current TimelineNode.\n\n\n\n\n\n\n\n\nList of available plugins\n\n\nThis table is a description of all plugins that are currently bundled with jsPsych. Click on the name of a plugin to view its documentation page.\n\n\n\n\n\n\n\n\nPlugin\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njspsych\nanimation\n\n\nShows a sequence of images at a specified frame rate. Records key presses (including timing information) made by the subject while they are viewing the animation.\n\n\n\n\n\n\njspsych\nbutton\nresponse\n\n\nPresent a stimulus and collect a response via the subject clicking a button. The button can be customized extensively (e.g., to use images in place of buttons).\n\n\n\n\n\n\njspsych\ncall\nfunction\n\n\nExecutes an arbitrary function call. Doesn't display anything to the subject, and the subject is usually unaware that this plugin has even executed. It's useful for performing tasks at specified times in the experiment, such as saving data.\n\n\n\n\n\n\njspsych\ncategorize\n\n\nThe subject responds to a stimulus using the keyboard and can be given feedback about the correctness of their response.\n\n\n\n\n\n\njspsych\ncategorize\nanimation\n\n\nA mash-up of the animation and categorize plugin. The subject responds to an animation and can be given feedback about their response.\n\n\n\n\n\n\njspsych\nfree\nsort\n\n\nDisplays a set of images on the screen in random locations. Subjects can click and drag the images to move them around the screen. Records all the moves made by the subject, so the sequence of moves can be recovered from the data.\n\n\n\n\n\n\njspsych\nhtml\n\n\nDisplays an external HTML page (such as a consent form) and lets the subject respond by clicking a button or pressing a key. Plugin can validate their response, which is useful for making sure that a subject has granted consent before starting the experiment.\n\n\n\n\n\n\njspsych\ninstructions\n\n\nFor displaying instructions to the subject.\n\n\n\n\n\n\njspsych\nmulti\nstim\nmulti\nresponse\n\n\nA more generalized version of the single-stim plugin. Can display multiple stimuli in a single trial, and collect multiple responses in a single trial.\n\n\n\n\n\n\njspsych\npalmer\n\n\nShows grid-like stimuli inspired by Stephen Palmer's work. The stimuli are editable: subjects can add and subtract parts interactively. Also contains a method for generating the HTML code to render the stimuli, allowing them to be used in other plugins.\n\n\n\n\n\n\njspsych\nreconstruction\n\n\nThe subject interacts with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.\n\n\n\n\n\n\njspsych\nsame\ndifferent\n\n\nA same-different judgment task. A stimulus is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different.\n\n\n\n\n\n\njspsych\nsimilarity\n\n\nTwo stimuli are shown sequentially, and the subject indicates how similar they are by dragging a slider object.\n\n\n\n\n\n\njspsych\nsingle\naudio\n\n\nA basic plugin for playing an audio stimulus and getting a keyboard response.\n\n\n\n\n\n\njspsych\nsingle\nstim\n\n\nA basic plugin for displaying a stimulus and getting a keyboard response.\n\n\n\n\n\n\njspsych\nsurvey\nlikert\n\n\nDisplays likert-style questions.\n\n\n\n\n\n\njspsych\nsurvey\nmulti\nchoice\n\n\nDisplays multiple choice questions.\n\n\n\n\n\n\njspsych\nsurvey\ntext\n\n\nShows a prompt with a text box. The subject writes a response and then submits by clicking a button.\n\n\n\n\n\n\njspsych\ntext\n\n\nShows HTML-formatted text on the screen.\n\n\n\n\n\n\njspsych\nvisual\nsearch\ncircle\n\n\nA customizable visual-search task modelled after \nWang, Cavanagh, \n Green (1994)\n. The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point.\n\n\n\n\n\n\njspsych\nvsl\nanimate\nocclusion\n\n\nA visual statistical learning paradigm based on \nFiser \n Aslin (2002)\n. A sequence of stimuli are shown in an oscillatory motion. An occluding rectangle is in the center of the display, and the stimuli change when they are behind the rectangle.\n\n\n\n\n\n\njspsych\nvsl\ngrid\nscene\n\n\nA visual statistical learning paradigm based on \nFiser \n Aslin (2001)\n. A scene made up of individual stimuli arranged in a grid is shown. This plugin can also generate the HTML code to render the stimuli for use in other plugins.\n\n\n\n\n\n\njspsych\nxab\n\n\nA two-alternative forced choice task. A target (X) is shown, followed by a brief gap, and then two choices (A \n B) are displayed. The subject must pick whichever one matches X (matches is defined however the experimenter wishes; it could be a literal match, or it could be a match on some particular property).", 
            "title": "Overview"
        }, 
        {
            "location": "/plugins/overview/#plugins", 
            "text": "In jsPsych, plugins define the kinds of tasks that subjects perform in experiments. Some plugins define very general tasks, like displaying instructions or displaying a visual stimulus and getting a keyboard response. Other plugins are more specific, displaying particular kinds of interactive stimuli, or running a specific version of particular kind of task. Creating an experiment with jsPsych involves figuring out which plugins are needed for the kinds of tasks you want to have your subjects perform.  Plugins provide a structure for a particular task, but often allow for significant customization and flexibility. For example, the  jspsych-single-stim  plugin defines a simple structure for showing a visual stimulus and collecting a keyboard response. You can specify the what the stimulus is, what keys the subject is allowed to press, and how long the stimulus should be on the screen, how long the subject has to respond, and so on. Many of these content options have reasonable default values; even though the  jspsych-single-stim  plugin has many different options, you only  need  to specify the stimulus in order to use it. Each plugin has its own documentation page, which describes what the plugin does and what options are available.", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/overview/#using-a-plugin", 
            "text": "To use a plugin, you'll need to load the plugin's JavaScript file on your experiment page:  head  script src= jspsych/plugins/jspsych-single-stim.js  type= text/javascript /script  /head   Once a plugin is loaded, you can define a trial that uses that plugin. The following JavaScript code defines a trial using the  jspsych-single-stim  plugin to display an image file ('images/happy_face.jpg'). This trial uses the default values for valid keys, length of display, and other parameters. You could override these values by adding them to the object.  var single_stim_trial = {\n    type: 'single-stim',\n    stimulus: 'images/happy_face.jpg'\n}  Here's an exampe of overriding the default value for  timing_post_trial :  var single_stim_trial = {\n    type: 'single-stim',\n    stimulus: 'images/happy_face.jpg',\n    timing_post_trial: 2000\n}", 
            "title": "Using a plugin"
        }, 
        {
            "location": "/plugins/overview/#parameters-available-in-all-plugins", 
            "text": "Each plugin specifies its own set of parameters. Check the documentation for a plugin to see what parameters are available and what they do.  In addition, there is a set of parameters that can be specified for any plugin.     Parameter  Type  Default Value  Description      timing_post_trial  numeric  1000  Sets the time, in milliseconds, between the current trial and the next trial.    on_finish  function  undefined  A callback function to execute when the trial finishes. See  this page  for more details.    data  object  undefined  An object containing additional data to store for the trial. See  this page  for more details.    display_element  jQuery DOM selection  Change the target display at the trial level by specifying a new target for content.", 
            "title": "Parameters available in all plugins"
        }, 
        {
            "location": "/plugins/overview/#data-collected-by-plugins", 
            "text": "Each plugin defines what data is collected on the trial. The documentation for each plugin specifies what data is collected by that plugin.  In addition to the data collected by a plugin, there is a default set of data that is collected on every trial. The collected data are:     Name  Type  Value      trial_type  string  The name of the plugin used to run the trial.    trial_index  numeric  The index of the current trial across the whole experiment.    time_elapsed  numeric  The number of milliseconds since the start of the experiment when the trial ended.    internal_node_id  string  A string identifier for the current TimelineNode.", 
            "title": "Data collected by plugins"
        }, 
        {
            "location": "/plugins/overview/#list-of-available-plugins", 
            "text": "This table is a description of all plugins that are currently bundled with jsPsych. Click on the name of a plugin to view its documentation page.     Plugin  Description      jspsych animation  Shows a sequence of images at a specified frame rate. Records key presses (including timing information) made by the subject while they are viewing the animation.    jspsych button response  Present a stimulus and collect a response via the subject clicking a button. The button can be customized extensively (e.g., to use images in place of buttons).    jspsych call function  Executes an arbitrary function call. Doesn't display anything to the subject, and the subject is usually unaware that this plugin has even executed. It's useful for performing tasks at specified times in the experiment, such as saving data.    jspsych categorize  The subject responds to a stimulus using the keyboard and can be given feedback about the correctness of their response.    jspsych categorize animation  A mash-up of the animation and categorize plugin. The subject responds to an animation and can be given feedback about their response.    jspsych free sort  Displays a set of images on the screen in random locations. Subjects can click and drag the images to move them around the screen. Records all the moves made by the subject, so the sequence of moves can be recovered from the data.    jspsych html  Displays an external HTML page (such as a consent form) and lets the subject respond by clicking a button or pressing a key. Plugin can validate their response, which is useful for making sure that a subject has granted consent before starting the experiment.    jspsych instructions  For displaying instructions to the subject.    jspsych multi stim multi response  A more generalized version of the single-stim plugin. Can display multiple stimuli in a single trial, and collect multiple responses in a single trial.    jspsych palmer  Shows grid-like stimuli inspired by Stephen Palmer's work. The stimuli are editable: subjects can add and subtract parts interactively. Also contains a method for generating the HTML code to render the stimuli, allowing them to be used in other plugins.    jspsych reconstruction  The subject interacts with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.    jspsych same different  A same-different judgment task. A stimulus is shown, followed by a brief gap, and then another stimulus is shown. The subject indicates whether the stimuli are the same or different.    jspsych similarity  Two stimuli are shown sequentially, and the subject indicates how similar they are by dragging a slider object.    jspsych single audio  A basic plugin for playing an audio stimulus and getting a keyboard response.    jspsych single stim  A basic plugin for displaying a stimulus and getting a keyboard response.    jspsych survey likert  Displays likert-style questions.    jspsych survey multi choice  Displays multiple choice questions.    jspsych survey text  Shows a prompt with a text box. The subject writes a response and then submits by clicking a button.    jspsych text  Shows HTML-formatted text on the screen.    jspsych visual search circle  A customizable visual-search task modelled after  Wang, Cavanagh,   Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point.    jspsych vsl animate occlusion  A visual statistical learning paradigm based on  Fiser   Aslin (2002) . A sequence of stimuli are shown in an oscillatory motion. An occluding rectangle is in the center of the display, and the stimuli change when they are behind the rectangle.    jspsych vsl grid scene  A visual statistical learning paradigm based on  Fiser   Aslin (2001) . A scene made up of individual stimuli arranged in a grid is shown. This plugin can also generate the HTML code to render the stimuli for use in other plugins.    jspsych xab  A two-alternative forced choice task. A target (X) is shown, followed by a brief gap, and then two choices (A   B) are displayed. The subject must pick whichever one matches X (matches is defined however the experimenter wishes; it could be a literal match, or it could be a match on some particular property).", 
            "title": "List of available plugins"
        }, 
        {
            "location": "/plugins/creating-a-plugin/", 
            "text": "Creating a new plugin\n\n\nCreating new plugins is the way to add new kinds of tasks to jsPsych. A task can be virtually any kind of activity. If it can be implemented in JavaScript, then it almost certainly can be turned into a plugin.\n\n\nWhat's in a plugin file?\n\n\nPlugin files follow a specific template. Adherence to the template is what allows jsPsych to run a plugin without knowing anything about what the plugin is doing. What makes plugins so flexible is that the template imposes very few requirements on the code. Here's what an empty plugin template looks like:\n\n\njsPsych.plugins['plugin-name'] = (function(){\n\n  var plugin = {};\n\n  plugin.trial = function(display_element, trial){\n    jsPsych.finishTrial();\n  }\n\n  return plugin;\n\n})();\n\n\n\n\nThis plugin will work! It defines a plugin called 'plugin-name', and it does absolutely nothing. However, it won't break the experiment, and jsPsych will understand that this is a valid plugin.\n\n\nLet's examine it in more detail.\n\n\nThe overall structure of the plugin is defined using a module JavaScript design pattern. This pattern uses a technique called an anonymous closure. This is why the first line has \n(function(){\n and the last line is \n})();\n. The details aren't important, but if you want to learn more about it, \nthis is a nice overview\n. The reason this pattern is useful is because it allows for persistent state and private scope. In other words, the plugin is isolated can't be altered by other plugins.\n\n\nThe module, created by the \n(function(){\n  \n})();\n expressions, contains an object called \nplugin\n that has two properties, \ncreate\n and \ntrial\n. Both properties define functions. The \nplugin\n object is returned at the end of the module, which is what assigns the defined properties of \nplugin\n to \njsPsych['plugin-name']\n.\n\n\nplugin.trial\n\n\nThe \ntrial\n method is responsible for running a single trial. There are two parameters that are passed into the trial method. The first, \ndisplay_element\n, is the DOM element where jsPsych content is being rendered. This parameter needs to be a jQuery object containing a collection of one DOM element. Generally, you don't need to worry about this parameter being in the correct format, and can assume that it is a jQuery object that you can use various jQuery methods on. The second, \ntrial\n, is an object containing all of the parameters specified in the corresponding TimelineNode.\n\n\nThe only requirement for the \ntrial\n method is that it calls \njsPsych.finishTrial()\n when it is done. This is how jsPsych knows to advance to the next trial in the experiment (or end the experiment if it is the last trial). The plugin can do whatever it needs to do before that point.\n\n\nOf course, there are other things that you will probably want the plugin to do besides just end. Here are some examples:\n\n\nChange the content of the display\n\n\nThere are a few ways to change the content of the display. The \ndisplay_element\n parameter of the trial method contains the jQuery representation of the DOM element for displaying content, so you can use various jQuery methods for manipulating the content. Two common ones are \nappend\n and \nhtml\n.\n\n\ndisplay_element.append('\np\nThis is the first paragraph\n/p\n');\ndisplay_element.append('\np\nThis is the second paragraph\n/p\n');\n\n\n\n\nappend\n will \nadd\n content to the display. The above calls would result in two paragraphs being rendered.\n\n\ndisplay_element.html('\np\nThis is the first paragraph\n/p\n');\ndisplay_element.html('\np\nThis paragraph will replace the first one\n/p\n');\n\n\n\n\nhtml\n will \nreplace\n the content on the display. The above calls will result in only the second paragraph appearing on the screen. It is often appropriate to use the \nhtml\n method to clear the display at the end of a trial:\n\n\n// clear the display\ndisplay_element.html('');\n\n\n\n\nWrite data\n\n\nPlugins exist to collect data, so saving data is obviously a crucial thing to do! You can pass an object of data as the parameter to \njsPsych.finishTrial()\n:\n\n\nvar data = {\n  correct: true,\n  rt: 350\n}\n\njsPsych.finishTrial(data)\n\n\n\n\nThe data recorded will be that \ncorrect\n is \ntrue\n and that \nrt\n is \n350\n. Additional data for the trial will also be collected automatically by the jsPsych library.\n\n\nThe plugin template\n\n\nAn empty plugin template is included in the \nplugins/template\n folder.", 
            "title": "Creating a New Plugin"
        }, 
        {
            "location": "/plugins/creating-a-plugin/#creating-a-new-plugin", 
            "text": "Creating new plugins is the way to add new kinds of tasks to jsPsych. A task can be virtually any kind of activity. If it can be implemented in JavaScript, then it almost certainly can be turned into a plugin.", 
            "title": "Creating a new plugin"
        }, 
        {
            "location": "/plugins/creating-a-plugin/#whats-in-a-plugin-file", 
            "text": "Plugin files follow a specific template. Adherence to the template is what allows jsPsych to run a plugin without knowing anything about what the plugin is doing. What makes plugins so flexible is that the template imposes very few requirements on the code. Here's what an empty plugin template looks like:  jsPsych.plugins['plugin-name'] = (function(){\n\n  var plugin = {};\n\n  plugin.trial = function(display_element, trial){\n    jsPsych.finishTrial();\n  }\n\n  return plugin;\n\n})();  This plugin will work! It defines a plugin called 'plugin-name', and it does absolutely nothing. However, it won't break the experiment, and jsPsych will understand that this is a valid plugin.  Let's examine it in more detail.  The overall structure of the plugin is defined using a module JavaScript design pattern. This pattern uses a technique called an anonymous closure. This is why the first line has  (function(){  and the last line is  })(); . The details aren't important, but if you want to learn more about it,  this is a nice overview . The reason this pattern is useful is because it allows for persistent state and private scope. In other words, the plugin is isolated can't be altered by other plugins.  The module, created by the  (function(){    })();  expressions, contains an object called  plugin  that has two properties,  create  and  trial . Both properties define functions. The  plugin  object is returned at the end of the module, which is what assigns the defined properties of  plugin  to  jsPsych['plugin-name'] .  plugin.trial  The  trial  method is responsible for running a single trial. There are two parameters that are passed into the trial method. The first,  display_element , is the DOM element where jsPsych content is being rendered. This parameter needs to be a jQuery object containing a collection of one DOM element. Generally, you don't need to worry about this parameter being in the correct format, and can assume that it is a jQuery object that you can use various jQuery methods on. The second,  trial , is an object containing all of the parameters specified in the corresponding TimelineNode.  The only requirement for the  trial  method is that it calls  jsPsych.finishTrial()  when it is done. This is how jsPsych knows to advance to the next trial in the experiment (or end the experiment if it is the last trial). The plugin can do whatever it needs to do before that point.  Of course, there are other things that you will probably want the plugin to do besides just end. Here are some examples:  Change the content of the display  There are a few ways to change the content of the display. The  display_element  parameter of the trial method contains the jQuery representation of the DOM element for displaying content, so you can use various jQuery methods for manipulating the content. Two common ones are  append  and  html .  display_element.append(' p This is the first paragraph /p ');\ndisplay_element.append(' p This is the second paragraph /p ');  append  will  add  content to the display. The above calls would result in two paragraphs being rendered.  display_element.html(' p This is the first paragraph /p ');\ndisplay_element.html(' p This paragraph will replace the first one /p ');  html  will  replace  the content on the display. The above calls will result in only the second paragraph appearing on the screen. It is often appropriate to use the  html  method to clear the display at the end of a trial:  // clear the display\ndisplay_element.html('');  Write data  Plugins exist to collect data, so saving data is obviously a crucial thing to do! You can pass an object of data as the parameter to  jsPsych.finishTrial() :  var data = {\n  correct: true,\n  rt: 350\n}\n\njsPsych.finishTrial(data)  The data recorded will be that  correct  is  true  and that  rt  is  350 . Additional data for the trial will also be collected automatically by the jsPsych library.", 
            "title": "What's in a plugin file?"
        }, 
        {
            "location": "/plugins/creating-a-plugin/#the-plugin-template", 
            "text": "An empty plugin template is included in the  plugins/template  folder.", 
            "title": "The plugin template"
        }, 
        {
            "location": "/plugins/jspsych-animation/", 
            "text": "jspsych-animation\n\n\nThis plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times. The subject is free to respond at any point during the animation, and the time of the response is recorded.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a path to an image file.\n\n\n\n\n\n\nframe_time\n\n\nnumeric\n\n\n250\n\n\nHow long to display each image (in milliseconds).\n\n\n\n\n\n\nframe_isi\n\n\nnumeric\n\n\n0\n\n\nIf greater than 0, then a gap will be shown between each image in the sequence. This parameter specifies the length of the gap.\n\n\n\n\n\n\nsequence_reps\n\n\nnumeric\n\n\n1\n\n\nHow many times to show the entire sequence. There will be no gap (other than the gap specified by \nframe_isi\n) between repetitions.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\n[ ]\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n). The default value of an empty array means that all keys will be accepted as valid responses.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nanimation_sequence\n\n\nJSON string\n\n\nAn array, encoded in JSON string format. Each element of the array is an object that represents a stimulus in the animation sequence. Each object has a \nstimulus\n property, which is the image that was displayed, and a \ntime\n property, which is the time in ms, measured from when the sequence began, that the stimulus was displayed.\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nAn array, encoded in JSON format. Each element of the array is an object representing a response given by the subject. Each object has a \nstimulus\n property, indicating which image was displayed when the key was pressed, an \nrt\n property, indicating the time of the key press relative to the start of the animation, and a \nkey_press\n property, indicating which key was pressed.\n\n\n\n\n\n\n\n\nExamples\n\n\nDisplaying a single sequence multiple times\n\n\n// declare variable to hold animation sequence\nvar animation_sequence = [\nimg/face_1.jpg\n, \nimg/face_2.jpg\n, \nimg/face_3.jpg\n, \nimg/face_4.jpg\n, \nimg/face_3.jpg\n, \nimg/face_2.jpg\n];\n\nvar animation_trial = {\n    type: 'animation',\n    stimuli: animation_sequence,\n    sequence_reps: 3\n};\n\n\n\n\nSpecifying two trials with different sequences\n\n\n// declare variables to hold animation sequences\nvar animation_sequence_1 = [\nimg/face_1.jpg\n, \nimg/face_2.jpg\n, \nimg/face_3.jpg\n, \nimg/face_4.jpg\n, \nimg/face_3.jpg\n, \nimg/face_2.jpg\n];\nvar animation_sequence_2 = [\nimg/face_3.jpg\n, \nimg/face_2.jpg\n, \nimg/face_4.jpg\n, \nimg/face_1.jpg\n];\n\n// create animation block for jspsych\nvar animation_block = {\n    type: 'animation',\n    stimuli: [animation_sequence_1, animation_sequence_2],\n    sequence_reps: 3\n};", 
            "title": "jspsych-animation"
        }, 
        {
            "location": "/plugins/jspsych-animation/#jspsych-animation", 
            "text": "This plugin displays a sequence of images at a fixed frame rate. The sequence can be looped a specified number of times. The subject is free to respond at any point during the animation, and the time of the response is recorded.", 
            "title": "jspsych-animation"
        }, 
        {
            "location": "/plugins/jspsych-animation/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of the array is a path to an image file.    frame_time  numeric  250  How long to display each image (in milliseconds).    frame_isi  numeric  0  If greater than 0, then a gap will be shown between each image in the sequence. This parameter specifies the length of the gap.    sequence_reps  numeric  1  How many times to show the entire sequence. There will be no gap (other than the gap specified by  frame_isi ) between repetitions.    choices  array  [ ]  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ). The default value of an empty array means that all keys will be accepted as valid responses.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-animation/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      animation_sequence  JSON string  An array, encoded in JSON string format. Each element of the array is an object that represents a stimulus in the animation sequence. Each object has a  stimulus  property, which is the image that was displayed, and a  time  property, which is the time in ms, measured from when the sequence began, that the stimulus was displayed.    responses  JSON string  An array, encoded in JSON format. Each element of the array is an object representing a response given by the subject. Each object has a  stimulus  property, indicating which image was displayed when the key was pressed, an  rt  property, indicating the time of the key press relative to the start of the animation, and a  key_press  property, indicating which key was pressed.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-animation/#examples", 
            "text": "Displaying a single sequence multiple times  // declare variable to hold animation sequence\nvar animation_sequence = [ img/face_1.jpg ,  img/face_2.jpg ,  img/face_3.jpg ,  img/face_4.jpg ,  img/face_3.jpg ,  img/face_2.jpg ];\n\nvar animation_trial = {\n    type: 'animation',\n    stimuli: animation_sequence,\n    sequence_reps: 3\n};  Specifying two trials with different sequences  // declare variables to hold animation sequences\nvar animation_sequence_1 = [ img/face_1.jpg ,  img/face_2.jpg ,  img/face_3.jpg ,  img/face_4.jpg ,  img/face_3.jpg ,  img/face_2.jpg ];\nvar animation_sequence_2 = [ img/face_3.jpg ,  img/face_2.jpg ,  img/face_4.jpg ,  img/face_1.jpg ];\n\n// create animation block for jspsych\nvar animation_block = {\n    type: 'animation',\n    stimuli: [animation_sequence_1, animation_sequence_2],\n    sequence_reps: 3\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-button-response/", 
            "text": "jspsych-button-response\n\n\nThis plugin displays an image or HTML-formatted content and allows the subject to respond by pressing a button on the screen. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.\n\n\nBecause this plugin can display any HTML content, it is quite versatile. It can be used for any situation in which the response generated by the subject is a single button press.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe stimulus to display. Either HTML-formatted, or the path to an image.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf \nstimulus\n is an HTML-formatted string, this parameter needs to be set to \ntrue\n.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\n[ ]\n\n\nThis array contains the labels for the buttons.\n\n\n\n\n\n\nbutton_html\n\n\nstring or array\n\n\n'\nbutton class=\"jspsych-btn\"\n%choice%\n/button\n'\n\n\nA template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string \n%choice%\n will be changed to the corresponding element of the \nchoices\n array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the \nchoices\n array and this array must have the same length. The HTML from position 0 in the \nbutton_html\n array will be used to create the button for element 0 in the \nchoices\n array, and so on.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\ntiming_stim\n\n\nnumeric\n\n\n-1\n\n\nHow long to show the stimulus for in milliseconds. If the value is -1, then the stimulus will be shown until the subject makes a response.\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\n-1\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the the subject's response will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nbutton_pressed\n\n\nnumeric\n\n\nIndicates which button the subject pressed. The first button in the \nchoices\n array is 0, the second is 1, and so on.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\n\nDisplaying image until subject gives a response\n\n\nvar trial = {\n    type: 'button-response',\n    stimulus: 'img/happy_face_1.jpg',\n    choices: ['Happy', 'Sad'],\n    prompt: \np class='center-content'\nWhat emotion is this person showing?\n/p\n\n};", 
            "title": "jspsych-button-response"
        }, 
        {
            "location": "/plugins/jspsych-button-response/#jspsych-button-response", 
            "text": "This plugin displays an image or HTML-formatted content and allows the subject to respond by pressing a button on the screen. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.  Because this plugin can display any HTML content, it is quite versatile. It can be used for any situation in which the response generated by the subject is a single button press.", 
            "title": "jspsych-button-response"
        }, 
        {
            "location": "/plugins/jspsych-button-response/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The stimulus to display. Either HTML-formatted, or the path to an image.    is_html  boolean  false  If  stimulus  is an HTML-formatted string, this parameter needs to be set to  true .    choices  array  [ ]  This array contains the labels for the buttons.    button_html  string or array  ' button class=\"jspsych-btn\" %choice% /button '  A template of HTML for generating the button elements. You can override this to create customized buttons of various kinds. The string  %choice%  will be changed to the corresponding element of the  choices  array. You may also specify an array of strings, if you need different HTML to render for each button. If you do specify an array, the  choices  array and this array must have the same length. The HTML from position 0 in the  button_html  array will be used to create the button for element 0 in the  choices  array, and so on.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    timing_stim  numeric  -1  How long to show the stimulus for in milliseconds. If the value is -1, then the stimulus will be shown until the subject makes a response.    timing_response  numeric  -1  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the the subject's response will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-button-response/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    button_pressed  numeric  Indicates which button the subject pressed. The first button in the  choices  array is 0, the second is 1, and so on.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-button-response/#examples", 
            "text": "Displaying image until subject gives a response  var trial = {\n    type: 'button-response',\n    stimulus: 'img/happy_face_1.jpg',\n    choices: ['Happy', 'Sad'],\n    prompt:  p class='center-content' What emotion is this person showing? /p \n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-call-function/", 
            "text": "jspsych-call-function\n\n\nThis plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.\n\n\nThe function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunc\n\n\nfunction\n\n\nundefined\n\n\nThe function to call.\n\n\n\n\n\n\ntiming_post_trial\n\n\nnumeric\n\n\n0\n\n\nUnlike other plugins where the default value of this parameter is 1,000ms, the default here is 0.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nany\n\n\nThe return value of the called function.\n\n\n\n\n\n\n\n\nExamples\n\n\nCalling a simple function\n\n\n\nvar myfunc = function() {\n    return 'you called?';\n}\n\nvar block = {\n    type: 'call-function',\n    func: myfunc\n}\n\n\n\n\nUsing an anonymous function to pass variables\n\n\n\nvar myfunc = function(data){\n    // data contains all the experiment data so far,\n    // so this function could implement code to write\n    // the data to a database.\n}\n\nvar block = {\n    type: 'call-function',\n    func: function(){ myfunc(jsPsych.data.getData())}\n}", 
            "title": "jspsych-call-function"
        }, 
        {
            "location": "/plugins/jspsych-call-function/#jspsych-call-function", 
            "text": "This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.  The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).", 
            "title": "jspsych-call-function"
        }, 
        {
            "location": "/plugins/jspsych-call-function/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      func  function  undefined  The function to call.    timing_post_trial  numeric  0  Unlike other plugins where the default value of this parameter is 1,000ms, the default here is 0.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-call-function/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      value  any  The return value of the called function.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-call-function/#examples", 
            "text": "Calling a simple function  \nvar myfunc = function() {\n    return 'you called?';\n}\n\nvar block = {\n    type: 'call-function',\n    func: myfunc\n}  Using an anonymous function to pass variables  \nvar myfunc = function(data){\n    // data contains all the experiment data so far,\n    // so this function could implement code to write\n    // the data to a database.\n}\n\nvar block = {\n    type: 'call-function',\n    func: function(){ myfunc(jsPsych.data.getData())}\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-categorize/", 
            "text": "jspsych-categorize\n\n\nThe categorize plugin shows an image or HTML object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe stimulus to display. Either HTML-formatted, or the path to an image.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf \nstimulus\n is an HTML-formatted string, this parameter needs to be set to \ntrue\n.\n\n\n\n\n\n\nkey_answer\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a \nnumeric key code\n indicating the correct response for the corresponding trial. The length of this array should match the \nstimuli\n array.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\nundefined\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n).\n\n\n\n\n\n\ntext_answer\n\n\narray\n\n\n\"\"\n\n\nArray of strings representing a label that is associated with each correct answer. Used in conjunction with the \ncorrect_text\n and \nincorrect_text\n parameters.\n\n\n\n\n\n\ncorrect_text\n\n\nstring\n\n\n\"Correct.\"\n\n\nString to show when the correct answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nincorrect_text\n\n\nstring\n\n\n\"Wrong.\"\n\n\nString to show when the wrong answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\nforce_correct_button_press\n\n\nboolean\n\n\nfalse\n\n\nIf set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial.\n\n\n\n\n\n\nshow_stim_with_feedback\n\n\nboolean\n\n\ntrue\n\n\nIf set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback.\n\n\n\n\n\n\nshow_feedback_on_timeout\n\n\nboolean\n\n\nfalse\n\n\nIf true, then category feedback will be displayed for an incorrect response after a timeout (timing_response is exceeded). If false, then a timeout message will be shown.\n\n\n\n\n\n\ntimeout_message\n\n\nstring\n\n\n\"Please respond faster.\"\n\n\nThe message to show on a timeout non-response.\n\n\n\n\n\n\ntiming_stim\n\n\nnumeric\n\n\n-1\n\n\nHow long to show the stimulus for (milliseconds). If -1, then the stimulus is shown until a response is given.\n\n\n\n\n\n\ntiming_feedback_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the feedback for (milliseconds).\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\n-1\n\n\nThe maximum time allowed for a response. If -1, then the experiment will wait indefinitely for a response.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject got the correct answer, \nfalse\n otherwise.\n\n\n\n\n\n\n\n\nExamples\n\n\nCategorizing HTML content\n\n\nvar categorization_trial = {\n    type: 'categorize',\n    stimulus: '\np\nB\n/p\n',\n    key_answer: 80,\n    text_answer: 'letter',\n    choices: [80, 81],\n    correct_text: \np class='prompt'\nCorrect, this is a %ANS%.\n/p\n,\n    incorrect_text: \np class='prompt'\nIncorrect, this is a %ANS%.\n/p\n,\n    is_html: true,\n    prompt: \np class='prompt'\nPress P for letter. Press Q for number.\n/p\n\n};", 
            "title": "jspsych-categorize"
        }, 
        {
            "location": "/plugins/jspsych-categorize/#jspsych-categorize", 
            "text": "The categorize plugin shows an image or HTML object on the screen. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.", 
            "title": "jspsych-categorize"
        }, 
        {
            "location": "/plugins/jspsych-categorize/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The stimulus to display. Either HTML-formatted, or the path to an image.    is_html  boolean  false  If  stimulus  is an HTML-formatted string, this parameter needs to be set to  true .    key_answer  array  undefined  Each element of the array is a  numeric key code  indicating the correct response for the corresponding trial. The length of this array should match the  stimuli  array.    choices  array  undefined  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ).    text_answer  array  \"\"  Array of strings representing a label that is associated with each correct answer. Used in conjunction with the  correct_text  and  incorrect_text  parameters.    correct_text  string  \"Correct.\"  String to show when the correct answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    incorrect_text  string  \"Wrong.\"  String to show when the wrong answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    force_correct_button_press  boolean  false  If set to true, then the subject must press the correct response key after feedback is given in order to advance to the next trial.    show_stim_with_feedback  boolean  true  If set to true, then the stimulus will be shown during feedback. If false, then only the text feedback will display during feedback.    show_feedback_on_timeout  boolean  false  If true, then category feedback will be displayed for an incorrect response after a timeout (timing_response is exceeded). If false, then a timeout message will be shown.    timeout_message  string  \"Please respond faster.\"  The message to show on a timeout non-response.    timing_stim  numeric  -1  How long to show the stimulus for (milliseconds). If -1, then the stimulus is shown until a response is given.    timing_feedback_duration  numeric  2000  How long to show the feedback for (milliseconds).    timing_response  numeric  -1  The maximum time allowed for a response. If -1, then the experiment will wait indefinitely for a response.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-categorize/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject got the correct answer,  false  otherwise.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-categorize/#examples", 
            "text": "Categorizing HTML content  var categorization_trial = {\n    type: 'categorize',\n    stimulus: ' p B /p ',\n    key_answer: 80,\n    text_answer: 'letter',\n    choices: [80, 81],\n    correct_text:  p class='prompt' Correct, this is a %ANS%. /p ,\n    incorrect_text:  p class='prompt' Incorrect, this is a %ANS%. /p ,\n    is_html: true,\n    prompt:  p class='prompt' Press P for letter. Press Q for number. /p \n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-categorize-animation/", 
            "text": "jspsych-categorize-animation\n\n\nThe categorize animation plugin shows a sequence of images at a specified frame rate. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a path to an image file.\n\n\n\n\n\n\nkey_answer\n\n\nnumeric\n\n\nundefined\n\n\nA \nnumeric key code\n indicating the correct response.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\nundefined\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n).\n\n\n\n\n\n\ntext_answer\n\n\nstring\n\n\n\"\"\n\n\nA text label that describes the correct answer. Used in conjunction with the \ncorrect_text\n and \nincorrect_text\n parameters.\n\n\n\n\n\n\ncorrect_text\n\n\nstring\n\n\n\"Correct.\"\n\n\nString to show when the correct answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nincorrect_text\n\n\nstring\n\n\n\"Wrong.\"\n\n\nString to show when the wrong answer is given. Can contain HTML formatting. The special string \n%ANS%\n can be used within the string. If present, the plugin will put the \ntext_answer\n for the trial in place of the %ANS% string (see example below).\n\n\n\n\n\n\nframe_time\n\n\nnumeric\n\n\n250\n\n\nHow long to display each image (in milliseconds).\n\n\n\n\n\n\nsequence_reps\n\n\nnumeric\n\n\n1\n\n\nHow many times to show the entire sequence.\n\n\n\n\n\n\nallow_response_before_complete\n\n\nboolean\n\n\nfalse\n\n\nIf true, the subject can respond before the animation sequence finishes.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\ntiming_feedback_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the feedback (milliseconds).\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe first image in the animation sequence for this trial\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject got the correct answer, \nfalse\n otherwise.\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic example\n\n\nvar animation_trial = {\n  type: 'categorize-animation',\n  stimuli: [\nimg/face_3.jpg\n, \nimg/face_2.jpg\n, \nimg/face_4.jpg\n, \nimg/face_1.jpg\n],\n    choices: [80, 81], // 80 = 'p', 81 = 'q'\n    key_answer: 81, // correct answer is 'q' for both trials\n};\n\n\n\n\nGiving feedback with \n%ANS%\n string\n\n\nvar animation_trial = {\n  type: 'categorize-animation',\n  stimuli: [\nimg/face_3.jpg\n, \nimg/face_2.jpg\n, \nimg/face_4.jpg\n, \nimg/face_1.jpg\n],\n  choices: [80, 81], // 80 = 'p', 81 = 'q'\n  key_answer: 81, // correct answer is 'q' for both trials\n    text_answer: 'Dax', // the label for the sequence is 'Dax'\n    correct_text: 'Correct! This was a %ANS%.',\n    incorrect_text: 'Incorrect. This was a %ANS%.'\n};", 
            "title": "jspsych-categorize-animation"
        }, 
        {
            "location": "/plugins/jspsych-categorize-animation/#jspsych-categorize-animation", 
            "text": "The categorize animation plugin shows a sequence of images at a specified frame rate. The subject responds by pressing a key. Feedback indicating the correctness of the response is given.", 
            "title": "jspsych-categorize-animation"
        }, 
        {
            "location": "/plugins/jspsych-categorize-animation/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of the array is a path to an image file.    key_answer  numeric  undefined  A  numeric key code  indicating the correct response.    choices  array  undefined  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ).    text_answer  string  \"\"  A text label that describes the correct answer. Used in conjunction with the  correct_text  and  incorrect_text  parameters.    correct_text  string  \"Correct.\"  String to show when the correct answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    incorrect_text  string  \"Wrong.\"  String to show when the wrong answer is given. Can contain HTML formatting. The special string  %ANS%  can be used within the string. If present, the plugin will put the  text_answer  for the trial in place of the %ANS% string (see example below).    frame_time  numeric  250  How long to display each image (in milliseconds).    sequence_reps  numeric  1  How many times to show the entire sequence.    allow_response_before_complete  boolean  false  If true, the subject can respond before the animation sequence finishes.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    timing_feedback_duration  numeric  2000  How long to show the feedback (milliseconds).", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-categorize-animation/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  The first image in the animation sequence for this trial    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject got the correct answer,  false  otherwise.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-categorize-animation/#examples", 
            "text": "Basic example  var animation_trial = {\n  type: 'categorize-animation',\n  stimuli: [ img/face_3.jpg ,  img/face_2.jpg ,  img/face_4.jpg ,  img/face_1.jpg ],\n    choices: [80, 81], // 80 = 'p', 81 = 'q'\n    key_answer: 81, // correct answer is 'q' for both trials\n};  Giving feedback with  %ANS%  string  var animation_trial = {\n  type: 'categorize-animation',\n  stimuli: [ img/face_3.jpg ,  img/face_2.jpg ,  img/face_4.jpg ,  img/face_1.jpg ],\n  choices: [80, 81], // 80 = 'p', 81 = 'q'\n  key_answer: 81, // correct answer is 'q' for both trials\n    text_answer: 'Dax', // the label for the sequence is 'Dax'\n    correct_text: 'Correct! This was a %ANS%.',\n    incorrect_text: 'Incorrect. This was a %ANS%.'\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-free-sort/", 
            "text": "jspsych-free-sort plugin\n\n\nThe free-sort plugin displays a collection of images on the screen that the subject can interact with by clicking and dragging. All of the moves that the subject performs are recorded.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of this array is an image path.\n\n\n\n\n\n\nstim_height\n\n\nnumeric\n\n\n100\n\n\nThe height of the images in pixels.\n\n\n\n\n\n\nstim_width\n\n\nnumeric\n\n\n100\n\n\nThe width of the images in pixels.\n\n\n\n\n\n\nsort_area_height\n\n\nnumeric\n\n\n800\n\n\nThe height of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.\n\n\n\n\n\n\nsort_area_width\n\n\nnumeric\n\n\n800\n\n\nThe width of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\nprompt_location\n\n\nstring\n\n\n\"above\"\n\n\nIndicates whether to show the prompt \n\"above\"\n or \n\"below\"\n the sorting area.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ninit_locations\n\n\nJSON string\n\n\nA JSON-encoded object representing the initial locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.\n\n\n\n\n\n\nmoves\n\n\nJSON string\n\n\nA JSON-encoded object representing all of the moves the participant made when sorting. The object is an array with each element representing a move. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location after the move.\n\n\n\n\n\n\nfinal_locations\n\n\nJSON string\n\n\nA JSON-encoded object representing the final locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to finish all sorting.\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic example\n\n\nvar sorting_stimuli = [];\nfor (var i = 1; i \n= 12; i++) {\n    sorting_stimuli.push(\nimg/cell_img_\n + i + \n.jpg\n);\n}\n\nvar sort_trial = {\n    type: 'free-sort',\n    stimuli: sorting_stimuli,\n    prompt: \np\nClick and drag the images below to sort them so that similar items are close together.\n/p\n\n};", 
            "title": "jspsych-free-sort"
        }, 
        {
            "location": "/plugins/jspsych-free-sort/#jspsych-free-sort-plugin", 
            "text": "The free-sort plugin displays a collection of images on the screen that the subject can interact with by clicking and dragging. All of the moves that the subject performs are recorded.", 
            "title": "jspsych-free-sort plugin"
        }, 
        {
            "location": "/plugins/jspsych-free-sort/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of this array is an image path.    stim_height  numeric  100  The height of the images in pixels.    stim_width  numeric  100  The width of the images in pixels.    sort_area_height  numeric  800  The height of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.    sort_area_width  numeric  800  The width of the container that subjects can move the stimuli in. Stimuli will be constrained to this area.    prompt  string  \"\"  This string can contain HTML markup. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    prompt_location  string  \"above\"  Indicates whether to show the prompt  \"above\"  or  \"below\"  the sorting area.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-free-sort/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      init_locations  JSON string  A JSON-encoded object representing the initial locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.    moves  JSON string  A JSON-encoded object representing all of the moves the participant made when sorting. The object is an array with each element representing a move. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location after the move.    final_locations  JSON string  A JSON-encoded object representing the final locations of all the stimuli in the sorting area. The object is an array with one element per stimulus. Each element in the array has a \"src\", \"x\", and \"y\" value. \"src\" is the image path, and \"x\" and \"y\" are the object location.    rt  numeric  The response time in milliseconds for the subject to finish all sorting.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-free-sort/#examples", 
            "text": "Basic example  var sorting_stimuli = [];\nfor (var i = 1; i  = 12; i++) {\n    sorting_stimuli.push( img/cell_img_  + i +  .jpg );\n}\n\nvar sort_trial = {\n    type: 'free-sort',\n    stimuli: sorting_stimuli,\n    prompt:  p Click and drag the images below to sort them so that similar items are close together. /p \n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-html/", 
            "text": "jspsych-html plugin\n\n\nThe HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nundefined\n\n\nThe URL of the page to display.\n\n\n\n\n\n\ncont_key\n\n\nnumeric\n\n\nnull\n\n\nThe key code a key to advance to the next trial. If left as null, then the subject will not be able to advance trials using the keyboard.\n\n\n\n\n\n\ncont_btn\n\n\nstring\n\n\nnull\n\n\nThe ID of a clickable element on the page. When the element is clicked, the trial will advance.\n\n\n\n\n\n\ncheck_fn\n\n\nfunction\n\n\nfunction(){ return true; }\n\n\nThis function is called with the jsPsych \ndisplay_element\n as the only argument when the subject attempts to advance the trial. The trial will only advance if the function return \ntrue\n. This can be used to verify that the subject has correctly filled out a form before continuing, for example.\n\n\n\n\n\n\nforce_refresh\n\n\nboolean\n\n\nfalse\n\n\nIf \ntrue\n, then the plugin will avoid using the cached version of the HTML page to load if one exists.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe URL of the page.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to finish the trial.\n\n\n\n\n\n\n\n\nExamples\n\n\nLoading a consent form\n\n\nThis content would be in a file called 'external_page.html'\n\n\ndiv id=\nconsent\n\n  \np\n\n    This is a demo experiment, with this minimal consent form being loaded\n    as an external html document. To continue, click the checkbox below\n    and hit \nStart Experiment\n.\n  \n/p\n\n  \np\n\n    \ninput type=\ncheckbox\n id=\nconsent_checkbox\n /\n\n    I agree to take part in this study.\n  \n/p\n\n  \nbutton type=\nbutton\n id=\nstart\nStart Experiment\n/button\n\n\n/div\n\n\n\n\n\njsPsych code to load above page.\n\n\n// sample function that might be used to check if a subject has given\n// consent to participate.\nvar check_consent = function(elem) {\n  if ($('#consent_checkbox').is(':checked')) {\n    return true;\n  }\n  else {\n    alert(\nIf you wish to participate, you must check the box next to the statement 'I agree to participate in this study.'\n);\n    return false;\n  }\n  return false;\n};\n\n\n// declare the block.\nvar trial = {\n  type:'html',\n  url: \nexternal_page.html\n,\n  cont_btn: \nstart\n,\n  check_fn: check_consent\n};", 
            "title": "jspsych-html"
        }, 
        {
            "location": "/plugins/jspsych-html/#jspsych-html-plugin", 
            "text": "The HTML plugin displays an external HTML document (often a consent form). Either a keyboard response or a button press can be used to continue to the next trial. It allows the experimenter to check if conditions are met (such as indicating informed consent) before continuing.", 
            "title": "jspsych-html plugin"
        }, 
        {
            "location": "/plugins/jspsych-html/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      url  string  undefined  The URL of the page to display.    cont_key  numeric  null  The key code a key to advance to the next trial. If left as null, then the subject will not be able to advance trials using the keyboard.    cont_btn  string  null  The ID of a clickable element on the page. When the element is clicked, the trial will advance.    check_fn  function  function(){ return true; }  This function is called with the jsPsych  display_element  as the only argument when the subject attempts to advance the trial. The trial will only advance if the function return  true . This can be used to verify that the subject has correctly filled out a form before continuing, for example.    force_refresh  boolean  false  If  true , then the plugin will avoid using the cached version of the HTML page to load if one exists.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-html/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      url  string  The URL of the page.    rt  numeric  The response time in milliseconds for the subject to finish the trial.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-html/#examples", 
            "text": "Loading a consent form  This content would be in a file called 'external_page.html'  div id= consent \n   p \n    This is a demo experiment, with this minimal consent form being loaded\n    as an external html document. To continue, click the checkbox below\n    and hit  Start Experiment .\n   /p \n   p \n     input type= checkbox  id= consent_checkbox  / \n    I agree to take part in this study.\n   /p \n   button type= button  id= start Start Experiment /button  /div   jsPsych code to load above page.  // sample function that might be used to check if a subject has given\n// consent to participate.\nvar check_consent = function(elem) {\n  if ($('#consent_checkbox').is(':checked')) {\n    return true;\n  }\n  else {\n    alert( If you wish to participate, you must check the box next to the statement 'I agree to participate in this study.' );\n    return false;\n  }\n  return false;\n};\n\n\n// declare the block.\nvar trial = {\n  type:'html',\n  url:  external_page.html ,\n  cont_btn:  start ,\n  check_fn: check_consent\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-instructions/", 
            "text": "jspsych-instructions plugin\n\n\nThis plugin is for showing instructions to the subject. Navigation can be done using the mouse or keyboard.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npages\n\n\narray\n\n\nundefined\n\n\nEach element of the array is the content for a single page. Each page should be an HTML-formatted string.\n\n\n\n\n\n\nkey_forward\n\n\nkey code\n\n\n'rightarrow'\n\n\nThis is the key that the subject can press in order to advance to the next page. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n).\n\n\n\n\n\n\nkey_backward\n\n\nkey code\n\n\n'leftarrow'\n\n\nThis is the key that the subject can press to return to the previous page.\n\n\n\n\n\n\nallow_backward\n\n\nboolean\n\n\ntrue\n\n\nIf true, the subject can return to previous pages of the instructions. If false, they may only advace to the next page.\n\n\n\n\n\n\nallow_keys\n\n\nboolean\n\n\ntrue\n\n\nIf true, the subject can use keyboard keys to navigate the pages. If false, they may not.\n\n\n\n\n\n\nshow_clickable_nav\n\n\nboolean\n\n\nfalse\n\n\nIf true, then a \nPrevious\n and \nNext\n button will be displayed beneath the instructions. Subjects can click the buttons to navigate.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nview_history\n\n\nJSON string\n\n\nA JSON string containing the order of pages the subject viewed (including when the subject returned to previous pages) and the time spent viewing each page.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to view all of the pages.\n\n\n\n\n\n\n\n\nExample\n\n\nShowing simple text instructions\n\n\nvar trial = {\n    type: 'instructions',\n    pages: [\n        'Welcome to the experiment. Click next to begin.',\n        'This is the second page of instructions.',\n        'This is the final page.'\n    ],\n    show_clickable_nav: true\n}\n\n\n\n\nIncluding images\n\n\nvar trial = {\n    type: 'instructions',\n    pages: [\n        'Welcome to the experiment. Click next to begin.',\n        'Here is a picture of what you will do: \nimg src=\ninstruction_image.jpg\n/img\n'\n    ],\n    show_clickable_nav: true\n}", 
            "title": "jspsych-instructions"
        }, 
        {
            "location": "/plugins/jspsych-instructions/#jspsych-instructions-plugin", 
            "text": "This plugin is for showing instructions to the subject. Navigation can be done using the mouse or keyboard.", 
            "title": "jspsych-instructions plugin"
        }, 
        {
            "location": "/plugins/jspsych-instructions/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      pages  array  undefined  Each element of the array is the content for a single page. Each page should be an HTML-formatted string.    key_forward  key code  'rightarrow'  This is the key that the subject can press in order to advance to the next page. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ).    key_backward  key code  'leftarrow'  This is the key that the subject can press to return to the previous page.    allow_backward  boolean  true  If true, the subject can return to previous pages of the instructions. If false, they may only advace to the next page.    allow_keys  boolean  true  If true, the subject can use keyboard keys to navigate the pages. If false, they may not.    show_clickable_nav  boolean  false  If true, then a  Previous  and  Next  button will be displayed beneath the instructions. Subjects can click the buttons to navigate.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-instructions/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      view_history  JSON string  A JSON string containing the order of pages the subject viewed (including when the subject returned to previous pages) and the time spent viewing each page.    rt  numeric  The response time in milliseconds for the subject to view all of the pages.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-instructions/#example", 
            "text": "Showing simple text instructions  var trial = {\n    type: 'instructions',\n    pages: [\n        'Welcome to the experiment. Click next to begin.',\n        'This is the second page of instructions.',\n        'This is the final page.'\n    ],\n    show_clickable_nav: true\n}  Including images  var trial = {\n    type: 'instructions',\n    pages: [\n        'Welcome to the experiment. Click next to begin.',\n        'Here is a picture of what you will do:  img src= instruction_image.jpg /img '\n    ],\n    show_clickable_nav: true\n}", 
            "title": "Example"
        }, 
        {
            "location": "/plugins/jspsych-multi-stim-multi-response/", 
            "text": "jspsych-multi-stim-multi-response plugin\n\n\nThis plugin is a more generalized version of the single-stim plugin. With this plugin, you can present multiple stimuli in a single trial, and specify the amount of time that each stimulus will be on the screen. You can also collect more than one response from the subject. The plugin organizes the responses into \nresponse groups\n. For example, you might require that the subject make a 'yes'/'no' judgement by pressing the y or n key, but also require a rating judgment on a scale of 1-9 by pressing a number key.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of this array is a string; they can be paths to images or HTML-formatted content.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf the elements of the \nstimuli\n array are strings containing HTML content, then this parameter must be set to true.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\nundefined\n\n\nEach element of this array is an array. The inner arrays contain the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n; specifying as a character won't work for this plugin. Each inner array represents a response group that the subject should respond to. If you want the subject to generate a single response, then specify only one inner array that contains all the acceptable responses. If you want the subject to generate two responses, then you should have two inner arrays, one with the acceptable keys for the first response, and one with the acceptable keys for the second response. \nNote:\n If the response keys overlap between response groups, setting the \ntiming_response\n parameter is recommended.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\ntiming_stim\n\n\narray\n\n\n[1000, 1000, ... , 1000]\n\n\nEach element of the array is the length of time to display the corresponding stimulus for in milliseconds. The length of this array should match the length of the innermost stimuli arrays. Setting the last value of the array to -1 will cause the last stimulus to display until the subject has generated a response for each response group.\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\n-1\n\n\nHow long to wait for the subject to make all responses before ending the trial in milliseconds. If the subject fails to make a response in a response group before this timer is reached, the the subject's response for that response group will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response for each response group (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nJSON string\n\n\nJSON-encoded array containing the stimuli presented in the trial.\n\n\n\n\n\n\nkey_press\n\n\nJSON string\n\n\nJSON-encoded array indicating which keys the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response. Each response group will have a distinct entry in this array.\n\n\n\n\n\n\nrt\n\n\nJSON string\n\n\nJSON-encoded array indicating the response time in milliseconds for the subject to make each response. The time is measured from when the first stimulus appears on the screen until the subject's response. Each response group will have a separate RT in the array.\n\n\n\n\n\n\n\n\nExamples\n\n\nDisplaying a sequence of images, get a single response\n\n\nvar block = {\n    type: 'multi-stim-multi-response',\n    stimuli: ['img/happy_face.png', 'img/sad_face.png'],\n    choices: [[89,78]], // Y or N\n    timing_stim: [1000,-1],\n    prompt: 'Did the face get happier?'\n}\n\n\n\n\nDisplaying a single image, getting two responses\n\n\nvar block = {\n    type: 'multi-stim-multi-response',\n    stimuli: ['img/happy_face.png'],\n    choices: [[89, 78],[49,50,51,52,53]], // Y or N , 1 - 5\n    timing_stim: [-1],\n    prompt: 'Rate the happiness of the person on a scale of 1-5, and press Y or N to indicate if you have seen the face before'\n}", 
            "title": "jspsych-multi-stim-multi-response"
        }, 
        {
            "location": "/plugins/jspsych-multi-stim-multi-response/#jspsych-multi-stim-multi-response-plugin", 
            "text": "This plugin is a more generalized version of the single-stim plugin. With this plugin, you can present multiple stimuli in a single trial, and specify the amount of time that each stimulus will be on the screen. You can also collect more than one response from the subject. The plugin organizes the responses into  response groups . For example, you might require that the subject make a 'yes'/'no' judgement by pressing the y or n key, but also require a rating judgment on a scale of 1-9 by pressing a number key.", 
            "title": "jspsych-multi-stim-multi-response plugin"
        }, 
        {
            "location": "/plugins/jspsych-multi-stim-multi-response/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of this array is a string; they can be paths to images or HTML-formatted content.    is_html  boolean  false  If the elements of the  stimuli  array are strings containing HTML content, then this parameter must be set to true.    choices  array  undefined  Each element of this array is an array. The inner arrays contain the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code ; specifying as a character won't work for this plugin. Each inner array represents a response group that the subject should respond to. If you want the subject to generate a single response, then specify only one inner array that contains all the acceptable responses. If you want the subject to generate two responses, then you should have two inner arrays, one with the acceptable keys for the first response, and one with the acceptable keys for the second response.  Note:  If the response keys overlap between response groups, setting the  timing_response  parameter is recommended.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    timing_stim  array  [1000, 1000, ... , 1000]  Each element of the array is the length of time to display the corresponding stimulus for in milliseconds. The length of this array should match the length of the innermost stimuli arrays. Setting the last value of the array to -1 will cause the last stimulus to display until the subject has generated a response for each response group.    timing_response  numeric  -1  How long to wait for the subject to make all responses before ending the trial in milliseconds. If the subject fails to make a response in a response group before this timer is reached, the the subject's response for that response group will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response for each response group (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-multi-stim-multi-response/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  JSON string  JSON-encoded array containing the stimuli presented in the trial.    key_press  JSON string  JSON-encoded array indicating which keys the subject pressed. The value is the  numeric key code  corresponding to the subject's response. Each response group will have a distinct entry in this array.    rt  JSON string  JSON-encoded array indicating the response time in milliseconds for the subject to make each response. The time is measured from when the first stimulus appears on the screen until the subject's response. Each response group will have a separate RT in the array.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-multi-stim-multi-response/#examples", 
            "text": "Displaying a sequence of images, get a single response  var block = {\n    type: 'multi-stim-multi-response',\n    stimuli: ['img/happy_face.png', 'img/sad_face.png'],\n    choices: [[89,78]], // Y or N\n    timing_stim: [1000,-1],\n    prompt: 'Did the face get happier?'\n}  Displaying a single image, getting two responses  var block = {\n    type: 'multi-stim-multi-response',\n    stimuli: ['img/happy_face.png'],\n    choices: [[89, 78],[49,50,51,52,53]], // Y or N , 1 - 5\n    timing_stim: [-1],\n    prompt: 'Rate the happiness of the person on a scale of 1-5, and press Y or N to indicate if you have seen the face before'\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-palmer/", 
            "text": "jspsych-palmer\n\n\nThe Palmer plugin displays a programmatically generated stimulus designed to mimic stimuli used by \nPalmer (1977)\n and \nGoldstone et al. (2005)\n.\n\n\nThe stimuli look like this (there are several options to configure the appearance of the stimuli below):\n\n\n\n\nSubjects can edit the stimuli by clicking on two adjacent circles to add or remove a line segment between them. The plugin also contains a function for generating non-editable versions of the stimuli that can be used in other plugins that accept HTML-formatted stimuli, like the single-stim and categorize plugins.\n\n\nDependency\n\n\nThis plugin requires the Snap.svg library, available at \nhttp://www.snapsvg.io\n. You must include the library in the \nhead\n section of your experiment page.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconfiguration\n\n\narray\n\n\nundefined\n\n\nA configuration is an array of 1s and 0s. A 1 represents the presence of a line segment, and a 0 represents the absence of a line segment. The number of elements in a configuration array should be the number of possible line segments in the stimulus. For the default size of 3x3, this is 20 (6 horizontal + 6 vertical + 8 diagonal). The order of the lines in the array are horizontal, vertical, and then diagonal. The easiest way to see this is just to try different configurations. This represents the target configuration, as the stimulus will be blank initially.\n\n\n\n\n\n\nshow_feedback\n\n\nboolean\n\n\nfalse\n\n\nShow corrective feedback after the subject submits a response.\n\n\n\n\n\n\ngrid_spacing\n\n\nnumeric\n\n\n75\n\n\nDistance in pixels between the rows and columns.\n\n\n\n\n\n\ncircle_radius\n\n\nnumeric\n\n\n20\n\n\nRadius in pixels of the circles.\n\n\n\n\n\n\nsquare_size\n\n\nnumeric\n\n\n3\n\n\nNumber of rows and columns in the stimulus.\n\n\n\n\n\n\ntiming_feedback\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the feedback for in milliseconds.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject produced exactly the right configuration.\n\n\n\n\n\n\nconfiguration\n\n\nJSON string\n\n\nConfiguration that the subject produced, in the same format as the configuration array parameter for the trial.\n\n\n\n\n\n\ntarget_configuration\n\n\nJSON string\n\n\nThe correct configuration (from configuration parameter).\n\n\n\n\n\n\nnum_wrong\n\n\nnumeric\n\n\nThe number of line segments that didn't match between what the subject produced and the target configuration.\n\n\n\n\n\n\n\n\nStimulus Creation\n\n\nThe palmer plugin contains a stimulus generation method (\njsPsych.palmer.generate_stimulus\n) that can be used independently of actually running trials with the plugin. You can use this method to generate stimuli (created as HTML strings) to embed in other plugins that can use HTML as input, such as jspsych-categorize. An example is provided here:\n\n\nvar square_size = 3; // number of rows and columns\nvar grid_spacing = 75; // pixels\nvar circle_size = 20; // radius in pixels\nvar configuration = [0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1]; // see definition above\n\nvar stimulus = jsPsych.palmer.generate_stimulus(square_size, grid_spacing, circle_size, configuration);\n\n// stimulus now contains an HTML string that will generate the corresponding stimulus.\n\n\n\n\nExamples\n\n\nThese examples show how to define a block using the single-stim plugin to achieve various goals.\n\n\nMatching a previously seen stimulus\n\n\n\n// create a stimulus using the generate_stimulus method\nvar square_size = 3; // number of rows and columns\nvar grid_spacing = 75; // pixels\nvar circle_size = 20; // radius in pixels\nvar configuration = [0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1]; // see definition above\n\nvar stimulus = jsPsych.palmer.generate_stimulus(square_size, grid_spacing, circle_size, configuration);\n\n// show target stimulus using single-stim plugin\nvar stim_block = {\n    type: 'single-stim',\n    stimulus: stimulus,\n    is_html: true,\n    timing_response: 2000,\n    response_ends_trial: false\n}\n\nvar test_block = {\n    type: 'palmer',\n    configuration: configuration,\n    editable: true,\n    show_feedback: true,\n    timing_feedback: 2000,\n    prompt: '\np\nCreate the image you just saw. Click two circles to add or remove a line between them. Click submit when you are done.\n/p\n'\n};\n\n\n\n\nReferences\n\n\nGoldstone, R. L., Rogosky, B. J., Pevtzow, R., \n Blair, M. (2005). Perceptual and semantic reorganization during category learning. \nIn H. Cohen \n C. Lefebvre (Eds.) Handbook of Categorization in Cognitive Science\n. (pp. 651-678). Amsterdam: Elsevier.\n\n\nPalmer, S. (1977). Hierarchical Structure in Perceptual Representation. \nCognitive Psychology, 9\n, 441.", 
            "title": "jspsych-palmer"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#jspsych-palmer", 
            "text": "The Palmer plugin displays a programmatically generated stimulus designed to mimic stimuli used by  Palmer (1977)  and  Goldstone et al. (2005) .  The stimuli look like this (there are several options to configure the appearance of the stimuli below):   Subjects can edit the stimuli by clicking on two adjacent circles to add or remove a line segment between them. The plugin also contains a function for generating non-editable versions of the stimuli that can be used in other plugins that accept HTML-formatted stimuli, like the single-stim and categorize plugins.", 
            "title": "jspsych-palmer"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#dependency", 
            "text": "This plugin requires the Snap.svg library, available at  http://www.snapsvg.io . You must include the library in the  head  section of your experiment page.", 
            "title": "Dependency"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      configuration  array  undefined  A configuration is an array of 1s and 0s. A 1 represents the presence of a line segment, and a 0 represents the absence of a line segment. The number of elements in a configuration array should be the number of possible line segments in the stimulus. For the default size of 3x3, this is 20 (6 horizontal + 6 vertical + 8 diagonal). The order of the lines in the array are horizontal, vertical, and then diagonal. The easiest way to see this is just to try different configurations. This represents the target configuration, as the stimulus will be blank initially.    show_feedback  boolean  false  Show corrective feedback after the subject submits a response.    grid_spacing  numeric  75  Distance in pixels between the rows and columns.    circle_radius  numeric  20  Radius in pixels of the circles.    square_size  numeric  3  Number of rows and columns in the stimulus.    timing_feedback  numeric  1000  How long to show the feedback for in milliseconds.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject produced exactly the right configuration.    configuration  JSON string  Configuration that the subject produced, in the same format as the configuration array parameter for the trial.    target_configuration  JSON string  The correct configuration (from configuration parameter).    num_wrong  numeric  The number of line segments that didn't match between what the subject produced and the target configuration.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#stimulus-creation", 
            "text": "The palmer plugin contains a stimulus generation method ( jsPsych.palmer.generate_stimulus ) that can be used independently of actually running trials with the plugin. You can use this method to generate stimuli (created as HTML strings) to embed in other plugins that can use HTML as input, such as jspsych-categorize. An example is provided here:  var square_size = 3; // number of rows and columns\nvar grid_spacing = 75; // pixels\nvar circle_size = 20; // radius in pixels\nvar configuration = [0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1]; // see definition above\n\nvar stimulus = jsPsych.palmer.generate_stimulus(square_size, grid_spacing, circle_size, configuration);\n\n// stimulus now contains an HTML string that will generate the corresponding stimulus.", 
            "title": "Stimulus Creation"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#examples", 
            "text": "These examples show how to define a block using the single-stim plugin to achieve various goals.  Matching a previously seen stimulus  \n// create a stimulus using the generate_stimulus method\nvar square_size = 3; // number of rows and columns\nvar grid_spacing = 75; // pixels\nvar circle_size = 20; // radius in pixels\nvar configuration = [0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1]; // see definition above\n\nvar stimulus = jsPsych.palmer.generate_stimulus(square_size, grid_spacing, circle_size, configuration);\n\n// show target stimulus using single-stim plugin\nvar stim_block = {\n    type: 'single-stim',\n    stimulus: stimulus,\n    is_html: true,\n    timing_response: 2000,\n    response_ends_trial: false\n}\n\nvar test_block = {\n    type: 'palmer',\n    configuration: configuration,\n    editable: true,\n    show_feedback: true,\n    timing_feedback: 2000,\n    prompt: ' p Create the image you just saw. Click two circles to add or remove a line between them. Click submit when you are done. /p '\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-palmer/#references", 
            "text": "Goldstone, R. L., Rogosky, B. J., Pevtzow, R.,   Blair, M. (2005). Perceptual and semantic reorganization during category learning.  In H. Cohen   C. Lefebvre (Eds.) Handbook of Categorization in Cognitive Science . (pp. 651-678). Amsterdam: Elsevier.  Palmer, S. (1977). Hierarchical Structure in Perceptual Representation.  Cognitive Psychology, 9 , 441.", 
            "title": "References"
        }, 
        {
            "location": "/plugins/jspsych-reconstruction/", 
            "text": "jspsych-reconstruction plugin\n\n\nThis plugin allows a subject to interact with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.\n\n\nThe stimulus must be defined through a function that returns an HTML-formatted string. The function should take a single value, the parameter that can be modified by the subject. The value can only range from 0 to 1. See the example at the bottom of the page for a sample function.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstim_function\n\n\nfunction\n\n\nundefined\n\n\nA function with a single parameter that returns an HTML-formatted string representing the stimulus.\n\n\n\n\n\n\nstarting_value\n\n\nnumeric\n\n\n0.5\n\n\nThe starting value of the stimulus parameter.\n\n\n\n\n\n\nstep_size\n\n\nnumeric\n\n\n0.05\n\n\nThe change in the stimulus parameter caused by pressing one of the modification keys.\n\n\n\n\n\n\nkey_increase\n\n\nkey code\n\n\n'h'\n\n\nThe key to press for increasing the parameter value.\n\n\n\n\n\n\nkey_decrease\n\n\nkey code\n\n\n'g'\n\n\nThe key to press for decreasing the parameter value.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstart_value\n\n\nnumeric\n\n\nThe starting value of the stimulus parameter.\n\n\n\n\n\n\nfinal_value\n\n\nnumeric\n\n\nThe final value of the stimulus parameter.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe length of time, in milliseconds, that the trial lasted.\n\n\n\n\n\n\n\n\nExamples\n\n\nMake a block larger and smaller\n\n\nvar sample_function = function(param){\n    var size = 50 + Math.floor(param*250);\n    var html = '\ndiv style=\ndisplay: block; margin: auto; height: 300px;\n'+\n    '\ndiv style=\ndisplay: block; margin: auto; background-color: #000000; '+\n    'width: '+size+'px; height: '+size+'px;\n/div\n/div\n';\n    return html;\n}\n\nvar trial = {\n    type: 'reconstruction',\n    stim_function: sample_function,\n    starting_value: 0.25\n}", 
            "title": "jspsych-reconstruction"
        }, 
        {
            "location": "/plugins/jspsych-reconstruction/#jspsych-reconstruction-plugin", 
            "text": "This plugin allows a subject to interact with a stimulus by modifying a parameter of the stimulus and observing the change in the stimulus in real-time.  The stimulus must be defined through a function that returns an HTML-formatted string. The function should take a single value, the parameter that can be modified by the subject. The value can only range from 0 to 1. See the example at the bottom of the page for a sample function.", 
            "title": "jspsych-reconstruction plugin"
        }, 
        {
            "location": "/plugins/jspsych-reconstruction/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stim_function  function  undefined  A function with a single parameter that returns an HTML-formatted string representing the stimulus.    starting_value  numeric  0.5  The starting value of the stimulus parameter.    step_size  numeric  0.05  The change in the stimulus parameter caused by pressing one of the modification keys.    key_increase  key code  'h'  The key to press for increasing the parameter value.    key_decrease  key code  'g'  The key to press for decreasing the parameter value.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-reconstruction/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      start_value  numeric  The starting value of the stimulus parameter.    final_value  numeric  The final value of the stimulus parameter.    rt  numeric  The length of time, in milliseconds, that the trial lasted.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-reconstruction/#examples", 
            "text": "Make a block larger and smaller  var sample_function = function(param){\n    var size = 50 + Math.floor(param*250);\n    var html = ' div style= display: block; margin: auto; height: 300px; '+\n    ' div style= display: block; margin: auto; background-color: #000000; '+\n    'width: '+size+'px; height: '+size+'px; /div /div ';\n    return html;\n}\n\nvar trial = {\n    type: 'reconstruction',\n    stim_function: sample_function,\n    starting_value: 0.25\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-same-different/", 
            "text": "jspsych-same-different plugin\n\n\nThe same-different plugin displays two stimuli sequentially. Stimuli can be images or HTML objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nA pair of stimuli, represented as an array with two entries, one for each stimulus. A stimulus can be either a path to an image file or a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf the elements of the \nstimuli\n array are strings containing HTML content, then this parameter must be set to true.\n\n\n\n\n\n\nanswer\n\n\nstring\n\n\nundefined\n\n\nEither \n'same'\n or \n'different'\n.\n\n\n\n\n\n\nsame_key\n\n\nnumeric or string\n\n\n'Q'\n\n\nThe key that subjects should press to indicate that the two stimuli are the same.\n\n\n\n\n\n\ndifferent_key\n\n\nnumeric or string\n\n\n'P'\n\n\nThe key that subjects should press to indicate that the two stimuli are different.\n\n\n\n\n\n\ntiming_first_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the first stimulus for in milliseconds. If the value of this parameter is \n-1\n then the stimulus will be shown until the subject presses any key.\n\n\n\n\n\n\ntiming_gap\n\n\nnumeric\n\n\n500\n\n\nHow long to show a blank screen in between the two stimuli.\n\n\n\n\n\n\ntiming_second_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the second stimulus for in milliseconds. If the value of this parameter is \n-1\n then the stimulus will be shown until the subject responds.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nAn JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\ntrue\n if the subject's response matched the \nanswer\n for this trial.\n\n\n\n\n\n\nanswer\n\n\nstring\n\n\nThe correct answer to the trial, either \n'same'\n or \n'different'\n.\n\n\n\n\n\n\n\n\nAdditionally, if \ntiming_first_stim\n is \n-1\n, then the following data is also collected:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nrt_stim1\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response.\n\n\n\n\n\n\nkey_press_stim1\n\n\nnumeric\n\n\nIndicates which key the subject pressed to continue. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\n\n\nExamples", 
            "title": "jspsych-same-different"
        }, 
        {
            "location": "/plugins/jspsych-same-different/#jspsych-same-different-plugin", 
            "text": "The same-different plugin displays two stimuli sequentially. Stimuli can be images or HTML objects. The subject responds using the keyboard, and indicates whether the stimuli were the same or different. Same does not necessarily mean identical; a category judgment could be made, for example.", 
            "title": "jspsych-same-different plugin"
        }, 
        {
            "location": "/plugins/jspsych-same-different/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  A pair of stimuli, represented as an array with two entries, one for each stimulus. A stimulus can be either a path to an image file or a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array.    is_html  boolean  false  If the elements of the  stimuli  array are strings containing HTML content, then this parameter must be set to true.    answer  string  undefined  Either  'same'  or  'different' .    same_key  numeric or string  'Q'  The key that subjects should press to indicate that the two stimuli are the same.    different_key  numeric or string  'P'  The key that subjects should press to indicate that the two stimuli are different.    timing_first_stim  numeric  1000  How long to show the first stimulus for in milliseconds. If the value of this parameter is  -1  then the stimulus will be shown until the subject presses any key.    timing_gap  numeric  500  How long to show a blank screen in between the two stimuli.    timing_second_stim  numeric  1000  How long to show the second stimulus for in milliseconds. If the value of this parameter is  -1  then the stimulus will be shown until the subject responds.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-same-different/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  An JSON-encoded array of length 2 containing either the path to the image file or the string containing the HTML formatted content that the subject saw for each trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the second stimulus first appears on the screen until the subject's response.    correct  boolean  true  if the subject's response matched the  answer  for this trial.    answer  string  The correct answer to the trial, either  'same'  or  'different' .     Additionally, if  timing_first_stim  is  -1 , then the following data is also collected:     Name  Type  Value      rt_stim1  numeric  The response time in milliseconds for the subject to continue after the first stimulus. The time is measured from when the first stimulus appears on the screen until the subject's response.    key_press_stim1  numeric  Indicates which key the subject pressed to continue. The value is the  numeric key code  corresponding to the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-same-different/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-similarity/", 
            "text": "jspsych-similarity plugin\n\n\nThe similarity plugin displays two stimuli sequentially. The stimuli can be images or HTML objects. The subject uses a draggable slider that is shown on screen to give a response. The anchor labels for the slider can be specified.\n\n\nDependency\n\n\nThis plugin requires the jQuery UI javascript library and accompanying CSS theme. To use this library, you must include both. Google hosts versions of both, which you can use in your project by including the following two lines in the \nhead\n section of the HTML document:\n\n\nscript src=\nhttps://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js\n/script\n\n\nlink href=\nhttps://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/black-tie/jquery-ui.min.css\n rel=\nstylesheet\n type=\ntext/css\n/link\n\n\n\n\n\nThis example uses the 'black-tie' theme, but any theme should work.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nA pair of stimuli. Each pair is represented as an array with two entries, one for each stimulus. A stimulus can be either a path to an image file or a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf the elements of the \nstimuli\n array are strings containing HTML content, then this parameter must be set to true.\n\n\n\n\n\n\nlabels\n\n\narray\n\n\n['Not at all similar', 'Identical']\n\n\nArray of strings to label the slider. Labels will be evenly spaced based on how many are in the array, with the outermost elements always anchored to the ends of the slider.\n\n\n\n\n\n\nintervals\n\n\nnumeric\n\n\n100\n\n\nHow many different choices are available on the slider. For example, 5 will limit the options to 5 different places on the slider. Default value is 100, to simulate a smooth slider.\n\n\n\n\n\n\nshow_ticks\n\n\nboolean\n\n\nfalse\n\n\nIf true, then the slider will have tick marks indicating where the response options lie on the slider.\n\n\n\n\n\n\nshow_response\n\n\nstring\n\n\n\"SECOND_STIMULUS\"\n\n\nDetermines when the response slider will appear in the trial. \n\"FIRST_STIMULUS\"\n will show the response slider as soon as the first stimulus is shown. \n\"SECOND_STIMULUS\"\n will show the response slider as soon as the second stimulus is shown. \n\"POST_STIMULUS\"\n will show the response slider after the second stimulus disappears. Response time measure will start when the response slider appears.\n\n\n\n\n\n\ntiming_first_stim\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the first stimulus for in milliseconds.\n\n\n\n\n\n\ntiming_second_stim\n\n\nnumeric\n\n\n-1\n\n\nHow long to show the second stimulus for in milliseconds. -1 will show the stimulus until a response is made by the subject.\n\n\n\n\n\n\ntiming_image_gap\n\n\nnumeric\n\n\n1000\n\n\nHow long to show a blank screen in between the two stimuli.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nA JSON-encoded array of the two stimuli presented in the trial.\n\n\n\n\n\n\nsim_score\n\n\nnumeric\n\n\nThe position of the slider when the subject submitted their response. Larger numbers are to the right on the slider. The range will depend on the value of the \nintervals\n parameter.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the response slider first appears on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExample", 
            "title": "jspsych-similarity"
        }, 
        {
            "location": "/plugins/jspsych-similarity/#jspsych-similarity-plugin", 
            "text": "The similarity plugin displays two stimuli sequentially. The stimuli can be images or HTML objects. The subject uses a draggable slider that is shown on screen to give a response. The anchor labels for the slider can be specified.", 
            "title": "jspsych-similarity plugin"
        }, 
        {
            "location": "/plugins/jspsych-similarity/#dependency", 
            "text": "This plugin requires the jQuery UI javascript library and accompanying CSS theme. To use this library, you must include both. Google hosts versions of both, which you can use in your project by including the following two lines in the  head  section of the HTML document:  script src= https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js /script  link href= https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/black-tie/jquery-ui.min.css  rel= stylesheet  type= text/css /link   This example uses the 'black-tie' theme, but any theme should work.", 
            "title": "Dependency"
        }, 
        {
            "location": "/plugins/jspsych-similarity/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  A pair of stimuli. Each pair is represented as an array with two entries, one for each stimulus. A stimulus can be either a path to an image file or a string containing valid HTML markup. Stimuli will be shown in the order that they are defined in the array.    is_html  boolean  false  If the elements of the  stimuli  array are strings containing HTML content, then this parameter must be set to true.    labels  array  ['Not at all similar', 'Identical']  Array of strings to label the slider. Labels will be evenly spaced based on how many are in the array, with the outermost elements always anchored to the ends of the slider.    intervals  numeric  100  How many different choices are available on the slider. For example, 5 will limit the options to 5 different places on the slider. Default value is 100, to simulate a smooth slider.    show_ticks  boolean  false  If true, then the slider will have tick marks indicating where the response options lie on the slider.    show_response  string  \"SECOND_STIMULUS\"  Determines when the response slider will appear in the trial.  \"FIRST_STIMULUS\"  will show the response slider as soon as the first stimulus is shown.  \"SECOND_STIMULUS\"  will show the response slider as soon as the second stimulus is shown.  \"POST_STIMULUS\"  will show the response slider after the second stimulus disappears. Response time measure will start when the response slider appears.    timing_first_stim  numeric  1000  How long to show the first stimulus for in milliseconds.    timing_second_stim  numeric  -1  How long to show the second stimulus for in milliseconds. -1 will show the stimulus until a response is made by the subject.    timing_image_gap  numeric  1000  How long to show a blank screen in between the two stimuli.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-similarity/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  A JSON-encoded array of the two stimuli presented in the trial.    sim_score  numeric  The position of the slider when the subject submitted their response. Larger numbers are to the right on the slider. The range will depend on the value of the  intervals  parameter.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the response slider first appears on the screen until the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-similarity/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/plugins/jspsych-single-audio/", 
            "text": "jspsych-single-audio plugin\n\n\nThis plugin plays audio files and records responses generated with the keyboard.\n\n\nAudio files are played using the \nWebAudio API\n. This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times.\n\n\nAudio files are automatically preloaded by jsPsych.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nPath to an audio file.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\n[ ]\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n). The default value of an empty array means that all keys will be accepted as valid responses.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed on the screen. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\n-1\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the the subject's response will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nThe path to the file that was played during the trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the audio file began playing.\n\n\n\n\n\n\n\n\nExamples\n\n\nPlaying a sound\n\n\nvar trial = {\n    type: 'single-audio',\n    stimulus: 'sound/sound.mp3'\n}\n\n\n\n\nRestricting which keys the subject can use to respond\n\n\nvar trial = {\n    type: 'single-audio',\n    stimulus: 'sound/sound.mp3',\n    choices: ['h','s']\n}", 
            "title": "jspsych-single-audio"
        }, 
        {
            "location": "/plugins/jspsych-single-audio/#jspsych-single-audio-plugin", 
            "text": "This plugin plays audio files and records responses generated with the keyboard.  Audio files are played using the  WebAudio API . This allows for reasonably precise timing of the playback. The timing of responses generated is measured against the WebAudio specific clock, improving the measurement of response times.  Audio files are automatically preloaded by jsPsych.", 
            "title": "jspsych-single-audio plugin"
        }, 
        {
            "location": "/plugins/jspsych-single-audio/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  Path to an audio file.    choices  array  [ ]  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ). The default value of an empty array means that all keys will be accepted as valid responses.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed on the screen. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    timing_response  numeric  -1  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the the subject's response will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-single-audio/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  The path to the file that was played during the trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the audio file began playing.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-single-audio/#examples", 
            "text": "Playing a sound  var trial = {\n    type: 'single-audio',\n    stimulus: 'sound/sound.mp3'\n}  Restricting which keys the subject can use to respond  var trial = {\n    type: 'single-audio',\n    stimulus: 'sound/sound.mp3',\n    choices: ['h','s']\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-single-stim/", 
            "text": "jspsych-single-stim plugin\n\n\nThis plugin displays an image or HTML-formatted content and allows the subject to respond by pressing a key on the keyboard. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.\n\n\nBecause this plugin can display any HTML content, it is quite versatile. It can be used for any situation in which the response generated by the subject is a single keystroke.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nundefined\n\n\nThe stimulus to display. Either HTML-formatted, or the path to an image.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf \nstimulus\n is an HTML-formatted string, this parameter needs to be set to \ntrue\n.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\n[ ]\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n). The default value of an empty array means that all keys will be accepted as valid responses.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\ntiming_stim\n\n\nnumeric\n\n\n-1\n\n\nHow long to show the stimulus for in milliseconds. If the value is -1, then the stimulus will be shown until the subject makes a response.\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\n-1\n\n\nHow long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the the subject's response will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.\n\n\n\n\n\n\nresponse_ends_trial\n\n\nboolean\n\n\ntrue\n\n\nIf true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the \ntiming_response\n parameter). If false, then the trial will continue until the value for \ntiming_response\n is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nEither the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\n\nDisplaying image until subject gives a response\n\n\nvar trial = {\n    type: 'single-stim',\n    stimulus: 'img/happy_face.png'\n}\n\n\n\n\nRestricting which keys the subject can use to respond\n\n\nvar trial = {\n    type: 'single-stim',\n    stimulus: 'img/happy_face.png',\n    choices: ['h','s']\n}\n\n\n\n\nDisplaying HTML content for a fixed length of time\n\n\nvar trial = {\n    type: 'single-stim',\n    stimulus: '\np\nRadio\n/p\n',\n    is_html: true,\n    timing_response: 1500,\n    response_ends_trial: false\n}", 
            "title": "jspsych-single-stim"
        }, 
        {
            "location": "/plugins/jspsych-single-stim/#jspsych-single-stim-plugin", 
            "text": "This plugin displays an image or HTML-formatted content and allows the subject to respond by pressing a key on the keyboard. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the subject has failed to respond within a fixed length of time.  Because this plugin can display any HTML content, it is quite versatile. It can be used for any situation in which the response generated by the subject is a single keystroke.", 
            "title": "jspsych-single-stim plugin"
        }, 
        {
            "location": "/plugins/jspsych-single-stim/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimulus  string  undefined  The stimulus to display. Either HTML-formatted, or the path to an image.    is_html  boolean  false  If  stimulus  is an HTML-formatted string, this parameter needs to be set to  true .    choices  array  [ ]  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ). The default value of an empty array means that all keys will be accepted as valid responses.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    timing_stim  numeric  -1  How long to show the stimulus for in milliseconds. If the value is -1, then the stimulus will be shown until the subject makes a response.    timing_response  numeric  -1  How long to wait for the subject to make a response before ending the trial in milliseconds. If the subject fails to make a response before this timer is reached, the the subject's response will be recorded as -1 for the trial and the trial will end. If the value of this parameter is -1, then the trial will wait for a response indefinitely.    response_ends_trial  boolean  true  If true, then the trial will end whenever the subject makes a response (assuming they make their response before the cutoff specified by the  timing_response  parameter). If false, then the trial will continue until the value for  timing_response  is reached. You can use this parameter to force the subject to view a stimulus for a fixed amount of time, even if they respond before the time is complete.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-single-stim/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  Either the path to the image file or the string containing the HTML formatted content that the subject saw on this trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-single-stim/#examples", 
            "text": "Displaying image until subject gives a response  var trial = {\n    type: 'single-stim',\n    stimulus: 'img/happy_face.png'\n}  Restricting which keys the subject can use to respond  var trial = {\n    type: 'single-stim',\n    stimulus: 'img/happy_face.png',\n    choices: ['h','s']\n}  Displaying HTML content for a fixed length of time  var trial = {\n    type: 'single-stim',\n    stimulus: ' p Radio /p ',\n    is_html: true,\n    timing_response: 1500,\n    response_ends_trial: false\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-survey-likert/", 
            "text": "jspsych-survey-likert plugin\n\n\nThe survey-likert plugin displays a set of questions with Likert scale responses. The subject responds by selecting a radio button.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nEach array element a string. The strings are the prompts/questions that will be associated with a slider.\n\n\n\n\n\n\nlabels\n\n\narray\n\n\nundefined\n\n\nEach array element is an array of strings. The innermost arrays contain a set of labels to display for an individual question. If you want to use blank responses and only label the end points or some subset of the options, just insert a blank string for the unlabeled responses.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA string in JSON format containing the responses for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. The responses are recorded as integers, representing the position of the slider on the scale.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic example with multiple questions on a page.\n\n\n// defining groups of questions that will go together.\nvar page_1_questions = [\nI like vegetables.\n, \nI hate eggs.\n];\n\n// defining two different response scales that can be used.\nvar scale_1 = [\nStrongly Disagree\n, \nDisagree\n, \nNeutral\n, \nAgree\n, \nStrongly Agree\n];\n\nvar likert_page = {\n    type: 'survey-likert',\n    questions: [\nI like vegetables.\n, \nI like fruit.\n],\n    labels: [scale_1, scale_1], // need one scale for every question on a page\n};", 
            "title": "jspsych-survey-likert"
        }, 
        {
            "location": "/plugins/jspsych-survey-likert/#jspsych-survey-likert-plugin", 
            "text": "The survey-likert plugin displays a set of questions with Likert scale responses. The subject responds by selecting a radio button.", 
            "title": "jspsych-survey-likert plugin"
        }, 
        {
            "location": "/plugins/jspsych-survey-likert/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  Each array element a string. The strings are the prompts/questions that will be associated with a slider.    labels  array  undefined  Each array element is an array of strings. The innermost arrays contain a set of labels to display for an individual question. If you want to use blank responses and only label the end points or some subset of the options, just insert a blank string for the unlabeled responses.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-survey-likert/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  A string in JSON format containing the responses for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. The responses are recorded as integers, representing the position of the slider on the scale.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-survey-likert/#examples", 
            "text": "Basic example with multiple questions on a page.  // defining groups of questions that will go together.\nvar page_1_questions = [ I like vegetables. ,  I hate eggs. ];\n\n// defining two different response scales that can be used.\nvar scale_1 = [ Strongly Disagree ,  Disagree ,  Neutral ,  Agree ,  Strongly Agree ];\n\nvar likert_page = {\n    type: 'survey-likert',\n    questions: [ I like vegetables. ,  I like fruit. ],\n    labels: [scale_1, scale_1], // need one scale for every question on a page\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-survey-multi-choice/", 
            "text": "jspsych-survey-multi-choice plugin\n\n\nThe survey-text plugin displays a set of questions with multiple choice response fields. The subject selects a single answer.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nAn array of strings. The strings are the prompts/questions that will be associated with a group of options (radio buttons). All questions will get presented on the same page (trial).\n\n\n\n\n\n\noptions\n\n\narray\n\n\nundefined\n\n\nAn array of arrays. The innermost arrays contain a set of options to display for an individual question. The length of the outer array should be the same as the number of questions.\n\n\n\n\n\n\nrequired\n\n\narray\n\n\nnull\n\n\nAn array of boolean values. Each boolean indicates if a question is required (\ntrue\n) or not (\nfalse\n), using the HTML5 \nrequired\n attribute. The length of this array should correspond to the length of the questions array. If this parameter is undefined, all questions will be optional. Note: The HTML5 \nrequired\n attribute is \nnot currently supported by the Safari browser\n.\n\n\n\n\n\n\nhorizontal\n\n\nboolean\n\n\nfalse\n\n\nIf true, then questions are centered and options are displayed horizontally.\n\n\n\n\n\n\npreamble\n\n\narray\n\n\nempty string\n\n\nArray of HTML formatted strings to display at the top of each page above all the questions. Each element of the array corresponds to a trial/page of questions.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA string in JSON format containing the responses for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. The responses recorded as the name of the option label.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic example with multiple questions on a page.", 
            "title": "jspsych-survey-multi-choice"
        }, 
        {
            "location": "/plugins/jspsych-survey-multi-choice/#jspsych-survey-multi-choice-plugin", 
            "text": "The survey-text plugin displays a set of questions with multiple choice response fields. The subject selects a single answer.", 
            "title": "jspsych-survey-multi-choice plugin"
        }, 
        {
            "location": "/plugins/jspsych-survey-multi-choice/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  An array of strings. The strings are the prompts/questions that will be associated with a group of options (radio buttons). All questions will get presented on the same page (trial).    options  array  undefined  An array of arrays. The innermost arrays contain a set of options to display for an individual question. The length of the outer array should be the same as the number of questions.    required  array  null  An array of boolean values. Each boolean indicates if a question is required ( true ) or not ( false ), using the HTML5  required  attribute. The length of this array should correspond to the length of the questions array. If this parameter is undefined, all questions will be optional. Note: The HTML5  required  attribute is  not currently supported by the Safari browser .    horizontal  boolean  false  If true, then questions are centered and options are displayed horizontally.    preamble  array  empty string  Array of HTML formatted strings to display at the top of each page above all the questions. Each element of the array corresponds to a trial/page of questions.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-survey-multi-choice/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  A string in JSON format containing the responses for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. The responses recorded as the name of the option label.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the questions first appear on the screen until the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-survey-multi-choice/#examples", 
            "text": "Basic example with multiple questions on a page.", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-survey-text/", 
            "text": "jspsych-survey-text plugin\n\n\nThe survey-text plugin displays a set of questions with free response text fields. The subject types in answers.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestions\n\n\narray\n\n\nundefined\n\n\nAn array of strings. The strings are the prompts for the subject to respond to. Each string gets its own response field.\n\n\n\n\n\n\npreamble\n\n\nstring\n\n\nempty string\n\n\nHTML formatted string to display at the top of the page above all the questions.\n\n\n\n\n\n\nrows\n\n\narray\n\n\n1\n\n\nThe number of rows for the response text box. Array length must match \nquestions\n array, with a numeric value for each entry indicating the number of rows for that question's box.\n\n\n\n\n\n\ncolumns\n\n\narray\n\n\n40\n\n\nThe number of columns for the response text box. Array length must match \nquestions\n array, with a numeric value for each entry indicating the number of columns for that question's box.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA string in JSON format containing the responses for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in \nQ0\n, the second in \nQ1\n, and so on. Each response is a string containing whatever the subject typed into the associated text box.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response.\n\n\n\n\n\n\n\n\nExamples\n\n\nBasic example\n\n\n// defining groups of questions that will go together.\nvar survey_trial = {\n  type: 'survey-text',\n  questions: [\nHow old are you?\n, \nWhere were you born?\n],\n};\n\n\n\n\nCustom number of rows and columns\n\n\nvar survey_trial = {\n  type: 'survey-text',\n  questions: [\nHow old are you?\n, \nWhere were you born?\n],\n  rows: [5,3],\n  columns: [40,50]\n};", 
            "title": "jspsych-survey-text"
        }, 
        {
            "location": "/plugins/jspsych-survey-text/#jspsych-survey-text-plugin", 
            "text": "The survey-text plugin displays a set of questions with free response text fields. The subject types in answers.", 
            "title": "jspsych-survey-text plugin"
        }, 
        {
            "location": "/plugins/jspsych-survey-text/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      questions  array  undefined  An array of strings. The strings are the prompts for the subject to respond to. Each string gets its own response field.    preamble  string  empty string  HTML formatted string to display at the top of the page above all the questions.    rows  array  1  The number of rows for the response text box. Array length must match  questions  array, with a numeric value for each entry indicating the number of rows for that question's box.    columns  array  40  The number of columns for the response text box. Array length must match  questions  array, with a numeric value for each entry indicating the number of columns for that question's box.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-survey-text/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      responses  JSON string  A string in JSON format containing the responses for each question. The encoded object will have a separate variable for the response to each question, with the first question in the trial being recorded in  Q0 , the second in  Q1 , and so on. Each response is a string containing whatever the subject typed into the associated text box.    rt  numeric  The response time in milliseconds for the subject to make a response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-survey-text/#examples", 
            "text": "Basic example  // defining groups of questions that will go together.\nvar survey_trial = {\n  type: 'survey-text',\n  questions: [ How old are you? ,  Where were you born? ],\n};  Custom number of rows and columns  var survey_trial = {\n  type: 'survey-text',\n  questions: [ How old are you? ,  Where were you born? ],\n  rows: [5,3],\n  columns: [40,50]\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-text/", 
            "text": "jspsych-text plugin\n\n\nThis plugin is for showing instructions and other basic HTML content to the subject.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nundefined\n\n\nA string containing HTML formatted text (no HTML code is necessary, but it is allowed).\n\n\n\n\n\n\ncont_key\n\n\narray or \n'mouse'\n\n\n[ ]\n\n\nThis array contains the keys that the subject is allowed to press in order to advance to the next trial. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n). The default value of an empty array means that all keys will be accepted as valid responses. If the value of \n'mouse'\n is used, then clicking the mouse will advance to the next trial.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\n\n\nExample\n\n\nShowing a welcome message\n\n\nvar block = {\n    type: 'text',\n    text: 'Welcome to the experiment. Press any key to begin.'\n}", 
            "title": "jspsych-text"
        }, 
        {
            "location": "/plugins/jspsych-text/#jspsych-text-plugin", 
            "text": "This plugin is for showing instructions and other basic HTML content to the subject.", 
            "title": "jspsych-text plugin"
        }, 
        {
            "location": "/plugins/jspsych-text/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      text  string  undefined  A string containing HTML formatted text (no HTML code is necessary, but it is allowed).    cont_key  array or  'mouse'  [ ]  This array contains the keys that the subject is allowed to press in order to advance to the next trial. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ). The default value of an empty array means that all keys will be accepted as valid responses. If the value of  'mouse'  is used, then clicking the mouse will advance to the next trial.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-text/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-text/#example", 
            "text": "Showing a welcome message  var block = {\n    type: 'text',\n    text: 'Welcome to the experiment. Press any key to begin.'\n}", 
            "title": "Example"
        }, 
        {
            "location": "/plugins/jspsych-visual-search-circle/", 
            "text": "jspsych-visual-search-circle plugin\n\n\nThis plugin presents a customizable visual-search task modelled after \nWang, Cavanagh, \n Green (1994)\n. The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. Here is an example using normal and backward Ns:\n\n\n\n\nDependency\n\n\nThis plugin requires the Snap.svg library, available at \nhttp://www.snapsvg.io\n. You must include the library in the \nhead\n section of your experiment page.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget_present\n\n\nboolean\n\n\nundefined\n\n\nIs the target present?\n\n\n\n\n\n\nset_size\n\n\nnumeric\n\n\nundefined\n\n\nHow many items should be displayed?\n\n\n\n\n\n\ntarget\n\n\nstring\n\n\nundefined\n\n\nPath to image file that is the search target.\n\n\n\n\n\n\nfoil\n\n\nstring\n\n\nundefined\n\n\nPath to image file that is the foil/distractor.\n\n\n\n\n\n\nfixation_image\n\n\nstring\n\n\nundefined\n\n\nPath to image file that is a fixation target.\n\n\n\n\n\n\ntarget_size\n\n\narray\n\n\n[50, 50]\n\n\nTwo element array indicating the height and width of the search array element images.\n\n\n\n\n\n\nfixation_size\n\n\narray\n\n\n[16, 16]\n\n\nTwo element array indicating the height and width of the fixation image.\n\n\n\n\n\n\ncircle_diameter\n\n\nnumeric\n\n\n250\n\n\nThe diameter of the search array circle in pixels.\n\n\n\n\n\n\ntarget_present_key\n\n\nnumeric\n\n\n74\n\n\nThe key to press if the target is present in the search array.\n\n\n\n\n\n\ntarget_absent_key\n\n\nnumeric\n\n\n70\n\n\nThe key to press if the the target is not present in the search array.\n\n\n\n\n\n\ntiming_max_search\n\n\nnumeric\n\n\n-1\n\n\nThe maximum amount of time the subject is allowed to search before the trial will continue. A value of -1 will allow the subject to search indefinitely.\n\n\n\n\n\n\ntiming_fixation\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the fixation image for before the search array (in milliseconds).\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\nTrue if the subject gave the correct response.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.\n\n\n\n\n\n\nset_size\n\n\nnumeric\n\n\nThe number of items in the search array\n\n\n\n\n\n\ntarget_present\n\n\nboolean\n\n\nTrue if the target is present in the search array\n\n\n\n\n\n\nlocations\n\n\nJSON string\n\n\nJSON-encoded array where each element of the array is the pixel value of the center of an image in the search array. If the target is present, then the first element will represent the location of the target.\n\n\n\n\n\n\n\n\nExample", 
            "title": "jspsych-visual-search-circle"
        }, 
        {
            "location": "/plugins/jspsych-visual-search-circle/#jspsych-visual-search-circle-plugin", 
            "text": "This plugin presents a customizable visual-search task modelled after  Wang, Cavanagh,   Green (1994) . The subject indicates whether or not a target is present among a set of distractors. The stimuli are displayed in a circle, evenly-spaced, equidistant from a fixation point. Here is an example using normal and backward Ns:", 
            "title": "jspsych-visual-search-circle plugin"
        }, 
        {
            "location": "/plugins/jspsych-visual-search-circle/#dependency", 
            "text": "This plugin requires the Snap.svg library, available at  http://www.snapsvg.io . You must include the library in the  head  section of your experiment page.", 
            "title": "Dependency"
        }, 
        {
            "location": "/plugins/jspsych-visual-search-circle/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      target_present  boolean  undefined  Is the target present?    set_size  numeric  undefined  How many items should be displayed?    target  string  undefined  Path to image file that is the search target.    foil  string  undefined  Path to image file that is the foil/distractor.    fixation_image  string  undefined  Path to image file that is a fixation target.    target_size  array  [50, 50]  Two element array indicating the height and width of the search array element images.    fixation_size  array  [16, 16]  Two element array indicating the height and width of the fixation image.    circle_diameter  numeric  250  The diameter of the search array circle in pixels.    target_present_key  numeric  74  The key to press if the target is present in the search array.    target_absent_key  numeric  70  The key to press if the the target is not present in the search array.    timing_max_search  numeric  -1  The maximum amount of time the subject is allowed to search before the trial will continue. A value of -1 will allow the subject to search indefinitely.    timing_fixation  numeric  1000  How long to show the fixation image for before the search array (in milliseconds).", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-visual-search-circle/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      correct  boolean  True if the subject gave the correct response.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the stimulus first appears on the screen until the subject's response.    set_size  numeric  The number of items in the search array    target_present  boolean  True if the target is present in the search array    locations  JSON string  JSON-encoded array where each element of the array is the pixel value of the center of an image in the search array. If the target is present, then the first element will represent the location of the target.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-visual-search-circle/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/", 
            "text": "jspsych-vsl-animate-occlusion plugin\n\n\nThe VSL (visual statistical learning) animate occlusion plugin displays an animated sequence of shapes that disappear behind an occluding rectangle while they change from one shape to another. This plugin can be used to replicate the experiments described in:\n\n\nFiser, J., \n Aslin, R. N. (2002). Statistical learning of higher-order temporal structure from visual shape sequences. \nJournal of Experimental Psychology: Learning, Memory, and Cognition, 28\n(3), 458.\n\n\nDependency\n\n\nThis plugin requires the Snap.svg library, available at \nhttp://www.snapsvg.io\n. You must include the library in the \nhead\n section of your experiment page.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nEach element of the array is a stimulus. A stimulus is a path to an image file. The order of stimuli in the array determines the order of the animation sequence.\n\n\n\n\n\n\ncanvas_size\n\n\narray\n\n\n[400, 400]\n\n\nArray specifying the width and height of the area that the animation will display in. Stimuli will move to the edges of this area, so increasing the width without increasing the \ntiming_cycle\n parameter will speed up the images.\n\n\n\n\n\n\nimage_size\n\n\narray\n\n\n[100, 100]\n\n\nArray specifying the width and height of the images to show. The occluding rectangle will have a width equal to the width of image_size.\n\n\n\n\n\n\ninitial_direction\n\n\nstring\n\n\n\"left\"\n\n\nWhich direction the stimulus should move first (subsequent directions will alternate). Choices are \"left\" or \"right\".\n\n\n\n\n\n\nocclude_center\n\n\nboolean\n\n\ntrue\n\n\nIf true, display a rectangle in the center of the screen that is just wide enough to occlude the image completely as it passes behind.\n\n\n\n\n\n\nchoices\n\n\narray\n\n\n[ ]\n\n\nThis array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their \nnumeric key code\n or as characters (e.g. \n'a'\n, \n'q'\n). The default value of an empty array means that all keys will be accepted as valid responses.\n\n\n\n\n\n\ntiming_cycle\n\n\nnumeric\n\n\n1000\n\n\nHow long it takes for a stimulus in the sequence to make a complete cycle (move to the edge and back to the center) in milliseconds.\n\n\n\n\n\n\ntiming_pre_movement\n\n\nnumeric\n\n\n500\n\n\nHow long to wait before the stimuli starts moving from behind the center rectangle.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nJSON string\n\n\nA JSON encoded array where each element of the array is a stimulus from the sequence, in the order that they were shown.\n\n\n\n\n\n\nresponses\n\n\nJSON string\n\n\nA JSON encoded array containing all response information. The encoded object is an array containing one element for each valid response. Each response item has three properties: \nkey\n the key code of the response key, \nstimulus\n the index of the stimulus that was displayed when the response was made, and \nrt\n the response time measured since the start of the sequence.\n\n\n\n\n\n\n\n\nExamples\n\n\nDisplaying a simple sequence.\n\n\nvar images = [\nimg/1.gif\n,\nimg/2.gif\n,\nimg/3.gif\n,\nimg/4.gif\n,\nimg/5.gif\n,\nimg/6.gif\n,\nimg/7.gif\n,\nimg/8.gif\n,\nimg/9.gif\n,\nimg/10.gif\n];\n\n\n// create vsl block for jspsych\nvar vsl_block = {\n  type: 'vsl-animate-occlusion',\n  stimuli: images\n};", 
            "title": "jspsych-vsl-animate-occlusion"
        }, 
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#jspsych-vsl-animate-occlusion-plugin", 
            "text": "The VSL (visual statistical learning) animate occlusion plugin displays an animated sequence of shapes that disappear behind an occluding rectangle while they change from one shape to another. This plugin can be used to replicate the experiments described in:  Fiser, J.,   Aslin, R. N. (2002). Statistical learning of higher-order temporal structure from visual shape sequences.  Journal of Experimental Psychology: Learning, Memory, and Cognition, 28 (3), 458.", 
            "title": "jspsych-vsl-animate-occlusion plugin"
        }, 
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#dependency", 
            "text": "This plugin requires the Snap.svg library, available at  http://www.snapsvg.io . You must include the library in the  head  section of your experiment page.", 
            "title": "Dependency"
        }, 
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Each element of the array is a stimulus. A stimulus is a path to an image file. The order of stimuli in the array determines the order of the animation sequence.    canvas_size  array  [400, 400]  Array specifying the width and height of the area that the animation will display in. Stimuli will move to the edges of this area, so increasing the width without increasing the  timing_cycle  parameter will speed up the images.    image_size  array  [100, 100]  Array specifying the width and height of the images to show. The occluding rectangle will have a width equal to the width of image_size.    initial_direction  string  \"left\"  Which direction the stimulus should move first (subsequent directions will alternate). Choices are \"left\" or \"right\".    occlude_center  boolean  true  If true, display a rectangle in the center of the screen that is just wide enough to occlude the image completely as it passes behind.    choices  array  [ ]  This array contains the keys that the subject is allowed to press in order to respond to the stimulus. Keys can be specified as their  numeric key code  or as characters (e.g.  'a' ,  'q' ). The default value of an empty array means that all keys will be accepted as valid responses.    timing_cycle  numeric  1000  How long it takes for a stimulus in the sequence to make a complete cycle (move to the edge and back to the center) in milliseconds.    timing_pre_movement  numeric  500  How long to wait before the stimuli starts moving from behind the center rectangle.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  JSON string  A JSON encoded array where each element of the array is a stimulus from the sequence, in the order that they were shown.    responses  JSON string  A JSON encoded array containing all response information. The encoded object is an array containing one element for each valid response. Each response item has three properties:  key  the key code of the response key,  stimulus  the index of the stimulus that was displayed when the response was made, and  rt  the response time measured since the start of the sequence.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-vsl-animate-occlusion/#examples", 
            "text": "Displaying a simple sequence.  var images = [ img/1.gif , img/2.gif , img/3.gif , img/4.gif , img/5.gif , img/6.gif , img/7.gif , img/8.gif , img/9.gif , img/10.gif ];\n\n\n// create vsl block for jspsych\nvar vsl_block = {\n  type: 'vsl-animate-occlusion',\n  stimuli: images\n};", 
            "title": "Examples"
        }, 
        {
            "location": "/plugins/jspsych-vsl-grid-scene/", 
            "text": "jspsych-vsl-grid-scene plugin\n\n\nThe VSL (visual statistical learning) grid scene plugin displays images arranged in a grid. This plugin can be used to replicate the experiments described in:\n\n\nFiser, J., \n Aslin, R. N. (2001). Unsupervised statistical learning of higher-order spatial structures from visual scenes. \nPsychological Science, 12\n(6), 499-504.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nAn array that defines a grid. Grids should be declared as two dimensional arrays in \n[row][col]\n order, with paths to image files in the locations where images are displayed, and 0 in blank spaces. See example below.\n\n\n\n\n\n\nimage_size\n\n\narray\n\n\n[100, 100]\n\n\nArray specifying the width and height of the images to show. Grid cells will also be this size, with 10% padding.\n\n\n\n\n\n\ntiming_duration\n\n\nnumeric\n\n\n2000\n\n\nHow long to show the stimulus for in milliseconds.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nJSON string\n\n\nJSON encoded array of the stimulus shown on the trial.\n\n\n\n\n\n\n\n\nStimulus Creation Method\n\n\nThe plugin also includes a public method for generating the grid scene stimuli that the plugin uses. You can use this method to create HTML strings that produce the stimuli, and then incorporate the stimuli in other plugins. To use this method, include the plugin script on the page and then call the method like this:\n\n\n\nvar pattern = [\n                [\nimg/1.gif\n, \nimg/2.gif\n, 0],\n                [ 0, \nimg/3.gif\n, 0],\n                [\nimg/5.gif\n, \nimg/4.gif\n, 0]\n            ];\n\nvar image_size = 100; // pixels\n\nvar grid_stimulus = jsPsych['vsl-grid-scene'].generate_stimulus(pattern, image_size);\n\n// grid_stimulus will now contain a string (NOT an HTML DOM object) that you can\n// pass into other plugins that accept HTML stimuli as input, such as jspsych-categorize.\n\n\n\n\n\nExample\n\n\nBasic example\n\n\nvar scene = [\n  [\nimg/1.gif\n, \nimg/2.gif\n, 0],\n  [ 0, \nimg/3.gif\n, 0],\n  [\nimg/5.gif\n, \nimg/4.gif\n, 0]\n]\n\n\n// create vsl block for jspsych\nvar vsl_block = {\n    type: 'vsl-grid-scene',\n    stimuli: scene\n};", 
            "title": "jspsych-vsl-grid-scene"
        }, 
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#jspsych-vsl-grid-scene-plugin", 
            "text": "The VSL (visual statistical learning) grid scene plugin displays images arranged in a grid. This plugin can be used to replicate the experiments described in:  Fiser, J.,   Aslin, R. N. (2001). Unsupervised statistical learning of higher-order spatial structures from visual scenes.  Psychological Science, 12 (6), 499-504.", 
            "title": "jspsych-vsl-grid-scene plugin"
        }, 
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  An array that defines a grid. Grids should be declared as two dimensional arrays in  [row][col]  order, with paths to image files in the locations where images are displayed, and 0 in blank spaces. See example below.    image_size  array  [100, 100]  Array specifying the width and height of the images to show. Grid cells will also be this size, with 10% padding.    timing_duration  numeric  2000  How long to show the stimulus for in milliseconds.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  JSON string  JSON encoded array of the stimulus shown on the trial.     Stimulus Creation Method  The plugin also includes a public method for generating the grid scene stimuli that the plugin uses. You can use this method to create HTML strings that produce the stimuli, and then incorporate the stimuli in other plugins. To use this method, include the plugin script on the page and then call the method like this:  \nvar pattern = [\n                [ img/1.gif ,  img/2.gif , 0],\n                [ 0,  img/3.gif , 0],\n                [ img/5.gif ,  img/4.gif , 0]\n            ];\n\nvar image_size = 100; // pixels\n\nvar grid_stimulus = jsPsych['vsl-grid-scene'].generate_stimulus(pattern, image_size);\n\n// grid_stimulus will now contain a string (NOT an HTML DOM object) that you can\n// pass into other plugins that accept HTML stimuli as input, such as jspsych-categorize.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-vsl-grid-scene/#example", 
            "text": "Basic example  var scene = [\n  [ img/1.gif ,  img/2.gif , 0],\n  [ 0,  img/3.gif , 0],\n  [ img/5.gif ,  img/4.gif , 0]\n]\n\n\n// create vsl block for jspsych\nvar vsl_block = {\n    type: 'vsl-grid-scene',\n    stimuli: scene\n};", 
            "title": "Example"
        }, 
        {
            "location": "/plugins/jspsych-xab/", 
            "text": "jspsych-xab plugin\n\n\nThe XAB plugin displays either an image or HTML object stimulus (X). After a short gap, the plugin displays two additional stimuli (A and B). The subject selects which of the two stimuli matches X using the keyboard.\n\n\nParameters\n\n\nThis table lists the parameters associated with this plugin. Parameters with a default value of \nundefined\n must be specified. Other parameters can be left unspecified if the default value is acceptable.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstimuli\n\n\narray\n\n\nundefined\n\n\nArray of two or three elements. If it is two elements, then the plugin will show the first element as X and as the target during the A/B portion (the second element will be the foil). If it is three elements, then the first is X the second is the target (A) and the third is the foil (B). This is useful if X and A are not identical, but A is still the correct choice (e.g. a categorization experiment where the goal is to pick the item that is in the same category). Stimuli can be paths to images, or html strings.\n\n\n\n\n\n\nis_html\n\n\nboolean\n\n\nfalse\n\n\nIf the elements of the \nstimuli\n array are strings containing HTML content, then this parameter must be set to true.\n\n\n\n\n\n\nleft_key\n\n\nnumeric or string\n\n\n'Q'\n\n\nWhich key the subject should press to indicate that the target is on the left side.\n\n\n\n\n\n\nright_key\n\n\nnumeric or string\n\n\n'P'\n\n\nWhich key the subject should press to indicate that the target is on the right side.\n\n\n\n\n\n\nprompt\n\n\nstring\n\n\n\"\"\n\n\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).\n\n\n\n\n\n\ntiming_x\n\n\nnumeric\n\n\n1000\n\n\nHow long to show the X stimulus for in milliseconds.\n\n\n\n\n\n\ntiming_xab_gap\n\n\nnumeric\n\n\n1000\n\n\nHow long to show a blank screen in between X and AB in milliseconds.\n\n\n\n\n\n\ntiming_ab\n\n\nnumeric\n\n\n-1\n\n\nHow long to show A and B in milliseconds. If the value of this parameter is -1, then the stimuli will remain on the screen until a response is given.\n\n\n\n\n\n\ntiming_response\n\n\nnumeric\n\n\n-1\n\n\nThe maximum duration to wait for a response, measured from the onset of the AB portion of the trial. If -1, then the trial will wait indefinitely for a response.\n\n\n\n\n\n\n\n\nData Generated\n\n\nIn addition to the \ndefault data collected by all plugins\n, this plugin collects the following data for each trial.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nstimulus\n\n\nstring\n\n\nJSON-encoded array of the stimuli used in the trial.\n\n\n\n\n\n\nkey_press\n\n\nnumeric\n\n\nIndicates which key the subject pressed. The value is the \nnumeric key code\n corresponding to the subject's response.\n\n\n\n\n\n\nrt\n\n\nnumeric\n\n\nThe response time in milliseconds for the subject to make a response. The time is measured from when the A and B stimuli first appear on the screen until the subject's response.\n\n\n\n\n\n\ncorrect\n\n\nboolean\n\n\nTrue if the subject picks the correct answer.\n\n\n\n\n\n\n\n\nExamples\n\n\nDoing an exact match task\n\n\nvar block = {\n    type: 'xab',\n    stimuli: ['img/happy_face.png', 'img/sad_face.png'],\n    prompt: \nPress Q if the face you just saw is on the left. Press P if the face you just saw is on the right.\n\n}\n\n\n\n\nMatching based on a feature\n\n\nvar block = {\n    type: 'xab',\n    stimuli: ['img/happy_joe_face.png', 'img/sad_joe_face.png', 'img/sad_fred_face.png'],\n    prompt: \nPress Q if the person you just saw is on the left. Press P if the person you just saw is on the right.\n\n}", 
            "title": "jspsych-xab"
        }, 
        {
            "location": "/plugins/jspsych-xab/#jspsych-xab-plugin", 
            "text": "The XAB plugin displays either an image or HTML object stimulus (X). After a short gap, the plugin displays two additional stimuli (A and B). The subject selects which of the two stimuli matches X using the keyboard.", 
            "title": "jspsych-xab plugin"
        }, 
        {
            "location": "/plugins/jspsych-xab/#parameters", 
            "text": "This table lists the parameters associated with this plugin. Parameters with a default value of  undefined  must be specified. Other parameters can be left unspecified if the default value is acceptable.     Parameter  Type  Default Value  Description      stimuli  array  undefined  Array of two or three elements. If it is two elements, then the plugin will show the first element as X and as the target during the A/B portion (the second element will be the foil). If it is three elements, then the first is X the second is the target (A) and the third is the foil (B). This is useful if X and A are not identical, but A is still the correct choice (e.g. a categorization experiment where the goal is to pick the item that is in the same category). Stimuli can be paths to images, or html strings.    is_html  boolean  false  If the elements of the  stimuli  array are strings containing HTML content, then this parameter must be set to true.    left_key  numeric or string  'Q'  Which key the subject should press to indicate that the target is on the left side.    right_key  numeric or string  'P'  Which key the subject should press to indicate that the target is on the right side.    prompt  string  \"\"  This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the subject is supposed to take (e.g. which key to press).    timing_x  numeric  1000  How long to show the X stimulus for in milliseconds.    timing_xab_gap  numeric  1000  How long to show a blank screen in between X and AB in milliseconds.    timing_ab  numeric  -1  How long to show A and B in milliseconds. If the value of this parameter is -1, then the stimuli will remain on the screen until a response is given.    timing_response  numeric  -1  The maximum duration to wait for a response, measured from the onset of the AB portion of the trial. If -1, then the trial will wait indefinitely for a response.", 
            "title": "Parameters"
        }, 
        {
            "location": "/plugins/jspsych-xab/#data-generated", 
            "text": "In addition to the  default data collected by all plugins , this plugin collects the following data for each trial.     Name  Type  Value      stimulus  string  JSON-encoded array of the stimuli used in the trial.    key_press  numeric  Indicates which key the subject pressed. The value is the  numeric key code  corresponding to the subject's response.    rt  numeric  The response time in milliseconds for the subject to make a response. The time is measured from when the A and B stimuli first appear on the screen until the subject's response.    correct  boolean  True if the subject picks the correct answer.", 
            "title": "Data Generated"
        }, 
        {
            "location": "/plugins/jspsych-xab/#examples", 
            "text": "Doing an exact match task  var block = {\n    type: 'xab',\n    stimuli: ['img/happy_face.png', 'img/sad_face.png'],\n    prompt:  Press Q if the face you just saw is on the left. Press P if the face you just saw is on the right. \n}  Matching based on a feature  var block = {\n    type: 'xab',\n    stimuli: ['img/happy_joe_face.png', 'img/sad_joe_face.png', 'img/sad_fred_face.png'],\n    prompt:  Press Q if the person you just saw is on the left. Press P if the person you just saw is on the right. \n}", 
            "title": "Examples"
        }, 
        {
            "location": "/support/", 
            "text": "Support\n\n\nFor questions about jsPsych, the preferred method of support is the \njsPsych google group\n. While I'm happy to answer e-mails about the library, I prefer to do it in a public forum so that an archive of questions and answers is created. Messages posted to the group go straight to my inbox, so it's just as fast as emailing me.\n\n\nIf you have identified a problem with the library itself, such as a bug in the code or an error in the documentation, please \nopen a new issue\n on the GitHub site. Please don't use the issue tracker for questions about how to use the library.", 
            "title": "Support"
        }, 
        {
            "location": "/support/#support", 
            "text": "For questions about jsPsych, the preferred method of support is the  jsPsych google group . While I'm happy to answer e-mails about the library, I prefer to do it in a public forum so that an archive of questions and answers is created. Messages posted to the group go straight to my inbox, so it's just as fast as emailing me.  If you have identified a problem with the library itself, such as a bug in the code or an error in the documentation, please  open a new issue  on the GitHub site. Please don't use the issue tracker for questions about how to use the library.", 
            "title": "Support"
        }, 
        {
            "location": "/about/about/", 
            "text": "About jsPsych\n\n\njsPsych was created by \nJosh de Leeuw\n at Indiana University.\n\n\nCitation\n\n\nde Leeuw, J. R. (2015). jsPsych: A JavaScript library for creating behavioral experiments in a web browser. \nBehavior Research Methods\n, \n47\n(1), 1-12. doi:10.3758/s13428-014-0458-y.\n\n\n\n\nDocumentation generated with \nmkdocs", 
            "title": "About jsPsych"
        }, 
        {
            "location": "/about/about/#about-jspsych", 
            "text": "jsPsych was created by  Josh de Leeuw  at Indiana University.  Citation  de Leeuw, J. R. (2015). jsPsych: A JavaScript library for creating behavioral experiments in a web browser.  Behavior Research Methods ,  47 (1), 1-12. doi:10.3758/s13428-014-0458-y.   Documentation generated with  mkdocs", 
            "title": "About jsPsych"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\njsPsych is licensed under the MIT license.\n\n\n\n\nThe MIT License (MIT)\n\n\nCopyright (c) 2016 Joshua R. de Leeuw\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "jsPsych is licensed under the MIT license.   The MIT License (MIT)  Copyright (c) 2016 Joshua R. de Leeuw  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/about/contributing/", 
            "text": "Contributing to jsPsych\n\n\nContributions to jsPsych are welcome! All of the code is managed through the GitHub repository, so the best way to add or modify code is through GitHub. If you are interested in modifying code, the following steps are encouraged:\n\n\nSteps for modifying the code\n\n\nDisucss the proposed change\n\n\nIf you have a specific modification in mind, then go ahead and open a new issue via GitHub. Describe the proposed change and what problem it solves. If you are interested in adding a new plugin to the library, it helps if you post an example of the plugin in use and describe the flexibility of the plugin.\n\n\nIf the modification you are interested in working on is not quite at the point where you have a specific modification to the code base in mind, then it might be helpful to discss the issue first on the jsPsych google group forum.\n\n\nFork the library and modify the code\n\n\nTo make changes to the code, you should fork the jsPsych library via GitHub. Changes should be targeted at the \ndev\n branch.\n\n\nSubmit a pull request\n\n\nOnce your modification is complete, submit a pull request to merge your changes into the main repository. Pull requests will be reviewed by the project owner.\n\n\nWriting new plugins\n\n\nNew plugins are welcome additions to the library. Plugins can be distributed independently of the main library, or added to the GitHub repository via a pull request and the process described above. If you want to add your plugin to the main library, then there are a few guidelines to follow.\n\n\nMake the plugin as general as possible\n\n\nPlugins are most useful when they are flexible. Avoid fixing the value of parameters that could be variables. If the plugin displays visual stimuli, then images or HTML content should be accepted.\n\n\nUse the jsPsych.pluginAPI module when appropriate\n\n\nThe pluginAPI module contains functions relevant to plugin development. Avoid duplicating the functions defined within the library in your plugin. (If you have a suggestion for improving the pluginAPI method, then go ahead and submit a pull request to modify it directly).\n\n\nSupport the default plugin parameters\n\n\nThere are a number of parameters that are options for all plugins. Make sure that your plugin supports these parameters.\n\n\nDocument your plugin\n\n\nWhen submitting a pull request to add your plugin, make sure to include a documentation page in the same style as the other docs pages. Documentation files exist in the \ndocs\n directory.", 
            "title": "Contributing to jsPsych"
        }, 
        {
            "location": "/about/contributing/#contributing-to-jspsych", 
            "text": "Contributions to jsPsych are welcome! All of the code is managed through the GitHub repository, so the best way to add or modify code is through GitHub. If you are interested in modifying code, the following steps are encouraged:", 
            "title": "Contributing to jsPsych"
        }, 
        {
            "location": "/about/contributing/#steps-for-modifying-the-code", 
            "text": "Disucss the proposed change  If you have a specific modification in mind, then go ahead and open a new issue via GitHub. Describe the proposed change and what problem it solves. If you are interested in adding a new plugin to the library, it helps if you post an example of the plugin in use and describe the flexibility of the plugin.  If the modification you are interested in working on is not quite at the point where you have a specific modification to the code base in mind, then it might be helpful to discss the issue first on the jsPsych google group forum.  Fork the library and modify the code  To make changes to the code, you should fork the jsPsych library via GitHub. Changes should be targeted at the  dev  branch.  Submit a pull request  Once your modification is complete, submit a pull request to merge your changes into the main repository. Pull requests will be reviewed by the project owner.", 
            "title": "Steps for modifying the code"
        }, 
        {
            "location": "/about/contributing/#writing-new-plugins", 
            "text": "New plugins are welcome additions to the library. Plugins can be distributed independently of the main library, or added to the GitHub repository via a pull request and the process described above. If you want to add your plugin to the main library, then there are a few guidelines to follow.  Make the plugin as general as possible  Plugins are most useful when they are flexible. Avoid fixing the value of parameters that could be variables. If the plugin displays visual stimuli, then images or HTML content should be accepted.  Use the jsPsych.pluginAPI module when appropriate  The pluginAPI module contains functions relevant to plugin development. Avoid duplicating the functions defined within the library in your plugin. (If you have a suggestion for improving the pluginAPI method, then go ahead and submit a pull request to modify it directly).  Support the default plugin parameters  There are a number of parameters that are options for all plugins. Make sure that your plugin supports these parameters.  Document your plugin  When submitting a pull request to add your plugin, make sure to include a documentation page in the same style as the other docs pages. Documentation files exist in the  docs  directory.", 
            "title": "Writing new plugins"
        }
    ]
}